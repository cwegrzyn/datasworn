/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type NamespaceID = string;
export type OracleCollectionID = string;
/**
 * A localized plain text name or label.
 */
export type Label = string;
/**
 * A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
 */
export type CSSColor = string;
/**
 * A relative URL pointing to a raster image in the WEBP format.
 */
export type WEBPImageURL = string;
export type OracleCollectionStyle = "multi_table";
/**
 * A localized plain text name or label.
 */
export type Label1 = string;
/**
 * The value(s) from each OracleTableRow that is rendered in this column.
 *
 *   * roll: Column displays the roll range (`min` and `max`) of each row.
 *   * result: Column displays the row's `result` key.
 *   * summary: Column displays the row's `summary` key.
 *   * description: Column displays the row's `description` key.
 */
export type OracleTableColumnContentKey = "roll" | "result" | "summary" | "description";
/**
 * A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
 */
export type CSSColor1 = string;
/**
 * The key of the OracleTable (within this collection), whose data is used to render this column.
 */
export type DictKey = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString = string;
export type OracleTableID = string;
/**
 * A relative URL pointing to a vector image in the SVG format.
 */
export type SVGImageURL = string;
export type DiceNotation = string;
/**
 *   * standalone_table: Render as a standalone table.
 *   * embed_in_row: Render as a table, within a row in another table.
 *   * embed_as_column: Render as a single column of a table.
 */
export type OracleTableStyle = "standalone_table" | "embed_in_row" | "embed_as_column";
/**
 * A localized plain text name or label.
 */
export type Label2 = string;
/**
 * The value(s) from each OracleTableRow that is rendered in this column.
 *
 *   * roll: Column displays the roll range (`min` and `max`) of each row.
 *   * result: Column displays the row's `result` key.
 *   * summary: Column displays the row's `summary` key.
 *   * description: Column displays the row's `description` key.
 */
export type OracleTableColumnContentKey1 = "roll" | "result" | "summary" | "description";
/**
 * A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
 */
export type CSSColor2 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString1 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString2 = string;
export type AssetID = string;
export type AtlasEntryID = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveID = string;
export type NpcID = string;
export type DelveSiteDomainID = string;
export type DelveSiteThemeID = string;
/**
 * Normally, rows will end with two numbers separated by a dash, indicating their dice range.
 *
 * Rows with a single number represent unrollable rows that are sometimes included for rendering purposes; in this case, the number represents the row's index.
 */
export type OracleTableRowID = string;
/**
 * A string template that may be used in place of OracleTableRow#result.
 */
export type TemplateString = string;
/**
 * A string template that may be used in place of OracleTableRow#summary.
 */
export type TemplateString1 = string;
/**
 * A string template that may be used in place of OracleTableRow#description.
 */
export type TemplateString2 = string;
/**
 * Special roll instructions to use when rolling multiple times on a single oracle table.
 *
 *   * no_duplicates: Duplicates should be re-rolled.
 *   * keep_duplicates: Duplicates should be kept.
 *   * make_it_worse: Duplicates should be kept, and they compound to make things worse.
 */
export type OracleTableRollMethod = "no_duplicates" | "keep_duplicates" | "make_it_worse";
/**
 * The ID of the oracle table to be rolled. If omitted, it defaults to the ID of this oracle table.
 */
export type OracleTableID1 = string;
/**
 *   * common_noun: A common noun.
 *   * proper_noun: A proper noun.
 *   * adjunct_common_noun: A common noun used as an adjective, to modify another noun.
 *   * adjunct_proper_noun: A proper noun used as an adjective, to modify another noun.
 *   * verb: A verb in present tense
 *   * gerund: Gerund or present participle of a verb, e.g. "going", "seeing", "waving"
 *   * adjective: An adjective.
 *   * attributive_verb: A verb used as an adjective, to modify a noun.
 */
export type PartOfSpeech =
  | "common_noun"
  | "proper_noun"
  | "adjunct_common_noun"
  | "adjunct_proper_noun"
  | "verb"
  | "gerund"
  | "adjective"
  | "attributive_verb";
export type PageNumber = number;
/**
 * Indicates that this table replaces the identified table. References to the replaced table can be considered equivalent to this table.
 */
export type OracleTableID2 = string;
/**
 * Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own.
 */
export type OracleCollectionID1 = string;
/**
 * Indicates that this collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection.
 */
export type OracleCollectionID2 = string;
export type AssetTypeID = string;
/**
 * A localized plain text name or label.
 */
export type Label3 = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export type AssetOptionField = {
  id: AssetOptionFieldID;
  [k: string]: unknown;
} & (SelectFieldPlayerStat | TextField);
export type AssetOptionFieldID = string;
/**
 * A basic player character stat.
 */
export type PlayerStat = string;
export type AssetIDWildcard = string;
export type AssetAbilityID = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export type AssetAbilityOptionField = {
  id: AssetAbilityOptionFieldID;
  [k: string]: unknown;
} & TextField;
export type AssetAbilityOptionFieldID = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export type AssetAbilityControlField = {
  id: AssetAbilityControlFieldID;
  [k: string]: unknown;
} & (ClockField | CounterField | AssetCheckboxField);
export type AssetAbilityControlFieldID = string;
export type MoveEnhancement =
  | MoveActionRollEnhancement
  | MoveNoRollEnhancement
  | MoveProgressRollEnhancement
  | MoveSpecialTrackEnhancement;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString3 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * player_choice: The player chooses which roll option to use.
 *   * highest: Use the roll option with the best/highest value.
 *   * lowest: Use the roll option with the worst/lowest value.
 *   * all: Use **every** roll option at once.
 */
export type ActionRollMethod = "miss" | "weak_hit" | "strong_hit" | "player_choice" | "highest" | "lowest" | "all";
export type ActionRollOption =
  | RollOptionStat
  | RollOptionConditionMeter
  | RollOptionAssetControl
  | RollOptionAssetOption
  | RollOptionAttachedAssetControl
  | RollOptionAttachedAssetOption
  | RollOptionCustom;
/**
 * A basic, rollable player character resource.
 */
export type PlayerConditionMeter = string;
/**
 * The key of the asset control field.
 */
export type DictKey1 = string;
/**
 * The key of the asset option field.
 */
export type DictKey2 = string;
/**
 * The key of the asset control field.
 */
export type DictKey3 = string;
/**
 * The key of the asset option field.
 */
export type DictKey4 = string;
/**
 * A move ID with wildcards
 */
export type MoveIDWithWildcard = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString4 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString5 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * progress_roll: Make a progress roll on a progress track associated with this move.
 */
export type ProgressRollMethod = "miss" | "weak_hit" | "strong_hit" | "progress_roll";
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString6 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * player_choice: The player chooses which roll option to use.
 *   * highest: Use the roll option with the best/highest value.
 *   * lowest: Use the roll option with the worst/lowest value.
 *   * all: Use **every** roll option at once.
 */
export type SpecialTrackRollMethod =
  | "miss"
  | "weak_hit"
  | "strong_hit"
  | "player_choice"
  | "highest"
  | "lowest"
  | "all";
/**
 * Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.
 * 'Canonical' examples:
 *   * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.
 *   * `failure_track`, described in Ironsworn: Delve
 *   * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged
 *
 *
 */
export type SpecialTrackType = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export type Move = MoveActionRoll | MoveNoRoll | ProgressMove | ProgressMoveSpecialTrackRoll;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString7 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString8 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString9 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString10 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveID1 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString11 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString12 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveID2 = string;
/**
 * A localized plain text name or label.
 */
export type Label4 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString13 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString14 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * progress_roll: Make a progress roll on a progress track associated with this move.
 */
export type ProgressRollMethod1 = "miss" | "weak_hit" | "strong_hit" | "progress_roll";
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString15 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveID3 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString16 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString17 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString18 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveID4 = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export type AssetControlField = {
  id: AssetControlFieldID;
  [k: string]: unknown;
} & (AssetConditionMeter | AssetCheckboxField | AssetCardFlipField | SelectFieldAssetEnhancement);
export type AssetControlFieldID = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export type AssetConditionMeterControlField = {
  id: AssetConditionMeterControlFieldID;
  [k: string]: unknown;
} & (AssetCheckboxField | AssetCardFlipField);
export type AssetConditionMeterControlFieldID = string;
/**
 * A move ID with wildcards
 */
export type MoveIDWithWildcard1 = string;
/**
 * A move ID with wildcards
 */
export type MoveIDWithWildcard2 = string;
/**
 * Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own.
 */
export type AssetTypeID1 = string;
export type AtlasID = string;
/**
 * Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own.
 */
export type AtlasID1 = string;
export type DelveSiteID = string;
/**
 * Challenge rank, represented as an integer:
 *
 *   * 1: Troublesome
 *   * 2: Dangerous
 *   * 3: Formidable
 *   * 4: Extreme
 *   * 5: Epic
 */
export type ChallengeRank = 1 | 2 | 3 | 4 | 5;
export type DelveSiteDenizenID = string;
export type DelveSiteDenizenFrequency = "very_common" | "common" | "uncommon" | "rare" | "unforeseen";
/**
 * The ID of the relevant NPC entry, if one is specified.
 */
export type NpcID1 = string;
/**
 * The ID of an atlas entry representing the region in which this delve site is located.
 */
export type AtlasEntryID1 = string;
export type MoveCategoryID = string;
/**
 * Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own.
 */
export type MoveCategoryID1 = string;
export type NpcCollectionID = string;
/**
 * A localized category label describing the nature of this NPC.
 *
 * In Ironsworn classic, this is probably the singular form of the parent collection's name.
 *
 * For Starforged, see the table on p. 258 for examples.
 */
export type NpcNature = string;
export type NpcVariantID = string;
/**
 * Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own.
 */
export type NpcCollectionID1 = string;
export type RarityID = string;
/**
 * The asset augmented by this rarity.
 */
export type AssetID1 = string;
export type DomainFeatureRowID = string;
export type DomainDangerRowID = string;
/**
 * An oracle table ID containing place name elements. For examples, see oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in oracle collection ID `delve/collections/oracles/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (ID: delve/oracles/site_name/format) to create random names for delve sites.
 */
export type OracleTableID3 = string;
export type ThemeFeatureRowID = string;
export type ThemeDangerRowID = string;
export type TruthID = string;
export type TruthOptionID = string;

/**
 * Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.
 */
export interface Datasworn {
  id: NamespaceID;
  /**
   * A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.
   */
  oracles?: {
    [k: string]: OracleCollection;
  };
  source: Source;
  /**
   * A dictionary object containing asset types, which contain assets.
   */
  assets?: {
    [k: string]: AssetType;
  };
  /**
   * A dictionary object containing atlas collections, which contain atlas entries.
   */
  atlas?: {
    [k: string]: Atlas;
  };
  /**
   * A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve
   */
  delve_sites?: {
    [k: string]: DelveSite;
  };
  /**
   * A dictionary object containing move categories, which contain moves.
   */
  moves?: {
    [k: string]: MoveCategory;
  };
  /**
   * A dictionary object containing NPC collections, which contain NPCs.
   */
  npcs?: {
    [k: string]: NpcCollection;
  };
  /**
   * A dictionary object containing rarities, like those presented in Ironsworn: Delve.
   */
  rarities?: {
    [k: string]: Rarity;
  };
  /**
   * A dictionary object containing delve site domains.
   */
  site_domains?: {
    [k: string]: DelveSiteDomain;
  };
  /**
   * A dictionary object containing delve site themes.
   */
  site_themes?: {
    [k: string]: DelveSiteTheme;
  };
  /**
   * A dictionary object of truth categories.
   */
  truths?: {
    [k: string]: Truth;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface OracleCollection {
  id: OracleCollectionID;
  name: Label;
  canonical_name?: Label;
  color?: CSSColor;
  images?: WEBPImageURL[];
  rendering?: OracleCollectionRendering;
  summary?: MarkdownString;
  description?: MarkdownString;
  contents?: {
    [k: string]: OracleTable;
  };
  collections?: {
    [k: string]: OracleCollection;
  };
  suggestions?: Suggestions;
  source: Source;
  enhances?: OracleCollectionID1;
  replaces?: OracleCollectionID2;
  sample_names?: Label[];
}
export interface OracleCollectionRendering {
  color?: CSSColor;
  table_style?: OracleCollectionStyle;
  columns: {
    [k: string]: OracleCollectionTableColumn;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface OracleCollectionTableColumn {
  label?: Label1;
  content_type: OracleTableColumnContentKey;
  color?: CSSColor1;
  table_key: DictKey;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface OracleTable {
  id: OracleTableID;
  name: Label;
  canonical_name?: Label;
  icon?: SVGImageURL;
  dice: DiceNotation;
  rendering?: OracleTableRendering;
  summary?: MarkdownString1;
  description?: MarkdownString2;
  match?: MatchBehavior;
  suggestions?: Suggestions;
  table: OracleTableRow[];
  source: Source;
  replaces?: OracleTableID2;
}
export interface OracleTableRendering {
  table_style?: OracleTableStyle;
  columns: {
    [k: string]: OracleTableColumn;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface OracleTableColumn {
  label?: Label2;
  content_type: OracleTableColumnContentKey1;
  color?: CSSColor2;
}
export interface MatchBehavior {
  text: MarkdownString;
}
export interface Suggestions {
  oracles?: OracleTableID[];
  assets?: AssetID[];
  atlas?: AtlasEntryID[];
  moves?: MoveID[];
  npcs?: NpcID[];
  site_domains?: DelveSiteDomainID[];
  site_themes?: DelveSiteThemeID[];
}
export interface OracleTableRow {
  id: OracleTableRowID;
  /**
   * Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  min: number | null;
  /**
   * High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  max: number | null;
  icon?: SVGImageURL;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableID;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.
 *
 *   These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.
 */
export interface OracleRollTemplate {
  result?: TemplateString;
  summary?: TemplateString1;
  description?: TemplateString2;
}
export interface OracleTableRoll {
  /**
   * The rulebook explicitly cautions *against* rolling all details at once, so rolling every referenced oracle automatically is not recommended. That said, some oracle results only provide useful information once a secondary roll occurs, such as "Action + Theme". If this value is omitted, assume it's false.
   */
  auto?: boolean;
  method?: OracleTableRollMethod;
  oracle?: OracleTableID1;
  times: number;
}
export interface I18NHints {
  result?: I18NHint;
  summary?: I18NHint;
  description?: I18NHint;
  template?: {
    result?: I18NHint;
    summary?: I18NHint;
    description?: I18NHint;
  };
}
export interface I18NHint {
  part_of_speech?: PartOfSpeech;
}
/**
 * Metadata describing the original source of this item
 */
export interface Source {
  /**
   * The title of the source document.
   */
  title: string;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  page?: PageNumber;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional email contact for the author
       */
      email?: string;
    },
    ...{
      name: string;
      /**
       * An optional email contact for the author
       */
      email?: string;
    }[]
  ];
  /**
   * An absolute URL pointing to the location where this element's license can be found.
   *
   * A `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Datasworn's build process skips unlicensed content by default.
   */
  license: string | null;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface AssetType {
  id: AssetTypeID;
  name: Label;
  canonical_name?: Label;
  color?: CSSColor;
  summary?: MarkdownString;
  description?: MarkdownString;
  contents?: {
    [k: string]: Asset;
  };
  suggestions?: Suggestions;
  source: Source;
  enhances?: AssetTypeID1;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface Asset {
  id: AssetID;
  name: Label;
  asset_type: Label3;
  color?: CSSColor;
  icon?: SVGImageURL;
  /**
   * Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the "name" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.
   */
  options?: {
    [k: string]: AssetOptionField;
  };
  /**
   * If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).
   */
  count_as_impact: boolean;
  /**
   * Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.
   */
  shared: boolean;
  attachments?: AssetAttachment;
  requirement?: MarkdownString;
  abilities: AssetAbility[];
  /**
   * Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.
   */
  controls?: {
    [k: string]: AssetControlField;
  };
  suggestions?: Suggestions;
  source: Source;
}
/**
 * Select a standard player stat.
 */
export interface SelectFieldPlayerStat {
  id: string;
  label: Label;
  field_type: "select_stat";
  value?: PlayerStat;
  choices: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z][a-z_]*$".
     */
    [k: string]: {
      label: Label;
      value: PlayerStat;
      selected?: boolean;
    };
  };
}
export interface TextField {
  id: string;
  label: Label;
  field_type: "text";
  value?: string;
}
/**
 * Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.
 */
export interface AssetAttachment {
  /**
   * Omit if there's no upper limit to the number of attached assets.
   */
  max?: number;
  /**
   * Asset IDs (which may be wildcards) that may be attached to this asset
   */
  assets: AssetIDWildcard[];
}
/**
 * Abilities provided by this asset. Most assets have 3.
 */
export interface AssetAbility {
  id: AssetAbilityID;
  name?: Label;
  enabled: boolean;
  options?: {
    [k: string]: AssetAbilityOptionField;
  };
  text: MarkdownString;
  controls?: {
    [k: string]: AssetAbilityControlField;
  };
  enhance_asset?: AssetEnhancement;
  /**
   * Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.
   */
  enhance_moves?: MoveEnhancement[];
  /**
   * Unique moves added by this asset ability.
   */
  moves?: {
    [k: string]: Move;
  };
}
export interface ClockField {
  id: string;
  label: Label;
  field_type: "clock";
  min: 0;
  max: 4 | 6 | 8 | 10;
  value: number;
}
export interface CounterField {
  id: string;
  label: Label;
  field_type: "counter";
  min: 0;
  max?: number;
  value: number;
}
/**
 * This input represents a checkbox field. It is considered checked when its value is set to `true`.
 */
export interface AssetCheckboxField {
  id: string;
  label: Label;
  field_type: "checkbox";
  /**
   * Is the box checked?
   */
  value?: boolean;
  /**
   * Does this field disable the asset when its value is set to `true`?
   */
  disables_asset: boolean;
  /**
   * Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?
   */
  is_impact: boolean;
}
/**
 * Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.
 */
export interface AssetEnhancement {
  /**
   * If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).
   */
  count_as_impact?: boolean;
  /**
   * Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.
   */
  shared?: boolean;
  attachments?: AssetAttachment;
  controls?: {
    [k: string]: AssetConditionMeterEnhancement;
  };
  suggestions?: Suggestions;
}
/**
 * Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are "out of action".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface AssetConditionMeterEnhancement {
  max?: number;
}
export interface MoveActionRollEnhancement {
  /**
   * A move that makes an action roll.
   */
  roll_type: "action_roll";
  trigger?: {
    conditions?: TriggerActionRollConditionEnhancement[];
  };
  enhances?: MoveIDWithWildcard[];
}
export interface TriggerActionRollConditionEnhancement {
  text?: MarkdownString3;
  by?: TriggerBy;
  /**
   * A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.
   */
  method: null | ActionRollMethod;
  roll_options: null | ActionRollOption[];
}
/**
 * Information on who can trigger this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.
 */
export interface TriggerBy {
  ally: boolean;
  player: boolean;
}
export interface RollOptionStat {
  /**
   * Roll using a standard player character stat.
   */
  using: "stat";
  stat: PlayerStat;
}
export interface RollOptionConditionMeter {
  /**
   * Roll using the value of a standard player condition meter.
   */
  using: "condition_meter";
  condition_meter: PlayerConditionMeter;
}
export interface RollOptionAssetControl {
  /**
   * Roll using the value of an asset control.
   */
  using: "asset_control";
  /**
   * Asset IDs (which may be wildcarded) that provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.
   */
  assets: AssetIDWildcard[] | null;
  control: DictKey1;
}
export interface RollOptionAssetOption {
  /**
   * Roll using the value of an asset option.
   */
  using: "asset_option";
  /**
   * Asset IDs (which may be wildcarded) that provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.
   */
  assets: AssetIDWildcard[] | null;
  option: DictKey2;
}
export interface RollOptionAttachedAssetControl {
  /**
   * Roll using the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.
   */
  using: "attached_asset_control";
  control: DictKey3;
}
export interface RollOptionAttachedAssetOption {
  /**
   * Roll using the value of an attached asset option.
   */
  using: "attached_asset_option";
  option: DictKey4;
}
export interface RollOptionCustom {
  label: Label;
  value: number;
  /**
   * Roll using an integer value with customizable labels.
   */
  using: "custom";
}
export interface MoveNoRollEnhancement {
  /**
   * A move that makes no action rolls or progress rolls.
   */
  roll_type: "no_roll";
  trigger?: {
    conditions?: TriggerNoRollCondition[];
  };
  enhances?: MoveIDWithWildcard[];
}
export interface TriggerNoRollCondition {
  text?: MarkdownString4;
  by?: TriggerBy;
  method: null;
  roll_options: null;
}
export interface MoveProgressRollEnhancement {
  /**
   * A progress move that rolls on a standard progress track type (defined by this move).
   */
  roll_type: "progress_roll";
  trigger?: {
    conditions?: TriggerProgressRollConditionEnhancement[];
  };
  enhances?: MoveIDWithWildcard[];
}
export interface TriggerProgressRollConditionEnhancement {
  text?: MarkdownString5;
  by?: TriggerBy;
  /**
   * A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.
   */
  method: null | ProgressRollMethod;
  roll_options: null | ProgressRollOption[];
}
export interface ProgressRollOption {
  using: "progress_track";
}
export interface MoveSpecialTrackEnhancement {
  /**
   * A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
   */
  roll_type: "special_track";
  trigger?: {
    conditions?: TriggerSpecialTrackConditionEnhancement[];
  };
  enhances?: MoveIDWithWildcard[];
}
/**
 * A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged).
 */
export interface TriggerSpecialTrackConditionEnhancement {
  text?: MarkdownString6;
  by?: TriggerBy;
  /**
   * A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.
   */
  method: null | SpecialTrackRollMethod;
  roll_options: null | TriggerSpecialTrackConditionOption[];
}
export interface TriggerSpecialTrackConditionOption {
  using: SpecialTrackType;
}
/**
 * A move that makes an action roll.
 */
export interface MoveActionRoll {
  id: MoveID;
  name: Label;
  canonical_name?: Label;
  /**
   * A move that makes an action roll.
   */
  roll_type: "action_roll";
  trigger: TriggerActionRoll;
  text: MarkdownString9;
  outcomes: MoveOutcomes;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableID[];
  suggestions?: Suggestions;
  source: Source;
  replaces?: MoveID1;
}
export interface TriggerActionRoll {
  text: MarkdownString7;
  conditions: TriggerActionRollCondition[];
}
export interface TriggerActionRollCondition {
  text?: MarkdownString8;
  by?: TriggerBy;
  method: ActionRollMethod;
  /**
   * The options available when rolling with this trigger.
   */
  roll_options: ActionRollOption[];
}
/**
 * A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.
 *
 *   This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.
 */
export interface MoveOutcomes {
  strong_hit: MoveOutcome;
  weak_hit: MoveOutcome;
  miss: MoveOutcome;
}
export interface MoveOutcome {
  text: MarkdownString10;
}
export interface MoveNoRoll {
  id: MoveID;
  name: Label;
  canonical_name?: Label;
  /**
   * A move that makes no action rolls or progress rolls.
   */
  roll_type: "no_roll";
  trigger: TriggerNoRoll;
  text: MarkdownString12;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableID[];
  suggestions?: Suggestions;
  source: Source;
  replaces?: MoveID2;
}
export interface TriggerNoRoll {
  text: MarkdownString11;
  conditions?: TriggerNoRollCondition[];
}
/**
 * A progress move that rolls on a standard progress track type (defined by the move object).
 */
export interface ProgressMove {
  id: MoveID;
  name: Label;
  canonical_name?: Label;
  /**
   * A progress move that rolls on a standard progress track type (defined by this move).
   */
  roll_type: "progress_roll";
  track_label: Label4;
  trigger: TriggerProgressRoll;
  text: MarkdownString15;
  outcomes: MoveOutcomes;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableID[];
  suggestions?: Suggestions;
  source: Source;
  replaces?: MoveID3;
}
export interface TriggerProgressRoll {
  text: MarkdownString13;
  conditions: TriggerProgressRollCondition[];
}
export interface TriggerProgressRollCondition {
  text?: MarkdownString14;
  by?: TriggerBy;
  method: ProgressRollMethod1;
  /**
   * The options available when rolling with this trigger.
   */
  roll_options: ProgressRollOption[];
}
export interface ProgressMoveSpecialTrackRoll {
  id: MoveID;
  name: Label;
  canonical_name?: Label;
  /**
   * A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
   */
  roll_type: "special_track";
  trigger: TriggerSpecialTrack;
  text: MarkdownString18;
  outcomes: MoveOutcomes;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableID[];
  suggestions?: Suggestions;
  source: Source;
  replaces?: MoveID4;
}
export interface TriggerSpecialTrack {
  text: MarkdownString16;
  conditions: TriggerSpecialTrackCondition[];
}
export interface TriggerSpecialTrackCondition {
  text?: MarkdownString17;
  by?: TriggerBy;
  method: SpecialTrackRollMethod;
  /**
   * The options available when rolling with this trigger.
   */
  roll_options: TriggerSpecialTrackConditionOption[];
}
/**
 * Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are "out of action".
 */
export interface AssetConditionMeter {
  id: AssetControlFieldID;
  label: Label;
  field_type: "condition_meter";
  min: number;
  max: number;
  value?: number;
  controls?: {
    [k: string]: AssetConditionMeterControlField;
  };
  /**
   * Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.
   */
  moves?: {
    /**
     * The ID(s) of recovery moves associated with this meter.
     */
    recover?: MoveIDWithWildcard1[];
    /**
     * The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option.
     */
    suffer?: MoveIDWithWildcard2[];
  };
}
/**
 * This type of input isn't a *field* in the traditional sense. When its value is set to `true` it means that the card is flipped over. For example, Starforged's module assets use this to represent a 'broken' state.
 *
 *     Otherwise, it behaves similarly to a CheckboxField.
 *
 */
export interface AssetCardFlipField {
  id: string;
  label: Label;
  field_type: "card_flip";
  /**
   * Is the card flipped over?
   */
  value?: boolean;
  /**
   * Does this field disable the asset when its value is set to `true`?
   */
  disables_asset: boolean;
  /**
   * Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?
   */
  is_impact: boolean;
}
/**
 * Select from a set of AssetEnhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles).
 */
export interface SelectFieldAssetEnhancement {
  id: string;
  label: Label;
  field_type: "select_enhancement";
  value?: AssetEnhancement;
  choices: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z][a-z_]*$".
     */
    [k: string]: {
      label: Label;
      value: AssetEnhancement;
      selected?: boolean;
    };
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface Atlas {
  id: AtlasID;
  name: Label;
  canonical_name?: Label;
  color?: CSSColor;
  summary?: MarkdownString;
  description?: MarkdownString;
  contents?: {
    [k: string]: AtlasEntry;
  };
  collections?: {
    [k: string]: Atlas;
  };
  suggestions?: Suggestions;
  source: Source;
  enhances?: AtlasID1;
}
/**
 * An atlas entry, like the Ironlands region entries found in classic Ironsworn.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface AtlasEntry {
  id: AtlasEntryID;
  name: Label;
  canonical_name?: Label;
  summary?: MarkdownString;
  features: MarkdownString[];
  description: MarkdownString;
  quest_starter: MarkdownString;
  your_truth?: MarkdownString;
  suggestions?: Suggestions;
  source: Source;
}
/**
 * A delve site with a theme, domain, and denizen table.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface DelveSite {
  id: DelveSiteID;
  name: Label;
  canonical_name?: Label;
  icon?: SVGImageURL;
  rank: ChallengeRank;
  description: MarkdownString;
  suggestions?: Suggestions;
  source: Source;
  denizens: DelveSiteDenizen[] &
    [
      {
        min: 1;
        max: 27;
        frequency: "very_common";
      },
      {
        min: 28;
        max: 41;
        frequency: "common";
      },
      {
        min: 42;
        max: 55;
        frequency: "common";
      },
      {
        min: 56;
        max: 69;
        frequency: "common";
      },
      {
        min: 70;
        max: 75;
        frequency: "uncommon";
      },
      {
        min: 76;
        max: 81;
        frequency: "uncommon";
      },
      {
        min: 82;
        max: 87;
        frequency: "uncommon";
      },
      {
        min: 88;
        max: 93;
        frequency: "uncommon";
      },
      {
        min: 94;
        max: 95;
        frequency: "rare";
      },
      {
        min: 96;
        max: 97;
        frequency: "rare";
      },
      {
        min: 98;
        max: 99;
        frequency: "rare";
      },
      {
        min: 100;
        max: 100;
        frequency: "unforeseen";
      }
    ];
  domain: DelveSiteDomainID;
  /**
   * An additional theme or domain card, for use with optional rules in Ironsworn: Delve.
   */
  extra_card?: DelveSiteThemeID | DelveSiteDomainID;
  region?: AtlasEntryID1;
  theme: DelveSiteThemeID;
}
export interface DelveSiteDenizen {
  id: DelveSiteDenizenID;
  name?: Label;
  min: number;
  max: number;
  frequency: DelveSiteDenizenFrequency;
  npc?: NpcID1;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface MoveCategory {
  id: MoveCategoryID;
  name: Label;
  canonical_name?: Label;
  color?: CSSColor;
  summary?: MarkdownString;
  description?: MarkdownString;
  contents?: {
    [k: string]: Move;
  };
  suggestions?: Suggestions;
  source: Source;
  enhances?: MoveCategoryID1;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface NpcCollection {
  id: NpcCollectionID;
  name: Label;
  canonical_name?: Label;
  color?: CSSColor;
  summary?: MarkdownString;
  description?: MarkdownString;
  contents?: {
    [k: string]: Npc;
  };
  suggestions?: Suggestions;
  source: Source;
  enhances?: NpcCollectionID1;
}
/**
 * A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface Npc {
  id: NpcID;
  name: Label;
  canonical_name?: Label;
  nature: NpcNature;
  rank: ChallengeRank;
  summary?: MarkdownString;
  features: MarkdownString[];
  drives: MarkdownString[];
  tactics: MarkdownString[];
  variants?: {
    [k: string]: NpcVariant;
  };
  description: MarkdownString;
  quest_starter: MarkdownString;
  your_truth?: MarkdownString;
  suggestions?: Suggestions;
  source: Source;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface NpcVariant {
  id: NpcVariantID;
  name: Label;
  nature: NpcNature;
  rank: ChallengeRank;
  summary?: MarkdownString;
  description: MarkdownString;
}
/**
 * A rarity, as described in Ironsworn: Delve.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface Rarity {
  id: RarityID;
  name: Label;
  canonical_name?: Label;
  icon?: SVGImageURL;
  description: MarkdownString;
  suggestions?: Suggestions;
  source: Source;
  asset: AssetID1;
  /**
   * From Ironsworn: Delve, p. 174:
   *
   *       Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.
   *
   *       If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.
   */
  xp_cost: number;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface DelveSiteDomain {
  id: DelveSiteDomainID;
  name: Label;
  canonical_name?: Label;
  card_type: "domain";
  icon?: SVGImageURL;
  summary: MarkdownString;
  features: DelveSiteDomainFeatureRow[] &
    [
      {
        min: 21;
        max: 43;
      },
      {
        min: 44;
        max: 56;
      },
      {
        min: 57;
        max: 64;
      },
      {
        min: 65;
        max: 68;
      },
      {
        min: 69;
        max: 72;
      },
      {
        min: 73;
        max: 76;
      },
      {
        min: 77;
        max: 80;
      },
      {
        min: 81;
        max: 84;
      },
      {
        min: 85;
        max: 88;
      },
      {
        min: 89;
        max: 98;
        result: string;
        suggestions: {
          [k: string]: unknown;
        };
      },
      {
        min: 99;
        max: 99;
        result: string;
        suggestions: {
          [k: string]: unknown;
        };
      },
      {
        min: 100;
        max: 100;
        result: string;
        suggestions: {
          [k: string]: unknown;
        };
      }
    ];
  dangers: DelveSiteDomainDangerRow[] &
    [
      {
        min: 31;
        max: 33;
      },
      {
        min: 34;
        max: 36;
      },
      {
        min: 37;
        max: 39;
      },
      {
        min: 40;
        max: 42;
      },
      {
        min: 43;
        max: 45;
      }
    ];
  description?: MarkdownString;
  suggestions?: Suggestions;
  source: Source;
  name_oracle?: OracleTableID3;
}
export interface DelveSiteDomainFeatureRow {
  id: DomainFeatureRowID;
  min: number;
  max: number;
  icon?: SVGImageURL;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableID;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
export interface DelveSiteDomainDangerRow {
  id: DomainDangerRowID;
  min: number;
  max: number;
  icon?: SVGImageURL;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableID;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface DelveSiteTheme {
  id: DelveSiteThemeID;
  name: Label;
  canonical_name?: Label;
  card_type: "theme";
  icon?: SVGImageURL;
  summary: MarkdownString;
  features: DelveSiteThemeFeatureRow[] &
    [
      {
        min: 1;
        max: 4;
      },
      {
        min: 5;
        max: 8;
      },
      {
        min: 9;
        max: 12;
      },
      {
        min: 13;
        max: 16;
      },
      {
        min: 17;
        max: 20;
      }
    ];
  dangers: DelveSiteThemeDangerRow[] &
    [
      {
        min: 1;
        max: 5;
      },
      {
        min: 6;
        max: 10;
      },
      {
        min: 11;
        max: 12;
      },
      {
        min: 13;
        max: 14;
      },
      {
        min: 15;
        max: 16;
      },
      {
        min: 17;
        max: 18;
      },
      {
        min: 19;
        max: 20;
      },
      {
        min: 21;
        max: 22;
      },
      {
        min: 23;
        max: 24;
      },
      {
        min: 25;
        max: 26;
      },
      {
        min: 27;
        max: 28;
      },
      {
        min: 29;
        max: 30;
      }
    ];
  description?: MarkdownString;
  suggestions?: Suggestions;
  source: Source;
}
export interface DelveSiteThemeFeatureRow {
  id: ThemeFeatureRowID;
  min: number;
  max: number;
  icon?: SVGImageURL;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableID;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
export interface DelveSiteThemeDangerRow {
  id: ThemeDangerRowID;
  min: number;
  max: number;
  icon?: SVGImageURL;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableID;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * A setting truth category.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*$".
 */
export interface Truth {
  id: TruthID;
  name: Label;
  canonical_name?: Label;
  icon?: SVGImageURL;
  options: TruthOption[];
  suggestions?: Suggestions;
  source: Source;
}
export interface TruthOption {
  id: TruthOptionID;
  summary?: MarkdownString;
  description: MarkdownString;
  quest_starter: MarkdownString;
}
