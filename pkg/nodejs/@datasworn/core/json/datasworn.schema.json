{
	"$id": "https://ironswornrpg.com/datasworn.schema.json",
	"title": "Datasworn v2.0.0-dev",
	"type": "object",
	"description": "Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.",
	"required": ["id", "source"],
	"properties": {
		"id": {
			"$ref": "#/$defs/NamespaceID"
		},
		"source": {
			"$ref": "#/$defs/Source"
		},
		"oracles": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/OracleCollection"
				}
			}
		},
		"assets": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing asset types, which contain assets.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/AssetType"
				}
			}
		},
		"atlas": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing atlas collections, which contain atlas entries.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/Atlas"
				}
			}
		},
		"delve_sites": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/DelveSite"
				}
			}
		},
		"moves": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing move categories, which contain moves.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/MoveCategory"
				}
			}
		},
		"npcs": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing NPC collections, which contain NPCs.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/NpcCollection"
				}
			}
		},
		"rarities": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/Rarity"
				}
			}
		},
		"site_domains": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing delve site domains.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/DelveSiteDomain"
				}
			}
		},
		"site_themes": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object containing delve site themes.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/DelveSiteTheme"
				}
			}
		},
		"truths": {
			"type": "object",
			"$comment": "Deserialize as a dictionary object.",
			"description": "A dictionary object of truth categories.",
			"patternProperties": {
				"^[a-z][a-z_]*$": {
					"$ref": "#/$defs/Truth"
				}
			}
		}
	},
	"$defs": {
		"AssetAbilityControlFieldID": {
			"title": "AssetAbilityControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/[0-2]\\/controls\\/([a-z][a-z_]*)$"
		},
		"AssetAbilityID": {
			"title": "AssetAbilityID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/[0-2]$"
		},
		"AssetAbilityOptionFieldID": {
			"title": "AssetAbilityOptionFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/[0-2]\\/options\\/([a-z][a-z_]*)$"
		},
		"AssetConditionMeterControlFieldID": {
			"title": "AssetConditionMeterControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/condition_meter\\/controls\\/([a-z][a-z_]*)$"
		},
		"AssetConditionMeterID": {
			"title": "Asset condition meter ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/condition_meter$"
		},
		"AssetConditionMeterIDWildcard": {
			"title": "Asset condition meter ID (wildcard)",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)\\/condition_meter$"
		},
		"AssetControlFieldID": {
			"title": "AssetControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)$"
		},
		"AssetControlFieldIDWildcard": {
			"title": "AssetControlFieldIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)\\/controls(\\/([a-z][a-z_]*)|\\/\\*)$"
		},
		"AssetID": {
			"title": "AssetID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
		},
		"AssetIDWildcard": {
			"title": "AssetIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)$"
		},
		"AssetOptionFieldID": {
			"title": "AssetOptionFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/options\\/([a-z][a-z_]*)$"
		},
		"AssetOptionFieldIDWildcard": {
			"title": "AssetOptionFieldIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)\\/options(\\/([a-z][a-z_]*)|\\/\\*)$"
		},
		"AssetTypeID": {
			"title": "AssetTypeID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/assets\\/([a-z][a-z_]*)$"
		},
		"AtlasEntryID": {
			"title": "AtlasEntryID",
			"type": "string",
			"examples": ["classic/atlas/ironlands/hinterlands"],
			"pattern": "^[a-z0-9_]{3,}\\/atlas(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)$"
		},
		"AtlasEntryIDWildcard": {
			"title": "AtlasEntryIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/atlas((\\/([a-z][a-z_]*)){1,3}|\\/\\*\\*)(\\/([a-z][a-z_]*)|\\/\\*)$"
		},
		"AtlasID": {
			"title": "AtlasID",
			"type": "string",
			"examples": ["classic/collections/atlas/ironlands"],
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/atlas(\\/([a-z][a-z_]*)){1,3}$"
		},
		"AtlasIDWildcard": {
			"title": "AtlasIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/atlas((\\/([a-z][a-z_]*)){1,3}|\\/\\*\\*)(\\/([a-z][a-z_]*)|\\/\\*)$"
		},
		"DelveSiteDenizenID": {
			"title": "DelveSiteDenizenID",
			"type": "string",
			"examples": ["delve/delve_sites/alvas_rest/denizens/1-27"],
			"pattern": "^[a-z0-9_]{3,}\\/delve_sites\\/([a-z][a-z_]*)\\/denizens\\/([1-9][0-9]*)-([1-9][0-9]*)$"
		},
		"DelveSiteDomainID": {
			"title": "DelveSiteDomainID",
			"type": "string",
			"examples": ["delve/site_domains/shadowfen"],
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/([a-z][a-z_]*)$"
		},
		"DelveSiteID": {
			"title": "DelveSiteID",
			"type": "string",
			"examples": ["delve/delve_sites/alvas_rest"],
			"pattern": "^[a-z0-9_]{3,}\\/delve_sites\\/([a-z][a-z_]*)$"
		},
		"DelveSiteThemeID": {
			"title": "DelveSiteThemeID",
			"type": "string",
			"examples": ["delve/site_themes/hallowed"],
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/[a-z][a-z_]*$"
		},
		"DictKey": {
			"title": "DictKey",
			"type": "string",
			"pattern": "^[a-z][a-z_]*$"
		},
		"DomainDangerRowID": {
			"title": "DomainDangerRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/([a-z][a-z_]*)\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$"
		},
		"DomainFeatureRowID": {
			"title": "DomainFeatureRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/([a-z][a-z_]*)\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$"
		},
		"MoveCategoryID": {
			"title": "MoveCategoryID",
			"type": "string",
			"examples": ["starforged/collections/moves/adventure"],
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/moves\\/([a-z][a-z_]*)$"
		},
		"MoveID": {
			"title": "MoveID",
			"type": "string",
			"description": "A move ID, for a standard move or a unique asset move",
			"examples": [
				"classic/moves/combat/strike",
				"starforged/assets/module/grappler/abilities/0/moves/ready_grappler"
			],
			"pattern": "^[a-z0-9_]{3,}\\/(moves\\/[a-z][a-z_]*\\/[a-z][a-z_]*|assets\\/[a-z][a-z_]*\\/[a-z][a-z_]*\\/abilities\\/[0-2]\\/moves\\/[a-z][a-z_]*)$"
		},
		"MoveIDWildcard": {
			"title": "Move ID (with wildcard)",
			"type": "string",
			"description": "A move ID with wildcards",
			"examples": [
				"*/moves/*/face_danger",
				"*/assets/ritual/*/abilities/*/moves/*"
			],
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/(moves\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)|assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/abilities\\/([0-2]|\\*)\\/moves\\/([a-z_]+|\\*))$"
		},
		"NamespaceID": {
			"title": "NamespaceID",
			"type": "string",
			"examples": ["classic", "delve", "starforged", "sundered_isles"],
			"pattern": "^[a-z0-9_]{3,}$"
		},
		"NpcCollectionID": {
			"title": "NpcCollectionID",
			"type": "string",
			"examples": [
				"classic/collections/npcs/firstborn",
				"starforged/collections/npcs/sample_npcs"
			],
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/npcs\\/([a-z][a-z_]*)$"
		},
		"NpcID": {
			"title": "NpcID",
			"type": "string",
			"examples": [
				"classic/npcs/firstborn/elf",
				"starforged/npcs/sample_npcs/chiton"
			],
			"pattern": "^[a-z0-9_]{3,}\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
		},
		"NpcIDWildcard": {
			"title": "NpcIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/npcs(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)$"
		},
		"NpcVariantID": {
			"title": "NpcVariantID",
			"type": "string",
			"examples": [
				"starforged/npcs/sample_npcs/chiton/variants/chiton_drone_pack"
			],
			"pattern": "^[a-z0-9_]{3,}\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/variants\\/[a-z][a-z_]*$"
		},
		"OracleCollectionID": {
			"title": "OracleCollectionID",
			"type": "string",
			"examples": [
				"starforged/collections/oracles/core",
				"starforged/collections/oracles/character/names",
				"starforged/collections/oracles/planets/furnace/settlements"
			],
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/oracles(\\/([a-z][a-z_]*)){1,3}$"
		},
		"OracleTableID": {
			"title": "OracleTableID",
			"type": "string",
			"examples": [
				"starforged/oracles/core/action",
				"starforged/oracles/character/names/given",
				"starforged/oracles/planets/furnace/settlements/terminus"
			],
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)$"
		},
		"OracleTableIDWildcard": {
			"title": "OracleTableIDWildcard",
			"type": "string",
			"description": "Oracle table wildcards can also use '**' to represent any number of collection levels in the oracle tree. For example, 'starforged/oracles/**/location' represents any starforged table with the \"location\" key.",
			"examples": [
				"*/oracles/**/peril",
				"starforged/oracles/character/names/*",
				"starforged/oracles/planets/*/settlements/*"
			],
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/oracles((\\/([a-z][a-z_]*)){1,3}|\\/\\*\\*)(\\/([a-z][a-z_]*)|\\/\\*)$"
		},
		"OracleTableRowID": {
			"title": "OracleTableRowID",
			"type": "string",
			"description": "Normally, rows will end with two numbers separated by a dash, indicating their dice range.\n\nRows with a single number represent unrollable rows that are sometimes included for rendering purposes; in this case, the number represents the row's index.",
			"examples": [
				"classic/oracles/action_and_theme/action/1-1",
				"starforged/oracles/derelicts/zones/starship/0"
			],
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)([1-9][0-9]*-[1-9][0-9]*)|(0|[1-9][0-9]*)$"
		},
		"RarityID": {
			"title": "RarityID",
			"type": "string",
			"examples": ["classic/rarities/ayethins_journal"],
			"pattern": "^[a-z0-9_]{3,}\\/rarities\\/([a-z][a-z_]*)$"
		},
		"ThemeDangerRowID": {
			"title": "ThemeDangerRowID",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/[a-z][a-z_]*\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$"
		},
		"ThemeFeatureRowID": {
			"title": "ThemeFeatureRowID",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/[a-z][a-z_]*\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$"
		},
		"TruthID": {
			"title": "TruthID",
			"type": "string",
			"examples": ["classic/truths/iron", "starforged/truths/iron"],
			"pattern": "^[a-z0-9_]{3,}\\/truths\\/([a-z][a-z_]*)$"
		},
		"TruthOptionID": {
			"title": "TruthOptionID",
			"type": "string",
			"examples": ["classic/truths/iron/0", "starforged/truths/iron/0"],
			"pattern": "^[a-z0-9_]{3,}\\/truths\\/([a-z][a-z_]*)\\/(0|[1-9][0-9]*)$"
		},
		"CSSColor": {
			"title": "CSS Color",
			"type": "string",
			"description": "A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"
		},
		"SVGImageURL": {
			"title": "SVGImageURL",
			"type": "string",
			"description": "A relative URL pointing to a vector image in the SVG format.",
			"format": "uri-reference"
		},
		"Source": {
			"title": "Source",
			"type": "object",
			"description": "Metadata describing the original source of this item",
			"required": ["title", "date", "authors", "license", "url"],
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"date": {
					"type": "string",
					"$comment": "You may prefer to deserialize this as a Date object.",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"format": "date"
				},
				"page": {
					"title": "Page number",
					"type": "integer",
					"minimum": 1
				},
				"authors": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["name"],
						"properties": {
							"name": {
								"type": "string",
								"examples": ["Shawn Tomkin"]
							},
							"email": {
								"type": "string",
								"description": "An optional email contact for the author",
								"format": "email"
							}
						},
						"examples": [
							{
								"name": "Shawn Tomkin"
							}
						]
					},
					"minItems": 1
				},
				"license": {
					"description": "An absolute URL pointing to the location where this element's license can be found.\n\nA `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Datasworn's build process skips unlicensed content by default.",
					"anyOf": [
						{
							"type": "string",
							"format": "uri"
						},
						{
							"type": "null"
						}
					],
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					]
				},
				"url": {
					"type": "string",
					"description": "An absolute URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"],
					"format": "uri"
				}
			}
		},
		"Suggestions": {
			"title": "Suggestions",
			"type": "object",
			"properties": {
				"oracles": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableID"
					}
				},
				"assets": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/AssetID"
					}
				},
				"atlas": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/AtlasEntryID"
					}
				},
				"moves": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MoveID"
					}
				},
				"npcs": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/NpcID"
					}
				},
				"site_domains": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/DelveSiteDomainID"
					}
				},
				"site_themes": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/DelveSiteThemeID"
					}
				}
			}
		},
		"WEBPImageURL": {
			"title": "WEBPImageURL",
			"type": "string",
			"description": "A relative URL pointing to a raster image in the WEBP format.",
			"format": "uri-reference"
		},
		"I18nHint": {
			"title": "I18nHint",
			"type": "object",
			"properties": {
				"part_of_speech": {
					"$ref": "#/$defs/PartOfSpeech"
				}
			}
		},
		"I18nHints": {
			"title": "I18nHints",
			"type": "object",
			"properties": {
				"result": {
					"$ref": "#/$defs/I18nHint"
				},
				"summary": {
					"$ref": "#/$defs/I18nHint"
				},
				"description": {
					"$ref": "#/$defs/I18nHint"
				},
				"template": {
					"type": "object",
					"properties": {
						"result": {
							"$ref": "#/$defs/I18nHint"
						},
						"summary": {
							"$ref": "#/$defs/I18nHint"
						},
						"description": {
							"$ref": "#/$defs/I18nHint"
						}
					}
				}
			}
		},
		"Label": {
			"title": "Label",
			"type": "string",
			"description": "A localized plain text name or label.",
			"i18n": true
		},
		"MarkdownString": {
			"title": "MarkdownString",
			"type": "string",
			"description": "Localized text, formatted in Markdown.\n\nIt uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.",
			"format": "markdown",
			"i18n": true
		},
		"PartOfSpeech": {
			"title": "PartOfSpeech",
			"description": "  * `common_noun`: A common noun.\n  * `proper_noun`: A proper noun.\n  * `adjunct_common_noun`: A common noun used as an adjective, to modify another noun.\n  * `adjunct_proper_noun`: A proper noun used as an adjective, to modify another noun.\n  * `verb`: A verb in present tense\n  * `gerund`: Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\"\n  * `adjective`: An adjective.\n  * `attributive_verb`: A verb used as an adjective, to modify a noun.",
			"enum": [
				"common_noun",
				"proper_noun",
				"adjunct_common_noun",
				"adjunct_proper_noun",
				"verb",
				"gerund",
				"adjective",
				"attributive_verb"
			]
		},
		"TemplateString": {
			"title": "TemplateString",
			"type": "string",
			"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `result` key, for example `{{result:starforged/oracles/core/action}}`\n",
			"format": "markdown",
			"i18n": true,
			"releaseStage": "experimental"
		},
		"ChallengeRank": {
			"title": "ChallengeRank",
			"description": "Challenge rank, represented as an integer:\n\n  * `1`: Troublesome\n  * `2`: Dangerous\n  * `3`: Formidable\n  * `4`: Extreme\n  * `5`: Epic",
			"enum": [1, 2, 3, 4, 5]
		},
		"SpecialTrackType": {
			"title": "SpecialTrackType",
			"type": "string",
			"description": "Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.\n'Canonical' examples:\n  * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\n",
			"examples": [
				"bonds_track",
				"failure_track",
				"quests_legacy",
				"bonds_legacy",
				"discoveries_legacy"
			],
			"pattern": "^[a-z][a-z_]*$"
		},
		"Npc": {
			"title": "Npc",
			"type": "object",
			"description": "A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged.",
			"required": [
				"id",
				"name",
				"nature",
				"rank",
				"features",
				"drives",
				"tactics",
				"description",
				"quest_starter",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/NpcID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"nature": {
					"$ref": "#/$defs/NpcNature"
				},
				"rank": {
					"$ref": "#/$defs/ChallengeRank"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownString"
					}
				},
				"drives": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownString"
					}
				},
				"tactics": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownString"
					}
				},
				"variants": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/NpcVariant"
						}
					}
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/$defs/MarkdownString"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"your_truth": {
					"$ref": "#/$defs/MarkdownString"
				}
			},
			"isSourcedNode": true
		},
		"NpcCollection": {
			"title": "NpcCollection",
			"type": "object",
			"required": ["id", "name", "source"],
			"properties": {
				"id": {
					"$ref": "#/$defs/NpcCollectionID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"color": {
					"$ref": "#/$defs/CSSColor"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/Npc"
						}
					}
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"enhances": {
					"$ref": "#/$defs/NpcCollectionID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				}
			},
			"isSourcedNode": true
		},
		"NpcNature": {
			"$ref": "#/$defs/Label",
			"description": "A localized category label describing the nature of this NPC.\n\nIn Ironsworn classic, this is probably the singular form of the parent collection's name.\n\nFor Starforged, see the table on p. 258 for examples.",
			"examples": [
				"Ironlander",
				"Firstborn",
				"Animal",
				"Beast",
				"Horror",
				"Anomaly",
				"Creature",
				"Human",
				"Machine",
				"Monster",
				"Vehicle"
			]
		},
		"NpcVariant": {
			"title": "NpcVariant",
			"type": "object",
			"required": ["id", "name", "nature", "rank", "description"],
			"properties": {
				"id": {
					"$ref": "#/$defs/NpcVariantID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"nature": {
					"$ref": "#/$defs/NpcNature"
				},
				"rank": {
					"$ref": "#/$defs/ChallengeRank"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				}
			}
		},
		"DiceNotation": {
			"title": "DiceNotation",
			"type": "string",
			"examples": ["1d100", "1d6+2"],
			"format": "dice_notation",
			"pattern": "([1-9][0-9]*)d(0|[1-9][0-9]*)([+-]([1-9][0-9]*))?"
		},
		"OracleCollection": {
			"title": "OracleCollection",
			"type": "object",
			"required": ["id", "name", "source"],
			"properties": {
				"id": {
					"$ref": "#/$defs/OracleCollectionID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"color": {
					"$ref": "#/$defs/CSSColor"
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/WEBPImageURL"
					}
				},
				"rendering": {
					"$ref": "#/$defs/OracleCollectionRendering"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/OracleTable"
						}
					}
				},
				"collections": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/OracleCollection"
						}
					}
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"enhances": {
					"$ref": "#/$defs/OracleCollectionID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				},
				"replaces": {
					"$ref": "#/$defs/OracleCollectionID",
					"description": "Indicates that this collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
				},
				"sample_names": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/Label"
					}
				}
			}
		},
		"OracleCollectionRendering": {
			"title": "OracleCollectionRendering",
			"type": "object",
			"required": ["columns"],
			"properties": {
				"color": {
					"$ref": "#/$defs/CSSColor"
				},
				"table_style": {
					"$ref": "#/$defs/OracleCollectionStyle"
				},
				"columns": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/OracleCollectionTableColumn"
						}
					}
				}
			}
		},
		"OracleCollectionStyle": {
			"title": "OracleCollectionStyle",
			"enum": ["multi_table"]
		},
		"OracleCollectionTableColumn": {
			"title": "OracleCollectionTableColumn",
			"type": "object",
			"required": ["content_type", "table_key"],
			"properties": {
				"label": {
					"$ref": "#/$defs/Label",
					"description": "The table column's header text."
				},
				"content_type": {
					"title": "OracleTableColumnContentKey",
					"description": "The value(s) from each OracleTableRow that is rendered in this column.\n\n  * `roll`: Column displays the roll range (`min` and `max`) of each row.\n  * `result`: Column displays the row's `result` key.\n  * `summary`: Column displays the row's `summary` key.\n  * `description`: Column displays the row's `description` key.",
					"enum": ["roll", "result", "summary", "description"]
				},
				"color": {
					"$ref": "#/$defs/CSSColor",
					"description": "The thematic color for this column."
				},
				"table_key": {
					"$ref": "#/$defs/DictKey",
					"description": "The key of the OracleTable (within this collection), whose data is used to render this column."
				}
			}
		},
		"OracleRollTemplate": {
			"title": "OracleRollTemplate",
			"type": "object",
			"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.",
			"properties": {
				"result": {
					"$ref": "#/$defs/TemplateString",
					"description": "A string template that may be used in place of OracleTableRow#result.",
					"examples": [
						"{{result:starforged/oracles/factions/affiliation}} of the {{result:starforged/oracles/factions/legacy}} {{result:starforged/oracles/factions/identity}}"
					]
				},
				"summary": {
					"$ref": "#/$defs/TemplateString",
					"description": "A string template that may be used in place of OracleTableRow#summary."
				},
				"description": {
					"$ref": "#/$defs/TemplateString",
					"description": "A string template that may be used in place of OracleTableRow#description."
				}
			}
		},
		"OracleTable": {
			"title": "Oracle table",
			"type": "object",
			"required": ["id", "name", "dice", "source", "table"],
			"properties": {
				"id": {
					"$ref": "#/$defs/OracleTableID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"dice": {
					"$ref": "#/$defs/DiceNotation",
					"default": "1d100"
				},
				"rendering": {
					"$ref": "#/$defs/OracleTableRendering"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A brief summary of the oracle table's intended usage, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A longer description of the oracle table's intended usage, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"match": {
					"$ref": "#/$defs/OracleTableMatchBehavior"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"table": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRow"
					}
				},
				"replaces": {
					"$ref": "#/$defs/OracleTableID",
					"description": "Indicates that this table replaces the identified table. References to the replaced table can be considered equivalent to this table."
				}
			},
			"isSourcedNode": true
		},
		"OracleTableColumn": {
			"title": "OracleTableColumn",
			"type": "object",
			"required": ["content_type"],
			"properties": {
				"label": {
					"$ref": "#/$defs/Label",
					"description": "The table column's header text."
				},
				"content_type": {
					"title": "OracleTableColumnContentKey",
					"description": "The value(s) from each OracleTableRow that is rendered in this column.\n\n  * `roll`: Column displays the roll range (`min` and `max`) of each row.\n  * `result`: Column displays the row's `result` key.\n  * `summary`: Column displays the row's `summary` key.\n  * `description`: Column displays the row's `description` key.",
					"enum": ["roll", "result", "summary", "description"]
				},
				"color": {
					"$ref": "#/$defs/CSSColor",
					"description": "The thematic color for this column."
				}
			},
			"examples": [
				{
					"label": "Roll",
					"content_type": "roll"
				},
				{
					"label": "Result",
					"content_type": "result"
				},
				{
					"label": "Summary",
					"content_type": "summary"
				}
			]
		},
		"OracleTableColumnContentKey": {
			"title": "OracleTableColumnContentKey",
			"description": "The value(s) from each OracleTableRow that is rendered in this column.\n\n  * `roll`: Column displays the roll range (`min` and `max`) of each row.\n  * `result`: Column displays the row's `result` key.\n  * `summary`: Column displays the row's `summary` key.\n  * `description`: Column displays the row's `description` key.",
			"enum": ["roll", "result", "summary", "description"]
		},
		"OracleTableMatchBehavior": {
			"title": "Match behavior",
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString"
				}
			}
		},
		"OracleTableRendering": {
			"title": "OracleTableRendering",
			"type": "object",
			"required": ["columns"],
			"properties": {
				"table_style": {
					"$ref": "#/$defs/OracleTableStyle"
				},
				"columns": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"default": {
						"roll": {
							"label": "Roll",
							"content_type": "roll"
						},
						"result": {
							"label": "Result",
							"content_type": "result"
						}
					},
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/OracleTableColumn"
						}
					}
				}
			}
		},
		"OracleTableRoll": {
			"title": "OracleTableRoll",
			"type": "object",
			"required": ["times"],
			"properties": {
				"auto": {
					"type": "boolean",
					"description": "The rulebook explicitly cautions *against* rolling all details at once, so rolling every referenced oracle automatically is not recommended. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\". If this value is omitted, assume it's false.",
					"default": false
				},
				"method": {
					"$ref": "#/$defs/OracleTableRollMethod"
				},
				"oracle": {
					"$ref": "#/$defs/OracleTableID",
					"description": "The ID of the oracle table to be rolled. If omitted, it defaults to the ID of this oracle table."
				},
				"times": {
					"type": "integer",
					"default": 1,
					"minimum": 1
				}
			}
		},
		"OracleTableRollMethod": {
			"title": "OracleTableRollMethod",
			"description": "Special roll instructions to use when rolling multiple times on a single oracle table.\n\n  * `no_duplicates`: Duplicates should be re-rolled.\n  * `keep_duplicates`: Duplicates should be kept.\n  * `make_it_worse`: Duplicates should be kept, and they compound to make things worse.",
			"default": "no_duplicates",
			"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"]
		},
		"OracleTableRow": {
			"title": "OracleTableRow",
			"type": "object",
			"required": ["id", "min", "max", "result"],
			"properties": {
				"id": {
					"$ref": "#/$defs/OracleTableRowID"
				},
				"min": {
					"type": ["integer", "null"],
					"description": "Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.",
					"default": null
				},
				"max": {
					"type": ["integer", "null"],
					"description": "High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.",
					"default": null
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"result": {
					"$ref": "#/$defs/MarkdownString"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"template": {
					"$ref": "#/$defs/OracleRollTemplate"
				},
				"rolls": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRoll"
					}
				},
				"embed_table": {
					"$ref": "#/$defs/OracleTableID"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"i18n": {
					"$ref": "#/$defs/I18nHints"
				}
			}
		},
		"OracleTableStyle": {
			"title": "OracleTableStyle",
			"description": "  * `standalone_table`: Render as a standalone table.\n  * `embed_in_row`: Render as a table, within a row in another table.\n  * `embed_as_column`: Render as a single column of a table.",
			"enum": ["standalone_table", "embed_in_row", "embed_as_column"]
		},
		"ActionRollMethod": {
			"title": "ActionRollMethod",
			"description": "  * `miss`: An automatic miss.\n  * `weak_hit`: An automatic weak hit.\n  * `strong_hit`: An automatic strong hit.\n  * `player_choice`: The player chooses which roll option to use.\n  * `highest`: Use the roll option with the best/highest value.\n  * `lowest`: Use the roll option with the worst/lowest value.\n  * `all`: Use **every** roll option at once.\n  * `enhance`: The roll options can't be used alone; instead, they can be used to enhance existing roll options. The enhanced option must be able to meet any requirements of these enhancements, such as the `roll_type` (see EnhanceMove) and `using` (see RollOptions).",
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all",
				"enhance"
			]
		},
		"ActionRollOption": {
			"title": "ActionRollOption",
			"allOf": [
				{
					"type": "object",
					"required": ["using"],
					"properties": {
						"using": {
							"default": "stat",
							"enum": [
								"stat",
								"condition_meter",
								"ref",
								"attached_asset_meter",
								"custom"
							]
						}
					}
				},
				{
					"anyOf": [
						{
							"$ref": "#/$defs/RollOptionStat"
						},
						{
							"$ref": "#/$defs/RollOptionConditionMeter"
						},
						{
							"$ref": "#/$defs/RollOptionRef"
						},
						{
							"$ref": "#/$defs/RollOptionAttachedAssetRef"
						},
						{
							"$ref": "#/$defs/RollOptionCustom"
						}
					]
				}
			]
		},
		"Move": {
			"title": "Move",
			"anyOf": [
				{
					"$ref": "#/$defs/MoveActionRoll"
				},
				{
					"$ref": "#/$defs/MoveNoRoll"
				},
				{
					"$ref": "#/$defs/MoveProgressRoll"
				},
				{
					"$ref": "#/$defs/MoveSpecialTrack"
				}
			]
		},
		"MoveActionRoll": {
			"title": "Move (action roll)",
			"type": "object",
			"description": "A move that makes an action roll.",
			"required": [
				"id",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/MoveID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"roll_type": {
					"type": "string",
					"description": "A move that makes an action roll.",
					"const": "action_roll"
				},
				"trigger": {
					"$ref": "#/$defs/TriggerActionRoll"
				},
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/$defs/MoveOutcomes"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"oracles": {
					"type": "array",
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"items": {
						"$ref": "#/$defs/OracleTableID"
					}
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"replaces": {
					"$ref": "#/$defs/MoveID",
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
				}
			},
			"isSourcedNode": true
		},
		"MoveActionRollEnhance": {
			"title": "MoveActionRollEnhance",
			"type": "object",
			"required": ["roll_type"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A move that makes an action roll.",
					"const": "action_roll"
				},
				"trigger": {
					"type": "object",
					"properties": {
						"conditions": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/TriggerActionRollConditionEnhance"
							}
						}
					}
				},
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MoveIDWildcard"
					}
				}
			}
		},
		"MoveCategory": {
			"title": "MoveCategory",
			"type": "object",
			"required": ["id", "name", "source"],
			"properties": {
				"id": {
					"$ref": "#/$defs/MoveCategoryID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"color": {
					"$ref": "#/$defs/CSSColor"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/Move"
						}
					}
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"enhances": {
					"$ref": "#/$defs/MoveCategoryID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				}
			},
			"isSourcedNode": true
		},
		"MoveEnhance": {
			"title": "Move Enhance",
			"anyOf": [
				{
					"$ref": "#/$defs/MoveActionRollEnhance"
				},
				{
					"$ref": "#/$defs/MoveNoRollEnhance"
				},
				{
					"$ref": "#/$defs/MoveProgressRollEnhance"
				},
				{
					"$ref": "#/$defs/MoveSpecialTrackEnhance"
				}
			]
		},
		"MoveNoRoll": {
			"title": "Move (no roll)",
			"type": "object",
			"description": "A move that makes no action rolls or progress rolls.",
			"required": ["id", "name", "roll_type", "trigger", "text", "source"],
			"properties": {
				"id": {
					"$ref": "#/$defs/MoveID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"roll_type": {
					"type": "string",
					"description": "A move that makes no action rolls or progress rolls.",
					"const": "no_roll"
				},
				"trigger": {
					"$ref": "#/$defs/TriggerNoRoll"
				},
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"oracles": {
					"type": "array",
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"items": {
						"$ref": "#/$defs/OracleTableID"
					}
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"replaces": {
					"$ref": "#/$defs/MoveID",
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
				}
			},
			"isSourcedNode": true
		},
		"MoveNoRollEnhance": {
			"title": "MoveNoRollEnhance",
			"type": "object",
			"required": ["roll_type"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A move that makes no action rolls or progress rolls.",
					"const": "no_roll"
				},
				"trigger": {
					"type": "object",
					"properties": {
						"conditions": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/TriggerNoRollConditionEnhance"
							}
						}
					}
				},
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MoveIDWildcard"
					}
				}
			}
		},
		"MoveOutcome": {
			"title": "MoveOutcome",
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString"
				},
				"count_as": {
					"$ref": "#/$defs/MoveOutcomeType"
				}
			}
		},
		"MoveOutcomeMatchable": {
			"title": "MoveOutcomeMatchable",
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString"
				},
				"match": {
					"$ref": "#/$defs/MoveOutcome"
				},
				"count_as": {
					"$ref": "#/$defs/MoveOutcomeType"
				}
			}
		},
		"MoveOutcomeType": {
			"title": "MoveOutcomeType",
			"description": "  * `miss`: The score doesn't beat either challenge die.\n  * `weak_hit`: The score is greater than one challenge die.\n  * `strong_hit`: The score is greater than both challenge dice.",
			"enum": ["miss", "weak_hit", "strong_hit"]
		},
		"MoveOutcomes": {
			"title": "MoveOutcomes",
			"type": "object",
			"description": "A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.",
			"required": ["strong_hit", "weak_hit", "miss"],
			"properties": {
				"strong_hit": {
					"$ref": "#/$defs/MoveOutcomeMatchable"
				},
				"weak_hit": {
					"$ref": "#/$defs/MoveOutcome"
				},
				"miss": {
					"$ref": "#/$defs/MoveOutcomeMatchable"
				}
			}
		},
		"MoveProgressRoll": {
			"title": "Progress Move",
			"type": "object",
			"description": "A progress move that rolls on a standard progress track type (defined by the move object).",
			"required": [
				"id",
				"name",
				"roll_type",
				"track_label",
				"trigger",
				"text",
				"outcomes",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/MoveID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"roll_type": {
					"type": "string",
					"description": "A progress move that rolls on a standard progress track type (defined by this move).",
					"const": "progress_roll"
				},
				"track_label": {
					"$ref": "#/$defs/Label",
					"description": "A category label for progress tracks associated with this move.",
					"examples": [
						"Vow",
						"Journey",
						"Combat",
						"Scene Challenge",
						"Expedition",
						"Connection",
						"Delve"
					]
				},
				"trigger": {
					"$ref": "#/$defs/TriggerProgressRoll"
				},
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/$defs/MoveOutcomes"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"oracles": {
					"type": "array",
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"items": {
						"$ref": "#/$defs/OracleTableID"
					}
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"replaces": {
					"$ref": "#/$defs/MoveID",
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
				}
			},
			"isSourcedNode": true
		},
		"MoveProgressRollEnhance": {
			"title": "MoveProgressRollEnhance",
			"type": "object",
			"required": ["roll_type"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A progress move that rolls on a standard progress track type (defined by this move).",
					"const": "progress_roll"
				},
				"trigger": {
					"type": "object",
					"properties": {
						"conditions": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/TriggerProgressRollConditionEnhance"
							}
						}
					}
				},
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MoveIDWildcard"
					}
				}
			}
		},
		"MoveRollType": {
			"title": "MoveRollType",
			"description": "  * `no_roll`: A move that makes no action rolls or progress rolls.\n  * `action_roll`: A move that makes an action roll.\n  * `progress_roll`: A progress move that rolls on a standard progress track type (defined by this move).\n  * `special_track`: A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
			"enum": ["no_roll", "action_roll", "progress_roll", "special_track"]
		},
		"MoveSpecialTrack": {
			"title": "Progress Move (special track roll)",
			"type": "object",
			"required": [
				"id",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/MoveID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"roll_type": {
					"type": "string",
					"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"const": "special_track"
				},
				"trigger": {
					"$ref": "#/$defs/TriggerSpecialTrack"
				},
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/$defs/MoveOutcomes"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"oracles": {
					"type": "array",
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"items": {
						"$ref": "#/$defs/OracleTableID"
					}
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"replaces": {
					"$ref": "#/$defs/MoveID",
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
				}
			},
			"isSourcedNode": true
		},
		"MoveSpecialTrackEnhance": {
			"title": "MoveSpecialTrackEnhance",
			"type": "object",
			"required": ["roll_type"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"const": "special_track"
				},
				"trigger": {
					"type": "object",
					"properties": {
						"conditions": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/TriggerSpecialTrackConditionEnhance"
							}
						}
					}
				},
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MoveIDWildcard"
					}
				}
			}
		},
		"ProgressRollMethod": {
			"title": "ProgressRollMethod",
			"description": "  * `miss`: An automatic miss.\n  * `weak_hit`: An automatic weak hit.\n  * `strong_hit`: An automatic strong hit.\n  * `progress_roll`: Make a progress roll on a progress track associated with this move.",
			"enum": ["miss", "weak_hit", "strong_hit", "progress_roll"]
		},
		"ProgressRollOption": {
			"title": "ProgressRollOption",
			"type": "object",
			"required": ["using"],
			"properties": {
				"using": {
					"type": "string",
					"const": "progress_track"
				}
			}
		},
		"RollOptionAttachedAssetRef": {
			"title": "RollOptionAttachedAssetRef",
			"type": "object",
			"required": ["using"],
			"properties": {
				"using": {
					"type": "string",
					"const": "attached_asset_meter"
				}
			}
		},
		"RollOptionConditionMeter": {
			"title": "RollOptionConditionMeter",
			"type": "object",
			"required": ["using", "condition_meter"],
			"properties": {
				"using": {
					"type": "string",
					"const": "condition_meter",
					"default": "condition_meter"
				},
				"condition_meter": {
					"$ref": "#/$defs/PlayerConditionMeter"
				}
			}
		},
		"RollOptionCustom": {
			"title": "RollOptionCustom",
			"type": "object",
			"required": ["label", "value", "using"],
			"properties": {
				"label": {
					"$ref": "#/$defs/Label"
				},
				"value": {
					"type": "integer",
					"minimum": 0
				},
				"using": {
					"type": "string",
					"const": "custom"
				}
			}
		},
		"RollOptionRef": {
			"title": "RollOptionRef",
			"type": "object",
			"required": ["using", "ref"],
			"properties": {
				"using": {
					"type": "string",
					"const": "ref"
				},
				"ref": {
					"anyOf": [
						{
							"$ref": "#/$defs/AssetConditionMeterIDWildcard"
						},
						{
							"$ref": "#/$defs/AssetOptionFieldIDWildcard"
						}
					]
				}
			}
		},
		"RollOptionStat": {
			"title": "RollOptionStat",
			"type": "object",
			"required": ["using", "stat"],
			"properties": {
				"using": {
					"type": "string",
					"const": "stat",
					"default": "stat"
				},
				"stat": {
					"$ref": "#/$defs/PlayerStat"
				}
			}
		},
		"SpecialTrackRollMethod": {
			"title": "SpecialTrackRollMethod",
			"description": "  * `miss`: An automatic miss.\n  * `weak_hit`: An automatic weak hit.\n  * `strong_hit`: An automatic strong hit.\n  * `player_choice`: The player chooses which roll option to use.\n  * `highest`: Use the roll option with the best/highest value.\n  * `lowest`: Use the roll option with the worst/lowest value.\n  * `all`: Use **every** roll option at once.\n  * `enhance`: The roll options can't be used alone; instead, they can be used to enhance existing roll options. The enhanced option must be able to meet any requirements of these enhancements, such as the `roll_type` (see EnhanceMove) and `using` (see RollOptions).",
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all",
				"enhance"
			]
		},
		"TriggerActionRoll": {
			"title": "TriggerActionRoll",
			"type": "object",
			"required": ["text", "conditions"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"type": "string",
					"description": "A markdown string of the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be available for individual trigger conditions.",
					"pattern": ".*\\.{3}"
				},
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerActionRollCondition"
					}
				}
			}
		},
		"TriggerActionRollCondition": {
			"title": "TriggerActionRollCondition",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				},
				"method": {
					"$ref": "#/$defs/ActionRollMethod",
					"default": "player_choice"
				},
				"roll_options": {
					"type": "array",
					"description": "The options available when rolling with this trigger.",
					"items": {
						"$ref": "#/$defs/ActionRollOption"
					}
				}
			}
		},
		"TriggerActionRollConditionEnhance": {
			"title": "TriggerActionRollConditionEnhance",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				},
				"method": {
					"default": "enhance",
					"anyOf": [
						{
							"type": "string",
							"const": "enhance"
						},
						{
							"$ref": "#/$defs/ActionRollMethod",
							"default": "player_choice"
						}
					]
				},
				"roll_options": {
					"description": "If this is null or undefined, this trigger condition enhance specifies no roll options of its own.",
					"default": null,
					"anyOf": [
						{
							"type": "null"
						},
						{
							"type": "array",
							"description": "The options available when rolling with this trigger.",
							"items": {
								"$ref": "#/$defs/ActionRollOption"
							}
						}
					]
				}
			}
		},
		"TriggerActionRollEnhance": {
			"title": "TriggerActionRollEnhance",
			"type": "object",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerActionRollConditionEnhance"
					}
				}
			}
		},
		"TriggerBase": {
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"type": "string",
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
					"pattern": ".*\\.{3}"
				}
			}
		},
		"TriggerBy": {
			"title": "TriggerBy",
			"type": "object",
			"description": "Information on who can trigger this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
			"required": ["ally", "player"],
			"properties": {
				"ally": {
					"type": "boolean",
					"default": false
				},
				"player": {
					"type": "boolean",
					"default": true
				}
			}
		},
		"TriggerNoRoll": {
			"title": "TriggerNoRoll",
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"type": "string",
					"description": "A markdown string of the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be available for individual trigger conditions.",
					"pattern": ".*\\.{3}"
				},
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerNoRollCondition"
					}
				}
			}
		},
		"TriggerNoRollCondition": {
			"title": "TriggerNoRollCondition",
			"type": "object",
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				}
			}
		},
		"TriggerNoRollConditionEnhance": {
			"title": "TriggerNoRollConditionEnhance",
			"type": "object",
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				}
			}
		},
		"TriggerNoRollEnhance": {
			"title": "TriggerNoRollEnhance",
			"type": "object",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerNoRollConditionEnhance"
					}
				}
			}
		},
		"TriggerProgressRoll": {
			"title": "TriggerProgressRoll",
			"type": "object",
			"required": ["text", "conditions"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"type": "string",
					"description": "A markdown string of the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be available for individual trigger conditions.",
					"pattern": ".*\\.{3}"
				},
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerProgressRollCondition"
					}
				}
			}
		},
		"TriggerProgressRollCondition": {
			"title": "TriggerProgressRollCondition",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				},
				"method": {
					"$ref": "#/$defs/ProgressRollMethod",
					"default": "progress_roll"
				},
				"roll_options": {
					"type": "array",
					"description": "The options available when rolling with this trigger.",
					"items": {
						"$ref": "#/$defs/ProgressRollOption"
					}
				}
			}
		},
		"TriggerProgressRollConditionEnhance": {
			"title": "TriggerProgressRollConditionEnhance",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				},
				"method": {
					"default": "enhance",
					"anyOf": [
						{
							"type": "string",
							"const": "enhance"
						},
						{
							"$ref": "#/$defs/ProgressRollMethod",
							"default": "progress_roll"
						}
					]
				},
				"roll_options": {
					"description": "If this is null or undefined, this trigger condition enhance specifies no roll options of its own.",
					"default": null,
					"anyOf": [
						{
							"type": "null"
						},
						{
							"type": "array",
							"description": "The options available when rolling with this trigger.",
							"items": {
								"$ref": "#/$defs/ProgressRollOption"
							}
						}
					]
				}
			}
		},
		"TriggerProgressRollEnhance": {
			"title": "TriggerProgressRollEnhance",
			"type": "object",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerProgressRollConditionEnhance"
					}
				}
			}
		},
		"TriggerSpecialTrack": {
			"title": "TriggerSpecialTrack",
			"type": "object",
			"required": ["text", "conditions"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"type": "string",
					"description": "A markdown string of the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be available for individual trigger conditions.",
					"pattern": ".*\\.{3}"
				},
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerSpecialTrackCondition"
					}
				}
			}
		},
		"TriggerSpecialTrackCondition": {
			"title": "TriggerSpecialTrackCondition",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				},
				"method": {
					"$ref": "#/$defs/SpecialTrackRollMethod"
				},
				"roll_options": {
					"type": "array",
					"description": "The options available when rolling with this trigger.",
					"items": {
						"$ref": "#/$defs/TriggerSpecialTrackConditionOption"
					}
				}
			}
		},
		"TriggerSpecialTrackConditionEnhance": {
			"title": "TriggerSpecialTrackConditionEnhance",
			"type": "object",
			"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged).",
			"required": ["method", "roll_options"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				},
				"by": {
					"$ref": "#/$defs/TriggerBy"
				},
				"method": {
					"default": "enhance",
					"anyOf": [
						{
							"type": "string",
							"const": "enhance"
						},
						{
							"$ref": "#/$defs/SpecialTrackRollMethod"
						}
					]
				},
				"roll_options": {
					"description": "If this is null or undefined, this trigger condition enhance specifies no roll options of its own.",
					"default": null,
					"anyOf": [
						{
							"type": "null"
						},
						{
							"type": "array",
							"description": "The options available when rolling with this trigger.",
							"items": {
								"$ref": "#/$defs/TriggerSpecialTrackConditionOption"
							}
						}
					]
				}
			}
		},
		"TriggerSpecialTrackConditionOption": {
			"title": "TriggerSpecialTrackConditionOption",
			"type": "object",
			"required": ["using"],
			"properties": {
				"using": {
					"$ref": "#/$defs/SpecialTrackType"
				}
			}
		},
		"TriggerSpecialTrackEnhance": {
			"title": "TriggerSpecialTrackEnhance",
			"type": "object",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerSpecialTrackConditionEnhance"
					}
				}
			}
		},
		"Asset": {
			"title": "Asset",
			"type": "object",
			"required": [
				"id",
				"name",
				"asset_type",
				"count_as_impact",
				"shared",
				"abilities",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"asset_type": {
					"$ref": "#/$defs/Label",
					"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
					"examples": [
						"Combat Talent",
						"Command Vehicle",
						"Companion",
						"Deed",
						"Module",
						"Path",
						"Ritual",
						"Support Vehicle"
					]
				},
				"color": {
					"$ref": "#/$defs/CSSColor"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"options": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"description": "Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetOptionField"
						}
					}
				},
				"count_as_impact": {
					"type": "boolean",
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"default": false
				},
				"shared": {
					"type": "boolean",
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
					"default": false
				},
				"attachments": {
					"$ref": "#/$defs/AssetAttachment"
				},
				"requirement": {
					"$ref": "#/$defs/MarkdownString"
				},
				"abilities": {
					"type": "array",
					"description": "Abilities provided by this asset. Most assets have 3.",
					"items": {
						"$ref": "#/$defs/AssetAbility"
					}
				},
				"controls": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"description": "Controls are asset input fields whose values are expected to change throughout the life of the asset. Usually these occur as checkboxes on condition meters, but a few assets also use them for counters or clocks.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetControlField"
						}
					}
				},
				"condition_meter": {
					"$ref": "#/$defs/AssetConditionMeter"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				}
			}
		},
		"AssetAbility": {
			"title": "AssetAbility",
			"type": "object",
			"required": ["id", "enabled", "text"],
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetAbilityID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"enabled": {
					"type": "boolean",
					"default": false
				},
				"options": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetAbilityOptionField"
						}
					}
				},
				"text": {
					"$ref": "#/$defs/MarkdownString"
				},
				"controls": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetAbilityControlField"
						}
					}
				},
				"enhance_asset": {
					"type": "object",
					"description": "Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.",
					"properties": {
						"count_as_impact": {
							"type": "boolean",
							"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
						},
						"shared": {
							"type": "boolean",
							"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
						},
						"attachments": {
							"$ref": "#/$defs/AssetAttachment"
						},
						"condition_meter": {
							"$ref": "#/$defs/AssetConditionMeterEnhance"
						}
					},
					"releaseStage": "unstable"
				},
				"enhance_moves": {
					"type": "array",
					"description": "Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.",
					"items": {
						"$ref": "#/$defs/MoveEnhance"
					},
					"releaseStage": "experimental"
				},
				"moves": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"description": "Unique moves added by this asset ability.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/Move"
						}
					}
				}
			}
		},
		"AssetAbilityControlField": {
			"title": "Asset Ability Control Field",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetAbilityControlFieldID"
				}
			},
			"anyOf": [
				{
					"$ref": "#/$defs/ClockField"
				},
				{
					"$ref": "#/$defs/CounterField"
				},
				{
					"$ref": "#/$defs/CheckboxField"
				}
			]
		},
		"AssetAbilityOptionField": {
			"title": "Asset Ability Option Field",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetAbilityOptionFieldID"
				}
			},
			"anyOf": [
				{
					"$ref": "#/$defs/TextField"
				}
			]
		},
		"AssetAttachment": {
			"title": "AssetAttachment",
			"type": "object",
			"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"required": ["assets"],
			"properties": {
				"max": {
					"type": "integer",
					"description": "Omit if there's no upper limit to the number of attached assets.",
					"minimum": 1
				},
				"assets": {
					"type": "array",
					"description": "Asset IDs (which may be wildcards) that may be attached to this asset",
					"items": {
						"$ref": "#/$defs/AssetIDWildcard"
					}
				}
			}
		},
		"AssetCardFlipField": {
			"title": "AssetCardFlipField",
			"type": "object",
			"description": "This type of input isn't a *field* in the traditional sense. When its value is set to `true` it means that the card is flipped over. For example, Starforged's module assets use this to represent a 'broken' state.\n\n    Otherwise, it behaves similarly to a CheckboxField.\n    ",
			"required": ["id", "label", "field_type", "disables_asset"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "card_flip"
				},
				"value": {
					"type": "boolean",
					"description": "Is the card flipped over?",
					"default": false
				},
				"disables_asset": {
					"type": "boolean",
					"description": "Does this field disable the asset when its value is set to `true`?",
					"default": false
				}
			}
		},
		"AssetCheckboxField": {
			"title": "AssetCheckboxField",
			"type": "object",
			"required": ["id", "label", "field_type", "disables_asset", "is_impact"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "checkbox"
				},
				"value": {
					"type": "boolean",
					"description": "Is the box checked?",
					"default": false
				},
				"disables_asset": {
					"type": "boolean",
					"description": "Does this field disable the asset when its value is set to `true`?",
					"default": false
				},
				"is_impact": {
					"type": "boolean",
					"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
					"default": false
				}
			}
		},
		"AssetConditionMeter": {
			"title": "Asset condition meter",
			"type": "object",
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".\n\nThe asset condition meter is always rendered at the bottom of the card.",
			"required": ["id", "label", "min", "max"],
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetConditionMeterID"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"min": {
					"type": "integer",
					"default": 0
				},
				"max": {
					"type": "integer"
				},
				"value": {
					"type": "integer"
				},
				"controls": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"description": "Controls are asset input fields whose values are expected to change throughout the life of the asset. Usually these occur as checkboxes on condition meters, but a few assets also use them for counters or clocks.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetConditionMeterControlField"
						}
					}
				},
				"moves": {
					"type": "object",
					"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.",
					"properties": {
						"recover": {
							"$ref": "#/$defs/MoveID",
							"description": "The ID of the primary recover move associated with the condition meter. When in doubt, prefer the most specific move that can be used in the field, or whatever would be most useful to have presented as a shortcut.",
							"examples": [
								"classic/moves/adventure/heal",
								"starforged/moves/recover/heal",
								"starforged/moves/recover/repair"
							]
						},
						"suffer": {
							"$ref": "#/$defs/MoveID",
							"description": "The ID of the suffer move associated with the condition meter. If the suffer move makes an action roll, it may use this condition meter's value as a stat option.",
							"examples": [
								"classic/moves/suffer/companion_endure_harm",
								"starforged/moves/suffer/companion_takes_a_hit",
								"starforged/moves/suffer/withstand_damage"
							]
						}
					},
					"examples": [
						{
							"suffer": "classic/moves/suffer/endure_companion_harm",
							"recover": "classic/moves/adventure/heal"
						},
						{
							"suffer": "starforged/moves/suffer/companion_takes_a_hit",
							"recover": "starforged/moves/recover/heal"
						},
						{
							"suffer": "starforged/moves/suffer/withstand_damage",
							"recover": "starforged/moves/recover/repair"
						}
					],
					"releaseStage": "unstable"
				}
			}
		},
		"AssetConditionMeterControlField": {
			"title": "Asset Condition Meter Control Field",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetConditionMeterControlFieldID"
				}
			},
			"anyOf": [
				{
					"$ref": "#/$defs/AssetCheckboxField"
				}
			]
		},
		"AssetConditionMeterEnhance": {
			"title": "Asset condition meter",
			"type": "object",
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".\n\nThe asset condition meter is always rendered at the bottom of the card.",
			"properties": {
				"max": {
					"type": "integer"
				},
				"controls": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"description": "Controls are asset input fields whose values are expected to change throughout the life of the asset. Usually these occur as checkboxes on condition meters, but a few assets also use them for counters or clocks.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetConditionMeterControlField"
						}
					}
				}
			}
		},
		"AssetControlField": {
			"title": "Asset Control Field",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetControlFieldID"
				}
			},
			"anyOf": [
				{
					"$ref": "#/$defs/CheckboxField"
				},
				{
					"$ref": "#/$defs/AssetCardFlipField"
				},
				{
					"$ref": "#/$defs/SelectFieldAssetState"
				}
			]
		},
		"AssetOptionField": {
			"title": "Asset Option Field",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetOptionFieldID"
				}
			},
			"anyOf": [
				{
					"$ref": "#/$defs/SelectFieldStat"
				},
				{
					"$ref": "#/$defs/TextField"
				}
			]
		},
		"AssetType": {
			"title": "AssetType",
			"type": "object",
			"required": ["id", "name", "source"],
			"properties": {
				"id": {
					"$ref": "#/$defs/AssetTypeID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"color": {
					"$ref": "#/$defs/CSSColor"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/Asset"
						}
					}
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"enhances": {
					"$ref": "#/$defs/AssetTypeID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				}
			},
			"isSourcedNode": true
		},
		"CheckboxField": {
			"title": "CheckboxField",
			"type": "object",
			"description": "This input represents a checkbox field. It is considered checked when its value is set to `true`.",
			"required": ["id", "label", "field_type"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "checkbox"
				},
				"value": {
					"type": "boolean",
					"description": "Is the box checked?",
					"default": false
				}
			}
		},
		"ClockField": {
			"title": "ClockField",
			"type": "object",
			"required": ["id", "label", "field_type", "min", "max", "value"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "clock"
				},
				"min": {
					"type": "number",
					"const": 0
				},
				"max": {
					"enum": [4, 6, 8, 10]
				},
				"value": {
					"type": "integer",
					"default": 0
				}
			}
		},
		"CounterField": {
			"title": "CounterField",
			"type": "object",
			"required": ["id", "label", "field_type", "min", "value"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "counter"
				},
				"min": {
					"type": "number",
					"const": 0
				},
				"max": {
					"type": "integer"
				},
				"value": {
					"type": "integer",
					"default": 0
				}
			}
		},
		"SelectFieldAssetState": {
			"title": "Select field (asset state)",
			"type": "object",
			"description": "Select a defined asset state, which may enhance the asset. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles).",
			"required": ["id", "label", "field_type", "choices"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "select_asset_state"
				},
				"value": {
					"type": "object",
					"properties": {
						"count_as_impact": {
							"type": "boolean",
							"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
						},
						"shared": {
							"type": "boolean",
							"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
						},
						"attachments": {
							"$ref": "#/$defs/AssetAttachment"
						}
					}
				},
				"choices": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"type": "object",
							"required": ["label", "value"],
							"properties": {
								"label": {
									"$ref": "#/$defs/Label"
								},
								"value": {
									"type": "object",
									"properties": {
										"count_as_impact": {
											"type": "boolean",
											"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
										},
										"shared": {
											"type": "boolean",
											"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
										},
										"attachments": {
											"$ref": "#/$defs/AssetAttachment"
										}
									}
								},
								"selected": {
									"type": "boolean"
								}
							}
						}
					}
				}
			}
		},
		"SelectFieldStat": {
			"title": "Select field (player stat)",
			"type": "object",
			"description": "Select a standard player stat.",
			"required": ["id", "label", "field_type", "choices"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "select_stat"
				},
				"value": {
					"$ref": "#/$defs/PlayerStat"
				},
				"choices": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"type": "object",
							"required": ["label", "value"],
							"properties": {
								"label": {
									"$ref": "#/$defs/Label"
								},
								"value": {
									"$ref": "#/$defs/PlayerStat"
								},
								"selected": {
									"type": "boolean"
								}
							}
						}
					}
				}
			}
		},
		"TextField": {
			"title": "TextField",
			"type": "object",
			"required": ["id", "label", "field_type"],
			"properties": {
				"id": {
					"type": "string"
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"field_type": {
					"type": "string",
					"const": "text"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"Truth": {
			"title": "Truth",
			"type": "object",
			"description": "A setting truth category.",
			"required": ["id", "name", "options", "source"],
			"properties": {
				"id": {
					"$ref": "#/$defs/TruthID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"options": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TruthOption"
					}
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				}
			},
			"isSourcedNode": true
		},
		"TruthOption": {
			"title": "TruthOption",
			"type": "object",
			"required": ["id", "description", "quest_starter"],
			"properties": {
				"id": {
					"$ref": "#/$defs/TruthOptionID"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/$defs/MarkdownString"
				}
			}
		},
		"Atlas": {
			"title": "Atlas",
			"type": "object",
			"required": ["id", "name", "source"],
			"properties": {
				"id": {
					"$ref": "#/$defs/AtlasID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"color": {
					"$ref": "#/$defs/CSSColor"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AtlasEntry"
						}
					}
				},
				"collections": {
					"type": "object",
					"$comment": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/Atlas"
						}
					}
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"enhances": {
					"$ref": "#/$defs/AtlasID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				}
			}
		},
		"AtlasEntry": {
			"title": "Atlas entry",
			"type": "object",
			"description": "An atlas entry, like the Ironlands region entries found in classic Ironsworn.",
			"required": [
				"id",
				"name",
				"features",
				"description",
				"quest_starter",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/AtlasEntryID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownString"
					}
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/$defs/MarkdownString"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"your_truth": {
					"$ref": "#/$defs/MarkdownString"
				}
			},
			"isSourcedNode": true,
			"releaseStage": "experimental"
		},
		"PlayerConditionMeter": {
			"title": "PlayerConditionMeter",
			"type": "string",
			"description": "A basic, rollable player character resource.",
			"examples": ["health", "spirit", "supply"],
			"pattern": "^[a-z][a-z_]*$"
		},
		"PlayerStat": {
			"title": "PlayerStat",
			"type": "string",
			"description": "A basic player character stat.",
			"examples": ["edge", "heart", "iron", "shadow", "wits"],
			"pattern": "^[a-z][a-z_]*$"
		},
		"Rarity": {
			"title": "Rarity",
			"type": "object",
			"description": "A rarity, as described in Ironsworn: Delve.",
			"required": ["id", "name", "description", "source", "asset", "xp_cost"],
			"properties": {
				"id": {
					"$ref": "#/$defs/RarityID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"asset": {
					"$ref": "#/$defs/AssetID",
					"description": "The asset augmented by this rarity."
				},
				"xp_cost": {
					"type": "integer",
					"description": "From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.",
					"default": 3,
					"minimum": 3,
					"maximum": 5
				}
			},
			"isSourcedNode": true
		},
		"DelveSite": {
			"title": "DelveSite",
			"type": "object",
			"description": "A delve site with a theme, domain, and denizen table.",
			"required": [
				"id",
				"name",
				"rank",
				"description",
				"source",
				"denizens",
				"domain",
				"theme"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/DelveSiteID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"rank": {
					"$ref": "#/$defs/ChallengeRank"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"denizens": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DelveSiteDenizen"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 1
										},
										"max": {
											"type": "number",
											"const": 27
										},
										"frequency": {
											"type": "string",
											"const": "very_common"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 28
										},
										"max": {
											"type": "number",
											"const": 41
										},
										"frequency": {
											"type": "string",
											"const": "common"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 42
										},
										"max": {
											"type": "number",
											"const": 55
										},
										"frequency": {
											"type": "string",
											"const": "common"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 56
										},
										"max": {
											"type": "number",
											"const": 69
										},
										"frequency": {
											"type": "string",
											"const": "common"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 70
										},
										"max": {
											"type": "number",
											"const": 75
										},
										"frequency": {
											"type": "string",
											"const": "uncommon"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 76
										},
										"max": {
											"type": "number",
											"const": 81
										},
										"frequency": {
											"type": "string",
											"const": "uncommon"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 82
										},
										"max": {
											"type": "number",
											"const": 87
										},
										"frequency": {
											"type": "string",
											"const": "uncommon"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 88
										},
										"max": {
											"type": "number",
											"const": 93
										},
										"frequency": {
											"type": "string",
											"const": "uncommon"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 94
										},
										"max": {
											"type": "number",
											"const": 95
										},
										"frequency": {
											"type": "string",
											"const": "rare"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 96
										},
										"max": {
											"type": "number",
											"const": 97
										},
										"frequency": {
											"type": "string",
											"const": "rare"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 98
										},
										"max": {
											"type": "number",
											"const": 99
										},
										"frequency": {
											"type": "string",
											"const": "rare"
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "frequency"],
									"properties": {
										"min": {
											"type": "number",
											"const": 100
										},
										"max": {
											"type": "number",
											"const": 100
										},
										"frequency": {
											"type": "string",
											"const": "unforeseen"
										}
									}
								}
							],
							"additionalItems": false,
							"maxItems": 12,
							"minItems": 12
						}
					]
				},
				"domain": {
					"$ref": "#/$defs/DelveSiteDomainID"
				},
				"extra_card": {
					"description": "An additional theme or domain card, for use with optional rules in Ironsworn: Delve.",
					"anyOf": [
						{
							"$ref": "#/$defs/DelveSiteThemeID"
						},
						{
							"$ref": "#/$defs/DelveSiteDomainID"
						}
					]
				},
				"region": {
					"$ref": "#/$defs/AtlasEntryID",
					"description": "The ID of an atlas entry representing the region in which this delve site is located."
				},
				"theme": {
					"$ref": "#/$defs/DelveSiteThemeID"
				}
			},
			"isSourcedNode": true
		},
		"DelveSiteDenizen": {
			"title": "DelveSiteDenizen",
			"type": "object",
			"required": ["id", "min", "max", "frequency"],
			"properties": {
				"id": {
					"$ref": "#/$defs/DelveSiteDenizenID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"min": {
					"type": "integer",
					"minimum": 1,
					"maximum": 100
				},
				"max": {
					"type": "integer",
					"minimum": 1,
					"maximum": 100
				},
				"frequency": {
					"$ref": "#/$defs/DelveSiteDenizenFrequency"
				},
				"npc": {
					"$ref": "#/$defs/NpcID",
					"description": "The ID of the relevant NPC entry, if one is specified."
				}
			}
		},
		"DelveSiteDenizenFrequency": {
			"title": "DelveSiteDenizenFrequency",
			"enum": ["very_common", "common", "uncommon", "rare", "unforeseen"]
		},
		"DelveSiteDomain": {
			"title": "Delve site domain",
			"type": "object",
			"required": [
				"id",
				"name",
				"card_type",
				"summary",
				"features",
				"dangers",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/DelveSiteDomainID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"card_type": {
					"type": "string",
					"const": "domain"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"features": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DelveSiteDomainFeatureRow"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 21
										},
										"max": {
											"type": "number",
											"const": 43
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 44
										},
										"max": {
											"type": "number",
											"const": 56
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 57
										},
										"max": {
											"type": "number",
											"const": 64
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 65
										},
										"max": {
											"type": "number",
											"const": 68
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 69
										},
										"max": {
											"type": "number",
											"const": 72
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 73
										},
										"max": {
											"type": "number",
											"const": 76
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 77
										},
										"max": {
											"type": "number",
											"const": 80
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 81
										},
										"max": {
											"type": "number",
											"const": 84
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 85
										},
										"max": {
											"type": "number",
											"const": 88
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "result", "suggestions"],
									"properties": {
										"min": {
											"type": "number",
											"const": 89
										},
										"max": {
											"type": "number",
											"const": 98
										},
										"result": {
											"default": "Something unusual or unexpected"
										},
										"suggestions": {
											"default": {
												"oracles": [
													"delve/oracles/feature/aspect",
													"delve/oracles/feature/focus"
												]
											}
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "result", "suggestions"],
									"properties": {
										"min": {
											"type": "number",
											"const": 99
										},
										"max": {
											"type": "number",
											"const": 99
										},
										"result": {
											"default": "You transition into a new theme"
										},
										"suggestions": {
											"default": {
												"oracles": ["delve/oracles/site_nature/theme"]
											}
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max", "result", "suggestions"],
									"properties": {
										"min": {
											"type": "number",
											"const": 100
										},
										"max": {
											"type": "number",
											"const": 100
										},
										"result": {
											"default": "You transition into a new domain"
										},
										"suggestions": {
											"default": {
												"oracles": ["delve/oracles/site_nature/domain"]
											}
										}
									}
								}
							],
							"additionalItems": false,
							"maxItems": 12,
							"minItems": 12
						}
					]
				},
				"dangers": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DelveSiteDomainDangerRow"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 31
										},
										"max": {
											"type": "number",
											"const": 33
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 34
										},
										"max": {
											"type": "number",
											"const": 36
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 37
										},
										"max": {
											"type": "number",
											"const": 39
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 40
										},
										"max": {
											"type": "number",
											"const": 42
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 43
										},
										"max": {
											"type": "number",
											"const": 45
										}
									}
								}
							],
							"additionalItems": false,
							"maxItems": 5,
							"minItems": 5
						}
					]
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"name_oracle": {
					"$ref": "#/$defs/OracleTableID",
					"description": "An oracle table ID containing place name elements. For examples, see oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in oracle collection ID `delve/collections/oracles/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (ID: delve/oracles/site_name/format) to create random names for delve sites."
				}
			},
			"isSourcedNode": true
		},
		"DelveSiteDomainDangerRow": {
			"title": "DelveSiteDomainDangerRow",
			"type": "object",
			"required": ["id", "min", "max", "result"],
			"properties": {
				"id": {
					"$ref": "#/$defs/DomainDangerRowID"
				},
				"min": {
					"type": "integer"
				},
				"max": {
					"type": "integer"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"result": {
					"$ref": "#/$defs/MarkdownString"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"template": {
					"$ref": "#/$defs/OracleRollTemplate"
				},
				"rolls": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRoll"
					}
				},
				"embed_table": {
					"$ref": "#/$defs/OracleTableID"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"i18n": {
					"$ref": "#/$defs/I18nHints"
				}
			}
		},
		"DelveSiteDomainFeatureRow": {
			"title": "DelveSiteDomainFeatureRow",
			"type": "object",
			"required": ["id", "min", "max", "result"],
			"properties": {
				"id": {
					"$ref": "#/$defs/DomainFeatureRowID"
				},
				"min": {
					"type": "integer"
				},
				"max": {
					"type": "integer"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"result": {
					"$ref": "#/$defs/MarkdownString"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"template": {
					"$ref": "#/$defs/OracleRollTemplate"
				},
				"rolls": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRoll"
					}
				},
				"embed_table": {
					"$ref": "#/$defs/OracleTableID"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"i18n": {
					"$ref": "#/$defs/I18nHints"
				}
			}
		},
		"DelveSiteTheme": {
			"title": "Delve site theme",
			"type": "object",
			"required": [
				"id",
				"name",
				"card_type",
				"summary",
				"features",
				"dangers",
				"source"
			],
			"properties": {
				"id": {
					"$ref": "#/$defs/DelveSiteThemeID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"canonical_name": {
					"$ref": "#/$defs/Label"
				},
				"card_type": {
					"type": "string",
					"const": "theme"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"features": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DelveSiteThemeFeatureRow"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 1
										},
										"max": {
											"type": "number",
											"const": 4
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 5
										},
										"max": {
											"type": "number",
											"const": 8
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 9
										},
										"max": {
											"type": "number",
											"const": 12
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 13
										},
										"max": {
											"type": "number",
											"const": 16
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 17
										},
										"max": {
											"type": "number",
											"const": 20
										}
									}
								}
							],
							"additionalItems": false,
							"maxItems": 5,
							"minItems": 5
						}
					]
				},
				"dangers": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DelveSiteThemeDangerRow"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 1
										},
										"max": {
											"type": "number",
											"const": 5
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 6
										},
										"max": {
											"type": "number",
											"const": 10
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 11
										},
										"max": {
											"type": "number",
											"const": 12
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 13
										},
										"max": {
											"type": "number",
											"const": 14
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 15
										},
										"max": {
											"type": "number",
											"const": 16
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 17
										},
										"max": {
											"type": "number",
											"const": 18
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 19
										},
										"max": {
											"type": "number",
											"const": 20
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 21
										},
										"max": {
											"type": "number",
											"const": 22
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 23
										},
										"max": {
											"type": "number",
											"const": 24
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 25
										},
										"max": {
											"type": "number",
											"const": 26
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 27
										},
										"max": {
											"type": "number",
											"const": 28
										}
									}
								},
								{
									"type": "object",
									"required": ["min", "max"],
									"properties": {
										"min": {
											"type": "number",
											"const": 29
										},
										"max": {
											"type": "number",
											"const": 30
										}
									}
								}
							],
							"additionalItems": false,
							"maxItems": 12,
							"minItems": 12
						}
					]
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				}
			},
			"isSourcedNode": true
		},
		"DelveSiteThemeDangerRow": {
			"title": "DelveSiteThemeDangerRow",
			"type": "object",
			"required": ["id", "min", "max", "result"],
			"properties": {
				"id": {
					"$ref": "#/$defs/ThemeDangerRowID"
				},
				"min": {
					"type": "integer"
				},
				"max": {
					"type": "integer"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"result": {
					"$ref": "#/$defs/MarkdownString"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"template": {
					"$ref": "#/$defs/OracleRollTemplate"
				},
				"rolls": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRoll"
					}
				},
				"embed_table": {
					"$ref": "#/$defs/OracleTableID"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"i18n": {
					"$ref": "#/$defs/I18nHints"
				}
			}
		},
		"DelveSiteThemeFeatureRow": {
			"title": "DelveSiteThemeFeatureRow",
			"type": "object",
			"required": ["id", "min", "max", "result"],
			"properties": {
				"id": {
					"$ref": "#/$defs/ThemeFeatureRowID"
				},
				"min": {
					"type": "integer"
				},
				"max": {
					"type": "integer"
				},
				"icon": {
					"$ref": "#/$defs/SVGImageURL"
				},
				"result": {
					"$ref": "#/$defs/MarkdownString"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"$ref": "#/$defs/MarkdownString"
				},
				"template": {
					"$ref": "#/$defs/OracleRollTemplate"
				},
				"rolls": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRoll"
					}
				},
				"embed_table": {
					"$ref": "#/$defs/OracleTableID"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"i18n": {
					"$ref": "#/$defs/I18nHints"
				}
			}
		}
	}
}
