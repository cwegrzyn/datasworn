"use strict";
// Code generated by jtd-codegen for TypeScript v0.2.1
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecialTrackRollMethod = exports.RollableValueType = exports.ProgressRollOptionUsing = exports.ProgressRollMethod = exports.PartOfSpeech = exports.OracleTableStyle = exports.OracleTableRollMethod = exports.OracleTableColumnContentKey = exports.OracleCollectionStyle = exports.MoveRollType = exports.MoveOutcomeType = exports.DelveSiteDenizenFrequency = exports.AssetOptionFieldSelectValueChoiceStatOptionType = exports.AssetOptionFieldSelectValueChoiceCustomOptionType = exports.AssetOptionFieldSelectValueChoiceConditionMeterOptionType = exports.AssetOptionFieldSelectValueChoiceAttachedAssetOptionOptionType = exports.AssetOptionFieldSelectValueChoiceAttachedAssetControlOptionType = exports.AssetOptionFieldSelectValueChoiceAssetOptionOptionType = exports.AssetOptionFieldSelectValueChoiceAssetControlOptionType = exports.AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType = exports.AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType = exports.ActionRollMethod = void 0;
var ActionRollMethod;
(function (ActionRollMethod) {
    /**
     * Use **every** roll option at once.
     */
    ActionRollMethod["All"] = "all";
    /**
     * Use the roll option with the best/highest value.
     */
    ActionRollMethod["Highest"] = "highest";
    /**
     * Use the roll option with the worst/lowest value.
     */
    ActionRollMethod["Lowest"] = "lowest";
    /**
     * An automatic miss.
     */
    ActionRollMethod["Miss"] = "miss";
    /**
     * The player chooses which roll option to use.
     */
    ActionRollMethod["PlayerChoice"] = "player_choice";
    /**
     * An automatic strong hit.
     */
    ActionRollMethod["StrongHit"] = "strong_hit";
    /**
     * An automatic weak hit.
     */
    ActionRollMethod["WeakHit"] = "weak_hit";
})(ActionRollMethod || (exports.ActionRollMethod = ActionRollMethod = {}));
var AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType;
(function (AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType) {
    AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType["Option"] = "option";
})(AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType || (exports.AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType = AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType = {}));
var AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType;
(function (AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType) {
    AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType["Option"] = "option";
})(AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType || (exports.AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType = AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType = {}));
var AssetOptionFieldSelectValueChoiceAssetControlOptionType;
(function (AssetOptionFieldSelectValueChoiceAssetControlOptionType) {
    AssetOptionFieldSelectValueChoiceAssetControlOptionType["Option"] = "option";
})(AssetOptionFieldSelectValueChoiceAssetControlOptionType || (exports.AssetOptionFieldSelectValueChoiceAssetControlOptionType = AssetOptionFieldSelectValueChoiceAssetControlOptionType = {}));
var AssetOptionFieldSelectValueChoiceAssetOptionOptionType;
(function (AssetOptionFieldSelectValueChoiceAssetOptionOptionType) {
    AssetOptionFieldSelectValueChoiceAssetOptionOptionType["Option"] = "option";
})(AssetOptionFieldSelectValueChoiceAssetOptionOptionType || (exports.AssetOptionFieldSelectValueChoiceAssetOptionOptionType = AssetOptionFieldSelectValueChoiceAssetOptionOptionType = {}));
var AssetOptionFieldSelectValueChoiceAttachedAssetControlOptionType;
(function (AssetOptionFieldSelectValueChoiceAttachedAssetControlOptionType) {
    AssetOptionFieldSelectValueChoiceAttachedAssetControlOptionType["Option"] = "option";
})(AssetOptionFieldSelectValueChoiceAttachedAssetControlOptionType || (exports.AssetOptionFieldSelectValueChoiceAttachedAssetControlOptionType = AssetOptionFieldSelectValueChoiceAttachedAssetControlOptionType = {}));
var AssetOptionFieldSelectValueChoiceAttachedAssetOptionOptionType;
(function (AssetOptionFieldSelectValueChoiceAttachedAssetOptionOptionType) {
    AssetOptionFieldSelectValueChoiceAttachedAssetOptionOptionType["Option"] = "option";
})(AssetOptionFieldSelectValueChoiceAttachedAssetOptionOptionType || (exports.AssetOptionFieldSelectValueChoiceAttachedAssetOptionOptionType = AssetOptionFieldSelectValueChoiceAttachedAssetOptionOptionType = {}));
var AssetOptionFieldSelectValueChoiceConditionMeterOptionType;
(function (AssetOptionFieldSelectValueChoiceConditionMeterOptionType) {
    AssetOptionFieldSelectValueChoiceConditionMeterOptionType["Option"] = "option";
})(AssetOptionFieldSelectValueChoiceConditionMeterOptionType || (exports.AssetOptionFieldSelectValueChoiceConditionMeterOptionType = AssetOptionFieldSelectValueChoiceConditionMeterOptionType = {}));
var AssetOptionFieldSelectValueChoiceCustomOptionType;
(function (AssetOptionFieldSelectValueChoiceCustomOptionType) {
    AssetOptionFieldSelectValueChoiceCustomOptionType["Option"] = "option";
})(AssetOptionFieldSelectValueChoiceCustomOptionType || (exports.AssetOptionFieldSelectValueChoiceCustomOptionType = AssetOptionFieldSelectValueChoiceCustomOptionType = {}));
var AssetOptionFieldSelectValueChoiceStatOptionType;
(function (AssetOptionFieldSelectValueChoiceStatOptionType) {
    AssetOptionFieldSelectValueChoiceStatOptionType["Option"] = "option";
})(AssetOptionFieldSelectValueChoiceStatOptionType || (exports.AssetOptionFieldSelectValueChoiceStatOptionType = AssetOptionFieldSelectValueChoiceStatOptionType = {}));
var DelveSiteDenizenFrequency;
(function (DelveSiteDenizenFrequency) {
    DelveSiteDenizenFrequency["Common"] = "common";
    DelveSiteDenizenFrequency["Rare"] = "rare";
    DelveSiteDenizenFrequency["Uncommon"] = "uncommon";
    DelveSiteDenizenFrequency["Unforeseen"] = "unforeseen";
    DelveSiteDenizenFrequency["VeryCommon"] = "very_common";
})(DelveSiteDenizenFrequency || (exports.DelveSiteDenizenFrequency = DelveSiteDenizenFrequency = {}));
var MoveOutcomeType;
(function (MoveOutcomeType) {
    /**
     * The score doesn't beat either challenge die.
     */
    MoveOutcomeType["Miss"] = "miss";
    /**
     * The score is greater than both challenge dice.
     */
    MoveOutcomeType["StrongHit"] = "strong_hit";
    /**
     * The score is greater than one challenge die.
     */
    MoveOutcomeType["WeakHit"] = "weak_hit";
})(MoveOutcomeType || (exports.MoveOutcomeType = MoveOutcomeType = {}));
var MoveRollType;
(function (MoveRollType) {
    /**
     * A move that makes an action roll.
     */
    MoveRollType["ActionRoll"] = "action_roll";
    /**
     * A move that makes no action rolls or progress rolls.
     */
    MoveRollType["NoRoll"] = "no_roll";
    /**
     * A progress move that rolls on a standard progress track type (defined by
     * this move).
     */
    MoveRollType["ProgressRoll"] = "progress_roll";
    /**
     * A progress move that rolls on one or more special tracks, like Bonds
     * (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
     */
    MoveRollType["SpecialTrack"] = "special_track";
})(MoveRollType || (exports.MoveRollType = MoveRollType = {}));
var OracleCollectionStyle;
(function (OracleCollectionStyle) {
    /**
     * Presented as a single table, with its OracleTable children rendered as
     * columns.
     */
    OracleCollectionStyle["MultiTable"] = "multi_table";
    /**
     * Presented as a collection of separate tables.
     */
    OracleCollectionStyle["Tables"] = "tables";
})(OracleCollectionStyle || (exports.OracleCollectionStyle = OracleCollectionStyle = {}));
/**
 * The value(s) from each OracleTableRow that is rendered in this column.
 */
var OracleTableColumnContentKey;
(function (OracleTableColumnContentKey) {
    /**
     * Column displays the OracleTableRow's `description` key.
     */
    OracleTableColumnContentKey["Description"] = "description";
    /**
     * Column displays the OracleTableRow's `result` key.
     */
    OracleTableColumnContentKey["Result"] = "result";
    /**
     * Column displays the roll range (`min` and `max`) of each OracleTableRow.
     */
    OracleTableColumnContentKey["Roll"] = "roll";
    /**
     * Column displays the OracleTableRow's `summary` key.
     */
    OracleTableColumnContentKey["Summary"] = "summary";
})(OracleTableColumnContentKey || (exports.OracleTableColumnContentKey = OracleTableColumnContentKey = {}));
/**
 * Special roll instructions to use when rolling multiple times on a single
 * oracle table.
 */
var OracleTableRollMethod;
(function (OracleTableRollMethod) {
    /**
     * Duplicates should be kept.
     */
    OracleTableRollMethod["KeepDuplicates"] = "keep_duplicates";
    /**
     * Duplicates should be kept, and they compound to make things worse.
     */
    OracleTableRollMethod["MakeItWorse"] = "make_it_worse";
    /**
     * Duplicates should be re-rolled.
     */
    OracleTableRollMethod["NoDuplicates"] = "no_duplicates";
})(OracleTableRollMethod || (exports.OracleTableRollMethod = OracleTableRollMethod = {}));
var OracleTableStyle;
(function (OracleTableStyle) {
    /**
     * Render as a single column of a table.
     */
    OracleTableStyle["Column"] = "column";
    /**
     * Render as a table, within a row in another table.
     */
    OracleTableStyle["EmbedInRow"] = "embed_in_row";
    /**
     * Render as a standalone table.
     */
    OracleTableStyle["Standalone"] = "standalone";
})(OracleTableStyle || (exports.OracleTableStyle = OracleTableStyle = {}));
var PartOfSpeech;
(function (PartOfSpeech) {
    /**
     * An adjective.
     */
    PartOfSpeech["Adjective"] = "adjective";
    /**
     * A common noun used as an adjective, to modify another noun.
     */
    PartOfSpeech["AdjunctCommonNoun"] = "adjunct_common_noun";
    /**
     * A proper noun used as an adjective, to modify another noun.
     */
    PartOfSpeech["AdjunctProperNoun"] = "adjunct_proper_noun";
    /**
     * A verb used as an adjective, to modify a noun.
     */
    PartOfSpeech["AttributiveVerb"] = "attributive_verb";
    /**
     * A common noun.
     */
    PartOfSpeech["CommonNoun"] = "common_noun";
    /**
     * Gerund or present participle of a verb, e.g. "going", "seeing", "waving"
     */
    PartOfSpeech["Gerund"] = "gerund";
    /**
     * A proper noun.
     */
    PartOfSpeech["ProperNoun"] = "proper_noun";
    /**
     * A verb in present tense
     */
    PartOfSpeech["Verb"] = "verb";
})(PartOfSpeech || (exports.PartOfSpeech = PartOfSpeech = {}));
var ProgressRollMethod;
(function (ProgressRollMethod) {
    /**
     * An automatic miss.
     */
    ProgressRollMethod["Miss"] = "miss";
    /**
     * Make a progress roll on a progress track associated with this move.
     */
    ProgressRollMethod["ProgressRoll"] = "progress_roll";
    /**
     * An automatic strong hit.
     */
    ProgressRollMethod["StrongHit"] = "strong_hit";
    /**
     * An automatic weak hit.
     */
    ProgressRollMethod["WeakHit"] = "weak_hit";
})(ProgressRollMethod || (exports.ProgressRollMethod = ProgressRollMethod = {}));
var ProgressRollOptionUsing;
(function (ProgressRollOptionUsing) {
    ProgressRollOptionUsing["ProgressTrack"] = "progress_track";
})(ProgressRollOptionUsing || (exports.ProgressRollOptionUsing = ProgressRollOptionUsing = {}));
var RollableValueType;
(function (RollableValueType) {
    /**
     * A reference to the value of an asset control.
     */
    RollableValueType["AssetControl"] = "asset_control";
    /**
     * A reference to the value of an asset option.
     */
    RollableValueType["AssetOption"] = "asset_option";
    /**
     * A reference to the value of an attached asset control. For example, a
     * Module asset could use this to roll using the `integrity` control of an
     * attached Vehicle.
     */
    RollableValueType["AttachedAssetControl"] = "attached_asset_control";
    /**
     * A reference to the value of an attached asset option.
     */
    RollableValueType["AttachedAssetOption"] = "attached_asset_option";
    /**
     * A reference to the value of a standard player condition meter.
     */
    RollableValueType["ConditionMeter"] = "condition_meter";
    /**
     * An arbitrary static integer value with a label.
     */
    RollableValueType["Custom"] = "custom";
    /**
     * A reference to the value of a standard player character stat.
     */
    RollableValueType["Stat"] = "stat";
})(RollableValueType || (exports.RollableValueType = RollableValueType = {}));
var SpecialTrackRollMethod;
(function (SpecialTrackRollMethod) {
    /**
     * Use **every** roll option at once.
     */
    SpecialTrackRollMethod["All"] = "all";
    /**
     * Use the roll option with the best/highest value.
     */
    SpecialTrackRollMethod["Highest"] = "highest";
    /**
     * Use the roll option with the worst/lowest value.
     */
    SpecialTrackRollMethod["Lowest"] = "lowest";
    /**
     * An automatic miss.
     */
    SpecialTrackRollMethod["Miss"] = "miss";
    /**
     * The player chooses which roll option to use.
     */
    SpecialTrackRollMethod["PlayerChoice"] = "player_choice";
    /**
     * An automatic strong hit.
     */
    SpecialTrackRollMethod["StrongHit"] = "strong_hit";
    /**
     * An automatic weak hit.
     */
    SpecialTrackRollMethod["WeakHit"] = "weak_hit";
})(SpecialTrackRollMethod || (exports.SpecialTrackRollMethod = SpecialTrackRollMethod = {}));
