// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Datasworn;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * Describes a standard player character condition meter.
 */
@JsonSerialize
public class ConditionMeterRule {
    @JsonProperty("description")
    private MarkdownString description;

    @JsonProperty("label")
    private Label label;

    @JsonProperty("max")
    private Byte max;

    @JsonProperty("min")
    private Byte min;

    @JsonProperty("shared")
    private Boolean shared;

    @JsonProperty("value")
    private Byte value;

    public ConditionMeterRule() {
    }

    /**
     * Getter for description.<p>
     * A description of this condition meter.
     */
    public MarkdownString getDescription() {
        return description;
    }

    /**
     * Setter for description.<p>
     * A description of this condition meter.
     */
    public void setDescription(MarkdownString description) {
        this.description = description;
    }

    /**
     * Getter for label.<p>
     * A localized label for this input. In some contexts it may be undesirable
     * to render this text, but it should always be exposed to assistive
     * technology (e.g. with `aria-label` in HTML).
     */
    public Label getLabel() {
        return label;
    }

    /**
     * Setter for label.<p>
     * A localized label for this input. In some contexts it may be undesirable
     * to render this text, but it should always be exposed to assistive
     * technology (e.g. with `aria-label` in HTML).
     */
    public void setLabel(Label label) {
        this.label = label;
    }

    /**
     * Getter for max.<p>
     * The maximum value of this meter.
     */
    public Byte getMax() {
        return max;
    }

    /**
     * Setter for max.<p>
     * The maximum value of this meter.
     */
    public void setMax(Byte max) {
        this.max = max;
    }

    /**
     * Getter for min.<p>
     * The minimum value of this meter.
     */
    public Byte getMin() {
        return min;
    }

    /**
     * Setter for min.<p>
     * The minimum value of this meter.
     */
    public void setMin(Byte min) {
        this.min = min;
    }

    /**
     * Getter for shared.<p>
     * Is this condition meter shared by all players?
     */
    public Boolean getShared() {
        return shared;
    }

    /**
     * Setter for shared.<p>
     * Is this condition meter shared by all players?
     */
    public void setShared(Boolean shared) {
        this.shared = shared;
    }

    /**
     * Getter for value.<p>
     * The current value of this meter.
     */
    public Byte getValue() {
        return value;
    }

    /**
     * Setter for value.<p>
     * The current value of this meter.
     */
    public void setValue(Byte value) {
        this.value = value;
    }
}
