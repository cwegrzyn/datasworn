// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Datasworn;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * A counter that starts at zero, with an optional maximum value.
 */
@JsonSerialize
public class AssetAbilityControlFieldCounter extends AssetAbilityControlField {
    @JsonProperty("id")
    private AssetAbilityControlFieldId id;

    @JsonProperty("max")
    private Short max;

    @JsonProperty("min")
    private UnsignedByte min;

    @JsonProperty("name")
    private Label name;

    @JsonProperty("value")
    private Short value;

    public AssetAbilityControlFieldCounter() {
    }

    /**
     * Getter for id.<p>
     */
    public AssetAbilityControlFieldId getId() {
        return id;
    }

    /**
     * Setter for id.<p>
     */
    public void setId(AssetAbilityControlFieldId id) {
        this.id = id;
    }

    /**
     * Getter for max.<p>
     */
    public Short getMax() {
        return max;
    }

    /**
     * Setter for max.<p>
     */
    public void setMax(Short max) {
        this.max = max;
    }

    /**
     * Getter for min.<p>
     * The (inclusive) minimum value.
     */
    public UnsignedByte getMin() {
        return min;
    }

    /**
     * Setter for min.<p>
     * The (inclusive) minimum value.
     */
    public void setMin(UnsignedByte min) {
        this.min = min;
    }

    /**
     * Getter for name.<p>
     * A label for this input. In some contexts it may be undesirable to render
     * this text, but it should always be exposed to assistive technology (e.g.
     * with `aria-label` in HTML).
     */
    public Label getName() {
        return name;
    }

    /**
     * Setter for name.<p>
     * A label for this input. In some contexts it may be undesirable to render
     * this text, but it should always be exposed to assistive technology (e.g.
     * with `aria-label` in HTML).
     */
    public void setName(Label name) {
        this.name = name;
    }

    /**
     * Getter for value.<p>
     * The current value of this input.
     */
    public Short getValue() {
        return value;
    }

    /**
     * Setter for value.<p>
     * The current value of this input.
     */
    public void setValue(Short value) {
        this.value = value;
    }
}
