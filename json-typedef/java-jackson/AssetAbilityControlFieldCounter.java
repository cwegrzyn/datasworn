// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Datasworn;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * A basic counter representing a non-rollable integer value. They usually start
 * at 0, and may or may not have a maximum.
 */
@JsonSerialize
public class AssetAbilityControlFieldCounter extends AssetAbilityControlField {
    @JsonProperty("id")
    private AssetAbilityControlFieldId id;

    @JsonProperty("label")
    private InputLabel label;

    @JsonProperty("max")
    private Short max;

    @JsonProperty("min")
    private Short min;

    @JsonProperty("value")
    private Short value;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("icon")
    private SvgImageUrl icon;

    public AssetAbilityControlFieldCounter() {
    }

    /**
     * Getter for id.<p>
     * The unique Datasworn ID for this item.
     */
    public AssetAbilityControlFieldId getId() {
        return id;
    }

    /**
     * Setter for id.<p>
     * The unique Datasworn ID for this item.
     */
    public void setId(AssetAbilityControlFieldId id) {
        this.id = id;
    }

    /**
     * Getter for label.<p>
     */
    public InputLabel getLabel() {
        return label;
    }

    /**
     * Setter for label.<p>
     */
    public void setLabel(InputLabel label) {
        this.label = label;
    }

    /**
     * Getter for max.<p>
     */
    public Short getMax() {
        return max;
    }

    /**
     * Setter for max.<p>
     */
    public void setMax(Short max) {
        this.max = max;
    }

    /**
     * Getter for min.<p>
     * The (inclusive) minimum value.
     */
    public Short getMin() {
        return min;
    }

    /**
     * Setter for min.<p>
     * The (inclusive) minimum value.
     */
    public void setMin(Short min) {
        this.min = min;
    }

    /**
     * Getter for value.<p>
     * The current value of this input.
     */
    public Short getValue() {
        return value;
    }

    /**
     * Setter for value.<p>
     * The current value of this input.
     */
    public void setValue(Short value) {
        this.value = value;
    }

    /**
     * Getter for icon.<p>
     * An icon associated with this input.
     */
    public SvgImageUrl getIcon() {
        return icon;
    }

    /**
     * Setter for icon.<p>
     * An icon associated with this input.
     */
    public void setIcon(SvgImageUrl icon) {
        this.icon = icon;
    }
}
