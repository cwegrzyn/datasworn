// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Datasworn;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.Map;

/**
 * A rarity, as described in Ironsworn: Delve.
 */
@JsonSerialize
public class Rarity {
    @JsonProperty("asset")
    private AssetId asset;

    @JsonProperty("description")
    private MarkdownString description;

    @JsonProperty("id")
    private RarityId id;

    @JsonProperty("name")
    private Label name;

    @JsonProperty("source")
    private SourceInfo source;

    @JsonProperty("xp_cost")
    private Short xpCost;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("canonical_name")
    private Label canonicalName;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("icon")
    private SvgImageUrl icon;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("suggestions")
    private Suggestions suggestions;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("tags")
    private Map<String, Map<String, Tag>> tags;

    public Rarity() {
    }

    /**
     * Getter for asset.<p>
     * The asset augmented by this rarity.
     */
    public AssetId getAsset() {
        return asset;
    }

    /**
     * Setter for asset.<p>
     * The asset augmented by this rarity.
     */
    public void setAsset(AssetId asset) {
        this.asset = asset;
    }

    /**
     * Getter for description.<p>
     */
    public MarkdownString getDescription() {
        return description;
    }

    /**
     * Setter for description.<p>
     */
    public void setDescription(MarkdownString description) {
        this.description = description;
    }

    /**
     * Getter for id.<p>
     * The unique Datasworn ID for this item.
     */
    public RarityId getId() {
        return id;
    }

    /**
     * Setter for id.<p>
     * The unique Datasworn ID for this item.
     */
    public void setId(RarityId id) {
        this.id = id;
    }

    /**
     * Getter for name.<p>
     * The primary name/label for this item.
     */
    public Label getName() {
        return name;
    }

    /**
     * Setter for name.<p>
     * The primary name/label for this item.
     */
    public void setName(Label name) {
        this.name = name;
    }

    /**
     * Getter for source.<p>
     * Attribution for the original source (such as a book or website) of this
     * item, including the author and licensing information.
     */
    public SourceInfo getSource() {
        return source;
    }

    /**
     * Setter for source.<p>
     * Attribution for the original source (such as a book or website) of this
     * item, including the author and licensing information.
     */
    public void setSource(SourceInfo source) {
        this.source = source;
    }

    /**
     * Getter for xpCost.<p>
     * From Ironsworn: Delve, p. 174:
     * 
     *       Some assets will bring a rarity into play more often than others,
     * so the experience point cost for a rarity will vary by the linked asset.
     * These costs are shown in the tables on page 175.
     * 
     *       If you are playing solo, and aren’t concerned with the relative
     * balance of rarity abilities, you can ignore these variable costs. If so,
     * spend 3 experience points to purchase a rarity.
     */
    public Short getXpCost() {
        return xpCost;
    }

    /**
     * Setter for xpCost.<p>
     * From Ironsworn: Delve, p. 174:
     * 
     *       Some assets will bring a rarity into play more often than others,
     * so the experience point cost for a rarity will vary by the linked asset.
     * These costs are shown in the tables on page 175.
     * 
     *       If you are playing solo, and aren’t concerned with the relative
     * balance of rarity abilities, you can ignore these variable costs. If so,
     * spend 3 experience points to purchase a rarity.
     */
    public void setXpCost(Short xpCost) {
        this.xpCost = xpCost;
    }

    /**
     * Getter for canonicalName.<p>
     * The name of this item as it appears on the page in the book, if it's
     * different from `name`.
     */
    public Label getCanonicalName() {
        return canonicalName;
    }

    /**
     * Setter for canonicalName.<p>
     * The name of this item as it appears on the page in the book, if it's
     * different from `name`.
     */
    public void setCanonicalName(Label canonicalName) {
        this.canonicalName = canonicalName;
    }

    /**
     * Getter for icon.<p>
     */
    public SvgImageUrl getIcon() {
        return icon;
    }

    /**
     * Setter for icon.<p>
     */
    public void setIcon(SvgImageUrl icon) {
        this.icon = icon;
    }

    /**
     * Getter for suggestions.<p>
     */
    public Suggestions getSuggestions() {
        return suggestions;
    }

    /**
     * Setter for suggestions.<p>
     */
    public void setSuggestions(Suggestions suggestions) {
        this.suggestions = suggestions;
    }

    /**
     * Getter for tags.<p>
     */
    public Map<String, Map<String, Tag>> getTags() {
        return tags;
    }

    /**
     * Setter for tags.<p>
     */
    public void setTags(Map<String, Map<String, Tag>> tags) {
        this.tags = tags;
    }
}
