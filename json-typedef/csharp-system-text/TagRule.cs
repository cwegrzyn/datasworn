// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(TagRuleJsonConverter))]
    public abstract class TagRule
    {
    }

    public class TagRuleJsonConverter : JsonConverter<TagRule>
    {
        public override TagRule Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("value_type").GetString();

            switch (tagValue)
            {
                case "Asset":
                    return JsonSerializer.Deserialize<TagRuleAsset>(ref readerCopy, options);
                case "AssetCollection":
                    return JsonSerializer.Deserialize<TagRuleAssetCollection>(ref readerCopy, options);
                case "AtlasCollection":
                    return JsonSerializer.Deserialize<TagRuleAtlasCollection>(ref readerCopy, options);
                case "AtlasEntry":
                    return JsonSerializer.Deserialize<TagRuleAtlasEntry>(ref readerCopy, options);
                case "DelveSite":
                    return JsonSerializer.Deserialize<TagRuleDelveSite>(ref readerCopy, options);
                case "DelveSiteDomain":
                    return JsonSerializer.Deserialize<TagRuleDelveSiteDomain>(ref readerCopy, options);
                case "DelveSiteTheme":
                    return JsonSerializer.Deserialize<TagRuleDelveSiteTheme>(ref readerCopy, options);
                case "Move":
                    return JsonSerializer.Deserialize<TagRuleMove>(ref readerCopy, options);
                case "MoveCategory":
                    return JsonSerializer.Deserialize<TagRuleMoveCategory>(ref readerCopy, options);
                case "Npc":
                    return JsonSerializer.Deserialize<TagRuleNpc>(ref readerCopy, options);
                case "NpcCollection":
                    return JsonSerializer.Deserialize<TagRuleNpcCollection>(ref readerCopy, options);
                case "OracleCollection":
                    return JsonSerializer.Deserialize<TagRuleOracleCollection>(ref readerCopy, options);
                case "OracleRollable":
                    return JsonSerializer.Deserialize<TagRuleOracleRollable>(ref readerCopy, options);
                case "Rarity":
                    return JsonSerializer.Deserialize<TagRuleRarity>(ref readerCopy, options);
                case "Truth":
                    return JsonSerializer.Deserialize<TagRuleTruth>(ref readerCopy, options);
                case "boolean":
                    return JsonSerializer.Deserialize<TagRuleBoolean>(ref readerCopy, options);
                case "enum":
                    return JsonSerializer.Deserialize<TagRuleEnum>(ref readerCopy, options);
                case "integer":
                    return JsonSerializer.Deserialize<TagRuleInteger>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad ValueType_ value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, TagRule value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
