// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Datasworn
{
    /// <summary>
    /// A delve site with a theme, domain, and denizen table.
    /// </summary>
    public class DelveSite
    {
        [JsonPropertyName("denizens")]
        public IList<DelveSiteDenizen> Denizens { get; set; }

        [JsonPropertyName("description")]
        public MarkdownString Description { get; set; }

        [JsonPropertyName("domain")]
        public DelveSiteDomainId Domain { get; set; }

        [JsonPropertyName("id")]
        public DelveSiteId Id { get; set; }

        [JsonPropertyName("name")]
        public Label Name { get; set; }

        [JsonPropertyName("rank")]
        public ChallengeRank Rank { get; set; }

        [JsonPropertyName("source")]
        public Source Source { get; set; }

        [JsonPropertyName("theme")]
        public DelveSiteThemeId Theme { get; set; }

        [JsonPropertyName("canonical_name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Label? CanonicalName { get; set; }

        /// <summary>
        /// An additional theme or domain card ID, for use with optional rules
        /// in Ironsworn: Delve.
        /// </summary>
        [JsonPropertyName("extra_card")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string ExtraCard { get; set; }

        [JsonPropertyName("icon")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public SvgImageUrl? Icon { get; set; }

        /// <summary>
        /// The ID of an atlas entry representing the region in which this delve
        /// site is located.
        /// </summary>
        [JsonPropertyName("region")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public AtlasEntryId? Region { get; set; }

        [JsonPropertyName("suggestions")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Suggestions? Suggestions { get; set; }
    }
}
