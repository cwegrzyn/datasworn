// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(TaggableNodeTypeJsonConverter))]
    public enum TaggableNodeType
    {
        Ability,

        Asset,

        AssetCollection,

        AtlasCollection,

        AtlasEntry,

        Danger,

        DelveSite,

        DelveSiteDomain,

        DelveSiteTheme,

        Denizen,

        Feature,

        Move,

        MoveCategory,

        Npc,

        NpcCollection,

        Option,

        OracleCollection,

        OracleRollable,

        Rarity,

        Row,

        Truth,

        Variant,
    }
    public class TaggableNodeTypeJsonConverter : JsonConverter<TaggableNodeType>
    {
        public override TaggableNodeType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "ability":
                    return TaggableNodeType.Ability;
                case "asset":
                    return TaggableNodeType.Asset;
                case "asset_collection":
                    return TaggableNodeType.AssetCollection;
                case "atlas_collection":
                    return TaggableNodeType.AtlasCollection;
                case "atlas_entry":
                    return TaggableNodeType.AtlasEntry;
                case "danger":
                    return TaggableNodeType.Danger;
                case "delve_site":
                    return TaggableNodeType.DelveSite;
                case "delve_site_domain":
                    return TaggableNodeType.DelveSiteDomain;
                case "delve_site_theme":
                    return TaggableNodeType.DelveSiteTheme;
                case "denizen":
                    return TaggableNodeType.Denizen;
                case "feature":
                    return TaggableNodeType.Feature;
                case "move":
                    return TaggableNodeType.Move;
                case "move_category":
                    return TaggableNodeType.MoveCategory;
                case "npc":
                    return TaggableNodeType.Npc;
                case "npc_collection":
                    return TaggableNodeType.NpcCollection;
                case "option":
                    return TaggableNodeType.Option;
                case "oracle_collection":
                    return TaggableNodeType.OracleCollection;
                case "oracle_rollable":
                    return TaggableNodeType.OracleRollable;
                case "rarity":
                    return TaggableNodeType.Rarity;
                case "row":
                    return TaggableNodeType.Row;
                case "truth":
                    return TaggableNodeType.Truth;
                case "variant":
                    return TaggableNodeType.Variant;
                default:
                    throw new ArgumentException(String.Format("Bad TaggableNodeType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, TaggableNodeType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case TaggableNodeType.Ability:
                    JsonSerializer.Serialize<string>(writer, "ability", options);
                    return;
                case TaggableNodeType.Asset:
                    JsonSerializer.Serialize<string>(writer, "asset", options);
                    return;
                case TaggableNodeType.AssetCollection:
                    JsonSerializer.Serialize<string>(writer, "asset_collection", options);
                    return;
                case TaggableNodeType.AtlasCollection:
                    JsonSerializer.Serialize<string>(writer, "atlas_collection", options);
                    return;
                case TaggableNodeType.AtlasEntry:
                    JsonSerializer.Serialize<string>(writer, "atlas_entry", options);
                    return;
                case TaggableNodeType.Danger:
                    JsonSerializer.Serialize<string>(writer, "danger", options);
                    return;
                case TaggableNodeType.DelveSite:
                    JsonSerializer.Serialize<string>(writer, "delve_site", options);
                    return;
                case TaggableNodeType.DelveSiteDomain:
                    JsonSerializer.Serialize<string>(writer, "delve_site_domain", options);
                    return;
                case TaggableNodeType.DelveSiteTheme:
                    JsonSerializer.Serialize<string>(writer, "delve_site_theme", options);
                    return;
                case TaggableNodeType.Denizen:
                    JsonSerializer.Serialize<string>(writer, "denizen", options);
                    return;
                case TaggableNodeType.Feature:
                    JsonSerializer.Serialize<string>(writer, "feature", options);
                    return;
                case TaggableNodeType.Move:
                    JsonSerializer.Serialize<string>(writer, "move", options);
                    return;
                case TaggableNodeType.MoveCategory:
                    JsonSerializer.Serialize<string>(writer, "move_category", options);
                    return;
                case TaggableNodeType.Npc:
                    JsonSerializer.Serialize<string>(writer, "npc", options);
                    return;
                case TaggableNodeType.NpcCollection:
                    JsonSerializer.Serialize<string>(writer, "npc_collection", options);
                    return;
                case TaggableNodeType.Option:
                    JsonSerializer.Serialize<string>(writer, "option", options);
                    return;
                case TaggableNodeType.OracleCollection:
                    JsonSerializer.Serialize<string>(writer, "oracle_collection", options);
                    return;
                case TaggableNodeType.OracleRollable:
                    JsonSerializer.Serialize<string>(writer, "oracle_rollable", options);
                    return;
                case TaggableNodeType.Rarity:
                    JsonSerializer.Serialize<string>(writer, "rarity", options);
                    return;
                case TaggableNodeType.Row:
                    JsonSerializer.Serialize<string>(writer, "row", options);
                    return;
                case TaggableNodeType.Truth:
                    JsonSerializer.Serialize<string>(writer, "truth", options);
                    return;
                case TaggableNodeType.Variant:
                    JsonSerializer.Serialize<string>(writer, "variant", options);
                    return;
            }
        }
    }
}
