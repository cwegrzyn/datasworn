// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System.Text.Json.Serialization;

namespace Datasworn
{
    public class EmbeddedNoRollMove
    {
        [JsonPropertyName("_id")]
        public EmbeddedMoveId Id { get; set; }

        /// <summary>
        /// Is burning momentum allowed for this move?
        /// </summary>
        [JsonPropertyName("allow_momentum_burn")]
        public bool AllowMomentumBurn { get; set; }

        /// <summary>
        /// The primary name/label for this item.
        /// </summary>
        [JsonPropertyName("name")]
        public Label Name { get; set; }

        /// <summary>
        /// A move that makes no action rolls or progress rolls.
        /// </summary>
        [JsonPropertyName("roll_type")]
        public EmbeddedNoRollMoveRollType RollType { get; set; }

        /// <summary>
        /// The complete rules text of the move.
        /// </summary>
        [JsonPropertyName("text")]
        public MarkdownString Text { get; set; }

        /// <summary>
        /// Trigger conditions for this move.
        /// </summary>
        [JsonPropertyName("trigger")]
        public TriggerNoRoll Trigger { get; set; }

        [JsonPropertyName("type")]
        public EmbeddedNoRollMoveType Type_ { get; set; }

        /// <summary>
        /// Implementation hints or other developer-facing comments on this
        /// object. These should be omitted when presenting the object for
        /// gameplay.
        /// </summary>
        [JsonPropertyName("_comment")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string Comment { get; set; }

        /// <summary>
        /// The name of this item as it appears on the page in the book, if it's
        /// different from `name`.
        /// </summary>
        [JsonPropertyName("canonical_name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Label? CanonicalName { get; set; }

        [JsonPropertyName("suggestions")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Suggestions? Suggestions { get; set; }

        [JsonPropertyName("tags")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Tags? Tags { get; set; }
    }
}
