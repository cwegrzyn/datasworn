// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(CollectionTypeJsonConverter))]
    public enum CollectionType
    {
        AssetCollection,

        AtlasCollection,

        MoveCategory,

        NpcCollection,

        OracleCollection,
    }
    public class CollectionTypeJsonConverter : JsonConverter<CollectionType>
    {
        public override CollectionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "asset_collection":
                    return CollectionType.AssetCollection;
                case "atlas_collection":
                    return CollectionType.AtlasCollection;
                case "move_category":
                    return CollectionType.MoveCategory;
                case "npc_collection":
                    return CollectionType.NpcCollection;
                case "oracle_collection":
                    return CollectionType.OracleCollection;
                default:
                    throw new ArgumentException(String.Format("Bad CollectionType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, CollectionType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case CollectionType.AssetCollection:
                    JsonSerializer.Serialize<string>(writer, "asset_collection", options);
                    return;
                case CollectionType.AtlasCollection:
                    JsonSerializer.Serialize<string>(writer, "atlas_collection", options);
                    return;
                case CollectionType.MoveCategory:
                    JsonSerializer.Serialize<string>(writer, "move_category", options);
                    return;
                case CollectionType.NpcCollection:
                    JsonSerializer.Serialize<string>(writer, "npc_collection", options);
                    return;
                case CollectionType.OracleCollection:
                    JsonSerializer.Serialize<string>(writer, "oracle_collection", options);
                    return;
            }
        }
    }
}
