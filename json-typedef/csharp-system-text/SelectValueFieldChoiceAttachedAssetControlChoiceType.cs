// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(SelectValueFieldChoiceAttachedAssetControlChoiceTypeJsonConverter))]
    public enum SelectValueFieldChoiceAttachedAssetControlChoiceType
    {
        Choice,
    }
    public class SelectValueFieldChoiceAttachedAssetControlChoiceTypeJsonConverter : JsonConverter<SelectValueFieldChoiceAttachedAssetControlChoiceType>
    {
        public override SelectValueFieldChoiceAttachedAssetControlChoiceType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "choice":
                    return SelectValueFieldChoiceAttachedAssetControlChoiceType.Choice;
                default:
                    throw new ArgumentException(String.Format("Bad SelectValueFieldChoiceAttachedAssetControlChoiceType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, SelectValueFieldChoiceAttachedAssetControlChoiceType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case SelectValueFieldChoiceAttachedAssetControlChoiceType.Choice:
                    JsonSerializer.Serialize<string>(writer, "choice", options);
                    return;
            }
        }
    }
}
