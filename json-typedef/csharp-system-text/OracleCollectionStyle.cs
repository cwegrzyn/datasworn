// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(OracleCollectionStyleJsonConverter))]
    public enum OracleCollectionStyle
    {
        /// <summary>
        /// Presented as a single table, with its OracleTable children rendered
        /// as columns.
        /// </summary>
        MultiTable,

        /// <summary>
        /// Presented as a collection of separate tables.
        /// </summary>
        Tables,
    }
    public class OracleCollectionStyleJsonConverter : JsonConverter<OracleCollectionStyle>
    {
        public override OracleCollectionStyle Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "multi_table":
                    return OracleCollectionStyle.MultiTable;
                case "tables":
                    return OracleCollectionStyle.Tables;
                default:
                    throw new ArgumentException(String.Format("Bad OracleCollectionStyle value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, OracleCollectionStyle value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case OracleCollectionStyle.MultiTable:
                    JsonSerializer.Serialize<string>(writer, "multi_table", options);
                    return;
                case OracleCollectionStyle.Tables:
                    JsonSerializer.Serialize<string>(writer, "tables", options);
                    return;
            }
        }
    }
}
