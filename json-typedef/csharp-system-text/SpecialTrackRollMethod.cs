// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(SpecialTrackRollMethodJsonConverter))]
    public enum SpecialTrackRollMethod
    {
        /// <summary>
        /// Use _every_ roll option at once.
        /// </summary>
        All,

        /// <summary>
        /// Use the roll option with the best/highest value.
        /// </summary>
        Highest,

        /// <summary>
        /// Use the roll option with the worst/lowest value.
        /// </summary>
        Lowest,

        /// <summary>
        /// An automatic miss.
        /// </summary>
        Miss,

        /// <summary>
        /// The player chooses which roll option to use.
        /// </summary>
        PlayerChoice,

        /// <summary>
        /// An automatic strong hit.
        /// </summary>
        StrongHit,

        /// <summary>
        /// An automatic weak hit.
        /// </summary>
        WeakHit,
    }
    public class SpecialTrackRollMethodJsonConverter : JsonConverter<SpecialTrackRollMethod>
    {
        public override SpecialTrackRollMethod Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "all":
                    return SpecialTrackRollMethod.All;
                case "highest":
                    return SpecialTrackRollMethod.Highest;
                case "lowest":
                    return SpecialTrackRollMethod.Lowest;
                case "miss":
                    return SpecialTrackRollMethod.Miss;
                case "player_choice":
                    return SpecialTrackRollMethod.PlayerChoice;
                case "strong_hit":
                    return SpecialTrackRollMethod.StrongHit;
                case "weak_hit":
                    return SpecialTrackRollMethod.WeakHit;
                default:
                    throw new ArgumentException(String.Format("Bad SpecialTrackRollMethod value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, SpecialTrackRollMethod value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case SpecialTrackRollMethod.All:
                    JsonSerializer.Serialize<string>(writer, "all", options);
                    return;
                case SpecialTrackRollMethod.Highest:
                    JsonSerializer.Serialize<string>(writer, "highest", options);
                    return;
                case SpecialTrackRollMethod.Lowest:
                    JsonSerializer.Serialize<string>(writer, "lowest", options);
                    return;
                case SpecialTrackRollMethod.Miss:
                    JsonSerializer.Serialize<string>(writer, "miss", options);
                    return;
                case SpecialTrackRollMethod.PlayerChoice:
                    JsonSerializer.Serialize<string>(writer, "player_choice", options);
                    return;
                case SpecialTrackRollMethod.StrongHit:
                    JsonSerializer.Serialize<string>(writer, "strong_hit", options);
                    return;
                case SpecialTrackRollMethod.WeakHit:
                    JsonSerializer.Serialize<string>(writer, "weak_hit", options);
                    return;
            }
        }
    }
}
