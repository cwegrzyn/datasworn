// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(ActionRollUsingJsonConverter))]
    public enum ActionRollUsing
    {
        AssetControl,

        AssetOption,

        AttachedAssetControl,

        AttachedAssetOption,

        ConditionMeter,

        Custom,

        Stat,
    }
    public class ActionRollUsingJsonConverter : JsonConverter<ActionRollUsing>
    {
        public override ActionRollUsing Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "asset_control":
                    return ActionRollUsing.AssetControl;
                case "asset_option":
                    return ActionRollUsing.AssetOption;
                case "attached_asset_control":
                    return ActionRollUsing.AttachedAssetControl;
                case "attached_asset_option":
                    return ActionRollUsing.AttachedAssetOption;
                case "condition_meter":
                    return ActionRollUsing.ConditionMeter;
                case "custom":
                    return ActionRollUsing.Custom;
                case "stat":
                    return ActionRollUsing.Stat;
                default:
                    throw new ArgumentException(String.Format("Bad ActionRollUsing value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, ActionRollUsing value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case ActionRollUsing.AssetControl:
                    JsonSerializer.Serialize<string>(writer, "asset_control", options);
                    return;
                case ActionRollUsing.AssetOption:
                    JsonSerializer.Serialize<string>(writer, "asset_option", options);
                    return;
                case ActionRollUsing.AttachedAssetControl:
                    JsonSerializer.Serialize<string>(writer, "attached_asset_control", options);
                    return;
                case ActionRollUsing.AttachedAssetOption:
                    JsonSerializer.Serialize<string>(writer, "attached_asset_option", options);
                    return;
                case ActionRollUsing.ConditionMeter:
                    JsonSerializer.Serialize<string>(writer, "condition_meter", options);
                    return;
                case ActionRollUsing.Custom:
                    JsonSerializer.Serialize<string>(writer, "custom", options);
                    return;
                case ActionRollUsing.Stat:
                    JsonSerializer.Serialize<string>(writer, "stat", options);
                    return;
            }
        }
    }
}
