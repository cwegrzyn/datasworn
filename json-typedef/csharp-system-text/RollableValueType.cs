// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(RollableValueTypeJsonConverter))]
    public enum RollableValueType
    {
        /// <summary>
        /// A reference to the value of an asset control.
        /// </summary>
        AssetControl,

        /// <summary>
        /// A reference to the value of an asset option.
        /// </summary>
        AssetOption,

        /// <summary>
        /// A reference to the value of an attached asset control. For example,
        /// a Module asset could use this to roll using the `integrity` control
        /// of an attached Vehicle.
        /// </summary>
        AttachedAssetControl,

        /// <summary>
        /// A reference to the value of an attached asset option.
        /// </summary>
        AttachedAssetOption,

        /// <summary>
        /// A reference to the value of a standard player condition meter.
        /// </summary>
        ConditionMeter,

        /// <summary>
        /// An arbitrary static integer value with a label.
        /// </summary>
        Custom,

        /// <summary>
        /// A reference to the value of a standard player character stat.
        /// </summary>
        Stat,
    }
    public class RollableValueTypeJsonConverter : JsonConverter<RollableValueType>
    {
        public override RollableValueType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "asset_control":
                    return RollableValueType.AssetControl;
                case "asset_option":
                    return RollableValueType.AssetOption;
                case "attached_asset_control":
                    return RollableValueType.AttachedAssetControl;
                case "attached_asset_option":
                    return RollableValueType.AttachedAssetOption;
                case "condition_meter":
                    return RollableValueType.ConditionMeter;
                case "custom":
                    return RollableValueType.Custom;
                case "stat":
                    return RollableValueType.Stat;
                default:
                    throw new ArgumentException(String.Format("Bad RollableValueType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, RollableValueType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case RollableValueType.AssetControl:
                    JsonSerializer.Serialize<string>(writer, "asset_control", options);
                    return;
                case RollableValueType.AssetOption:
                    JsonSerializer.Serialize<string>(writer, "asset_option", options);
                    return;
                case RollableValueType.AttachedAssetControl:
                    JsonSerializer.Serialize<string>(writer, "attached_asset_control", options);
                    return;
                case RollableValueType.AttachedAssetOption:
                    JsonSerializer.Serialize<string>(writer, "attached_asset_option", options);
                    return;
                case RollableValueType.ConditionMeter:
                    JsonSerializer.Serialize<string>(writer, "condition_meter", options);
                    return;
                case RollableValueType.Custom:
                    JsonSerializer.Serialize<string>(writer, "custom", options);
                    return;
                case RollableValueType.Stat:
                    JsonSerializer.Serialize<string>(writer, "stat", options);
                    return;
            }
        }
    }
}
