// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(PartOfSpeechJsonConverter))]
    public enum PartOfSpeech
    {
        /// <summary>
        /// An adjective.
        /// </summary>
        Adjective,

        /// <summary>
        /// An adjective used as a proper noun.
        /// </summary>
        AdjectiveAsProperNoun,

        /// <summary>
        /// A common noun used as an adjective, to modify another noun.
        /// </summary>
        AdjunctCommonNoun,

        /// <summary>
        /// A proper noun used as an adjective, to modify another noun.
        /// </summary>
        AdjunctProperNoun,

        /// <summary>
        /// A verb used as an adjective, to modify a noun.
        /// </summary>
        AttributiveVerb,

        /// <summary>
        /// A common noun.
        /// </summary>
        CommonNoun,

        /// <summary>
        /// An common noun used as a proper noun.
        /// </summary>
        CommonNounAsProperNoun,

        /// <summary>
        /// Gerund or present participle of a verb, e.g. "going", "seeing",
        /// "waving"
        /// </summary>
        Gerund,

        /// <summary>
        /// A proper noun.
        /// </summary>
        ProperNoun,

        /// <summary>
        /// A verb in present tense
        /// </summary>
        Verb,
    }
    public class PartOfSpeechJsonConverter : JsonConverter<PartOfSpeech>
    {
        public override PartOfSpeech Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "adjective":
                    return PartOfSpeech.Adjective;
                case "adjective_as_proper_noun":
                    return PartOfSpeech.AdjectiveAsProperNoun;
                case "adjunct_common_noun":
                    return PartOfSpeech.AdjunctCommonNoun;
                case "adjunct_proper_noun":
                    return PartOfSpeech.AdjunctProperNoun;
                case "attributive_verb":
                    return PartOfSpeech.AttributiveVerb;
                case "common_noun":
                    return PartOfSpeech.CommonNoun;
                case "common_noun_as_proper_noun":
                    return PartOfSpeech.CommonNounAsProperNoun;
                case "gerund":
                    return PartOfSpeech.Gerund;
                case "proper_noun":
                    return PartOfSpeech.ProperNoun;
                case "verb":
                    return PartOfSpeech.Verb;
                default:
                    throw new ArgumentException(String.Format("Bad PartOfSpeech value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, PartOfSpeech value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case PartOfSpeech.Adjective:
                    JsonSerializer.Serialize<string>(writer, "adjective", options);
                    return;
                case PartOfSpeech.AdjectiveAsProperNoun:
                    JsonSerializer.Serialize<string>(writer, "adjective_as_proper_noun", options);
                    return;
                case PartOfSpeech.AdjunctCommonNoun:
                    JsonSerializer.Serialize<string>(writer, "adjunct_common_noun", options);
                    return;
                case PartOfSpeech.AdjunctProperNoun:
                    JsonSerializer.Serialize<string>(writer, "adjunct_proper_noun", options);
                    return;
                case PartOfSpeech.AttributiveVerb:
                    JsonSerializer.Serialize<string>(writer, "attributive_verb", options);
                    return;
                case PartOfSpeech.CommonNoun:
                    JsonSerializer.Serialize<string>(writer, "common_noun", options);
                    return;
                case PartOfSpeech.CommonNounAsProperNoun:
                    JsonSerializer.Serialize<string>(writer, "common_noun_as_proper_noun", options);
                    return;
                case PartOfSpeech.Gerund:
                    JsonSerializer.Serialize<string>(writer, "gerund", options);
                    return;
                case PartOfSpeech.ProperNoun:
                    JsonSerializer.Serialize<string>(writer, "proper_noun", options);
                    return;
                case PartOfSpeech.Verb:
                    JsonSerializer.Serialize<string>(writer, "verb", options);
                    return;
            }
        }
    }
}
