// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    /// <summary>
    /// A collection of table rows from which random results may be rolled. This
    /// may represent a standalone table, or a column in a larger table.
    /// </summary>
    [JsonConverter(typeof(OracleRollableJsonConverter))]
    public abstract class OracleRollable
    {
    }

    public class OracleRollableJsonConverter : JsonConverter<OracleRollable>
    {
        public override OracleRollable Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("oracle_type").GetString();

            switch (tagValue)
            {
                case "column_text":
                    return JsonSerializer.Deserialize<OracleRollableColumnText>(ref readerCopy, options);
                case "column_text2":
                    return JsonSerializer.Deserialize<OracleRollableColumnText2>(ref readerCopy, options);
                case "column_text3":
                    return JsonSerializer.Deserialize<OracleRollableColumnText3>(ref readerCopy, options);
                case "table_text":
                    return JsonSerializer.Deserialize<OracleRollableTableText>(ref readerCopy, options);
                case "table_text2":
                    return JsonSerializer.Deserialize<OracleRollableTableText2>(ref readerCopy, options);
                case "table_text3":
                    return JsonSerializer.Deserialize<OracleRollableTableText3>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad OracleType value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, OracleRollable value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
