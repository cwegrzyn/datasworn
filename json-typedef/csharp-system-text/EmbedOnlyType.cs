// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(EmbedOnlyTypeJsonConverter))]
    public enum EmbedOnlyType
    {
        Ability,

        Danger,

        Denizen,

        Feature,

        Option,

        Row,
    }
    public class EmbedOnlyTypeJsonConverter : JsonConverter<EmbedOnlyType>
    {
        public override EmbedOnlyType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "ability":
                    return EmbedOnlyType.Ability;
                case "danger":
                    return EmbedOnlyType.Danger;
                case "denizen":
                    return EmbedOnlyType.Denizen;
                case "feature":
                    return EmbedOnlyType.Feature;
                case "option":
                    return EmbedOnlyType.Option;
                case "row":
                    return EmbedOnlyType.Row;
                default:
                    throw new ArgumentException(String.Format("Bad EmbedOnlyType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, EmbedOnlyType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case EmbedOnlyType.Ability:
                    JsonSerializer.Serialize<string>(writer, "ability", options);
                    return;
                case EmbedOnlyType.Danger:
                    JsonSerializer.Serialize<string>(writer, "danger", options);
                    return;
                case EmbedOnlyType.Denizen:
                    JsonSerializer.Serialize<string>(writer, "denizen", options);
                    return;
                case EmbedOnlyType.Feature:
                    JsonSerializer.Serialize<string>(writer, "feature", options);
                    return;
                case EmbedOnlyType.Option:
                    JsonSerializer.Serialize<string>(writer, "option", options);
                    return;
                case EmbedOnlyType.Row:
                    JsonSerializer.Serialize<string>(writer, "row", options);
                    return;
            }
        }
    }
}
