// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(MoveOutcomeTypeJsonConverter))]
    public enum MoveOutcomeType
    {
        Miss,

        StrongHit,

        WeakHit,
    }
    public class MoveOutcomeTypeJsonConverter : JsonConverter<MoveOutcomeType>
    {
        public override MoveOutcomeType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "miss":
                    return MoveOutcomeType.Miss;
                case "strong_hit":
                    return MoveOutcomeType.StrongHit;
                case "weak_hit":
                    return MoveOutcomeType.WeakHit;
                default:
                    throw new ArgumentException(String.Format("Bad MoveOutcomeType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, MoveOutcomeType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case MoveOutcomeType.Miss:
                    JsonSerializer.Serialize<string>(writer, "miss", options);
                    return;
                case MoveOutcomeType.StrongHit:
                    JsonSerializer.Serialize<string>(writer, "strong_hit", options);
                    return;
                case MoveOutcomeType.WeakHit:
                    JsonSerializer.Serialize<string>(writer, "weak_hit", options);
                    return;
            }
        }
    }
}
