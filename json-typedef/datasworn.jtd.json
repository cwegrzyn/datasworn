{
	"discriminator": "package_type",
	"mapping": {
		"ruleset": {
			"properties": {
				"id": {
					"ref": "RulesetId"
				},
				"rules": {
					"ref": "Rules"
				},
				"datasworn_version": {
					"ref": "SemanticVersion"
				},
				"oracles": {
					"values": {
						"ref": "OracleCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetType"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing asset types, which contain assets."
					}
				}
			},
			"optionalProperties": {
				"atlas": {
					"values": {
						"ref": "Atlas"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site domains."
					}
				}
			}
		},
		"expansion": {
			"properties": {
				"id": {
					"ref": "ExpansionId"
				},
				"datasworn_version": {
					"ref": "SemanticVersion"
				},
				"ruleset": {
					"ref": "RulesetId"
				}
			},
			"optionalProperties": {
				"rules": {
					"ref": "Rules"
				},
				"oracles": {
					"values": {
						"ref": "OracleCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetType"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing asset types, which contain assets."
					}
				},
				"atlas": {
					"values": {
						"ref": "Atlas"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site domains."
					}
				}
			}
		}
	},
	"metadata": {
		"description": "Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin."
	},
	"definitions": {
		"AssetAbilityControlFieldId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)\\/controls\\/([a-z][a-z_]*)$"
			}
		},
		"AssetAbilityId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)$"
			}
		},
		"AssetAbilityOptionFieldId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)\\/options\\/([a-z][a-z_]*)$"
			}
		},
		"AssetConditionMeterControlFieldId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)$"
			}
		},
		"AssetControlFieldId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)$"
			}
		},
		"AssetControlFieldIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))\\/controls\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"AssetId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
			}
		},
		"AssetIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"AssetOptionFieldId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/options\\/([a-z][a-z_]*)$"
			}
		},
		"AssetOptionFieldIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))\\/options\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"AssetTypeId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/assets\\/([a-z][a-z_]*)$"
			}
		},
		"AtlasEntryId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/atlas/ironlands/hinterlands"
				],
				"pattern": "^([a-z0-9_]{3,})\\/atlas\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
			}
		},
		"AtlasEntryIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/atlas\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"AtlasId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/collections/atlas/ironlands"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/atlas\\/([a-z][a-z_]*)$"
			}
		},
		"AtlasIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/collections\\/atlas\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"ConditionMeterRuleId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/rules/condition_meters/health",
					"starforged/rules/condition_meters/spirit"
				],
				"pattern": "^([a-z0-9_]{3,})\\/rules\\/condition_meters\\/([a-z][a-z_]*)$"
			}
		},
		"DelveSiteDenizenId": {
			"type": "string",
			"metadata": {
				"examples": [
					"delve/delve_sites/alvas_rest/denizens/1-27"
				],
				"pattern": "^([a-z0-9_]{3,})\\/delve_sites\\/([a-z][a-z_]*)\\/denizens\\/([1-9][0-9]*)-([1-9][0-9]*)$"
			}
		},
		"DelveSiteDomainId": {
			"type": "string",
			"metadata": {
				"examples": [
					"delve/site_domains/shadowfen"
				],
				"pattern": "^([a-z0-9_]{3,})\\/site_domains\\/([a-z][a-z_]*)$"
			}
		},
		"DelveSiteId": {
			"type": "string",
			"metadata": {
				"examples": [
					"delve/delve_sites/alvas_rest"
				],
				"pattern": "^([a-z0-9_]{3,})\\/delve_sites\\/([a-z][a-z_]*)$"
			}
		},
		"DelveSiteThemeId": {
			"type": "string",
			"metadata": {
				"examples": [
					"delve/site_themes/hallowed"
				],
				"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)$"
			}
		},
		"DictKey": {
			"type": "string",
			"metadata": {
				"description": "A key used in a Datasworn dictionary object.",
				"pattern": "^([a-z][a-z_]*)$"
			}
		},
		"DomainDangerRowId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/site_domains\\/([a-z][a-z_]*)\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$"
			}
		},
		"DomainFeatureRowId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/site_domains\\/([a-z][a-z_]*)\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$"
			}
		},
		"ExpansionId": {
			"type": "string",
			"metadata": {
				"description": "The ID of a Datasworn package that enhances another Datasworn package, and relies on another package to provide its ruleset.",
				"examples": [
					"delve"
				],
				"pattern": "^([a-z0-9_]{3,})$"
			}
		},
		"ImpactRuleCollectionId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/collections/rules/impacts/conditions",
					"starforged/collections/rules/impacts/vehicle_troubles"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/rules\\/impacts\\/([a-z][a-z_]*)$"
			}
		},
		"ImpactRuleId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/rules/impacts/conditions/wounded",
					"starforged/rules/impacts/vehicle_troubles/battered"
				],
				"pattern": "^([a-z0-9_]{3,})\\/rules\\/impacts\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
			}
		},
		"MoveCategoryId": {
			"type": "string",
			"metadata": {
				"examples": [
					"starforged/collections/moves/adventure"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/moves\\/([a-z][a-z_]*)$"
			}
		},
		"MoveId": {
			"type": "string",
			"metadata": {
				"pattern": "^(([a-z0-9_]{3,})\\/moves\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)|([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)\\/moves\\/([a-z][a-z_]*))$",
				"description": "A move ID, for a standard move or a unique asset move",
				"examples": [
					"classic/moves/combat/strike",
					"starforged/assets/module/grappler/abilities/0/moves/ready_grappler"
				]
			}
		},
		"MoveIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^((\\*|([a-z0-9_]{3,}))\\/moves\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))|(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))\\/abilities\\/(\\*|(0|[1-9][0-9]*))\\/moves\\/(\\*|([a-z][a-z_]*)))$",
				"description": "A move ID with wildcards.",
				"examples": [
					"*/moves/*/face_danger",
					"*/assets/ritual/*/abilities/*/moves/*"
				]
			}
		},
		"NpcCollectionId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/collections/npcs/firstborn",
					"starforged/collections/npcs/sample_npcs"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/npcs\\/([a-z][a-z_]*)$"
			}
		},
		"NpcId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/npcs/firstborn/elf",
					"starforged/npcs/sample_npcs/chiton"
				],
				"pattern": "^([a-z0-9_]{3,})\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
			}
		},
		"NpcIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/npcs\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"NpcVariantId": {
			"type": "string",
			"metadata": {
				"examples": [
					"starforged/npcs/sample_npcs/chiton/variants/chiton_drone_pack"
				],
				"pattern": "^([a-z0-9_]{3,})\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/variants\\/([a-z][a-z_]*)$"
			}
		},
		"OracleCollectionId": {
			"type": "string",
			"metadata": {
				"examples": [
					"starforged/collections/oracles/core",
					"starforged/collections/oracles/character/names",
					"starforged/collections/oracles/planets/furnace/settlements"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/oracles(\\/([a-z][a-z_]*)){1,3}$"
			}
		},
		"OracleTableId": {
			"type": "string",
			"metadata": {
				"examples": [
					"starforged/oracles/core/action",
					"starforged/oracles/character/names/given",
					"starforged/oracles/planets/furnace/settlements/terminus"
				],
				"pattern": "^([a-z0-9_]{3,})\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)$"
			}
		},
		"OracleTableIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "Oracle table wildcards can also use '**' to represent any number of collection levels in the oracle tree.",
				"examples": [
					"*/oracles/**/peril",
					"starforged/oracles/character/names/*",
					"starforged/oracles/planets/*/settlements/*"
				],
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/oracles\\/((\\/([a-z][a-z_]*)){1,3}|\\/\\*\\*|\\/\\*\\*\\/([a-z][a-z_]*)|\\/([a-z][a-z_]*)\\/\\*\\*)\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"OracleTableRowId": {
			"type": "string",
			"metadata": {
				"pattern": "^(([a-z0-9_]{3,})\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)\\/([1-9][0-9]*)-([1-9][0-9]*)|([a-z0-9_]{3,})\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)\\/(0|[1-9][0-9]*))$",
				"description": "Normally, rows will end with two numbers separated by a dash, indicating their dice range.\n\nRows with a single number represent unrollable rows that are sometimes included for rendering purposes; in this case, the number represents the row's index.",
				"examples": [
					"classic/oracles/action_and_theme/action/1-1",
					"starforged/oracles/derelicts/zones/starship/0"
				]
			}
		},
		"RarityId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/rarities/ayethins_journal"
				],
				"pattern": "^([a-z0-9_]{3,})\\/rarities\\/([a-z][a-z_]*)$"
			}
		},
		"RulesetId": {
			"type": "string",
			"metadata": {
				"description": "The ID of standalone Datasworn package that describes its own ruleset.",
				"examples": [
					"classic",
					"starforged"
				],
				"pattern": "^([a-z0-9_]{3,})$"
			}
		},
		"SpecialTrackRuleId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/rules/special_tracks/bonds",
					"delve/rules/special_tracks/failure",
					"starforged/rules/special_tracks/bonds_legacy"
				],
				"pattern": "^([a-z0-9_]{3,})\\/rules\\/special_tracks\\/([a-z][a-z_]*)$"
			}
		},
		"StatRuleId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/rules\\/stats\\/([a-z][a-z_]*)$"
			}
		},
		"ThemeDangerRowId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$"
			}
		},
		"ThemeFeatureRowId": {
			"type": "string",
			"metadata": {
				"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$"
			}
		},
		"TruthId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/truths/iron",
					"starforged/truths/iron"
				],
				"pattern": "^([a-z0-9_]{3,})\\/truths\\/([a-z][a-z_]*)$"
			}
		},
		"TruthOptionId": {
			"type": "string",
			"metadata": {
				"examples": [
					"classic/truths/iron/0",
					"starforged/truths/iron/0"
				],
				"pattern": "^([a-z0-9_]{3,})\\/truths\\/([a-z][a-z_]*)\\/(0|[1-9][0-9]*)$"
			}
		},
		"CssColor": {
			"type": "string",
			"metadata": {
				"description": "A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"
			}
		},
		"SemanticVersion": {
			"type": "string",
			"metadata": {
				"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
			}
		},
		"Source": {
			"properties": {
				"title": {
					"type": "string",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"properties": {
							"name": {
								"type": "string",
								"metadata": {
									"examples": [
										"Shawn Tomkin"
									]
								}
							}
						},
						"optionalProperties": {
							"email": {
								"type": "string",
								"metadata": {
									"description": "An optional email contact for the author",
									"format": "email"
								}
							},
							"url": {
								"type": "string",
								"metadata": {
									"description": "An optional URL for the author's website.",
									"format": "uri"
								}
							}
						},
						"metadata": {
							"examples": [
								{
									"name": "Shawn Tomkin"
								}
							]
						}
					},
					"metadata": {}
				},
				"date": {
					"type": "string",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
						"format": "date"
					}
				},
				"url": {
					"type": "string",
					"metadata": {
						"description": "An absolute URL where the source document is available.",
						"examples": [
							"https://ironswornrpg.com"
						],
						"format": "uri"
					}
				},
				"license": {
					"type": "string",
					"metadata": {
						"format": "uri"
					}
				}
			},
			"optionalProperties": {
				"page": {
					"type": "int16",
					"metadata": {
						"description": "The page number where this item is described in full."
					}
				}
			},
			"metadata": {
				"description": "Metadata describing the original source of this item"
			}
		},
		"Suggestions": {
			"optionalProperties": {
				"oracles": {
					"elements": {
						"ref": "OracleTableId"
					}
				},
				"assets": {
					"elements": {
						"ref": "AssetId"
					}
				},
				"moves": {
					"elements": {
						"ref": "MoveId"
					}
				},
				"site_domains": {
					"elements": {
						"ref": "DelveSiteDomainId"
					}
				},
				"site_themes": {
					"elements": {
						"ref": "DelveSiteThemeId"
					}
				},
				"npcs": {
					"elements": {
						"ref": "NpcId"
					}
				},
				"atlas": {
					"elements": {
						"ref": "AtlasEntryId"
					}
				},
				"rarities": {
					"elements": {
						"ref": "RarityId"
					}
				}
			}
		},
		"SvgImageUrl": {
			"type": "string",
			"metadata": {
				"description": "A relative URL pointing to a vector image in the SVG format.",
				"pattern": "\\.svg$",
				"format": "uri-reference"
			}
		},
		"WebpImageUrl": {
			"type": "string",
			"metadata": {
				"description": "A relative URL pointing to a raster image in the WEBP format.",
				"pattern": "\\.webp$",
				"format": "uri-reference"
			}
		},
		"I18nHint": {
			"optionalProperties": {
				"part_of_speech": {
					"ref": "PartOfSpeech"
				}
			}
		},
		"I18nHints": {
			"optionalProperties": {
				"result": {
					"ref": "I18nHint"
				},
				"summary": {
					"ref": "I18nHint"
				},
				"description": {
					"ref": "I18nHint"
				},
				"template": {
					"optionalProperties": {
						"result": {
							"ref": "I18nHint"
						},
						"summary": {
							"ref": "I18nHint"
						},
						"description": {
							"ref": "I18nHint"
						}
					}
				}
			}
		},
		"Label": {
			"type": "string",
			"metadata": {
				"description": "A localized plain text name or label."
			}
		},
		"MarkdownString": {
			"type": "string",
			"metadata": {
				"description": "Localized text, formatted in Markdown.\n\nIt uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.",
				"format": "markdown"
			}
		},
		"PartOfSpeech": {
			"enum": [
				"common_noun",
				"proper_noun",
				"adjunct_common_noun",
				"adjunct_proper_noun",
				"verb",
				"gerund",
				"adjective",
				"attributive_verb"
			],
			"metadata": {
				"enumDescription": {
					"common_noun": "A common noun.",
					"proper_noun": "A proper noun.",
					"adjunct_common_noun": "A common noun used as an adjective, to modify another noun.",
					"adjunct_proper_noun": "A proper noun used as an adjective, to modify another noun.",
					"verb": "A verb in present tense",
					"gerund": "Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\"",
					"adjective": "An adjective.",
					"attributive_verb": "A verb used as an adjective, to modify a noun."
				}
			}
		},
		"TemplateString": {
			"type": "string",
			"metadata": {
				"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `result` key, for example `{{result:starforged/oracles/core/action}}`\n",
				"format": "markdown"
			}
		},
		"ConditionMeterRule": {
			"properties": {
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this condition meter."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this condition meter shared by all players?"
					}
				},
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
					}
				},
				"value": {
					"type": "int8",
					"metadata": {
						"description": "The current value of this meter."
					}
				},
				"min": {
					"type": "int8",
					"metadata": {
						"description": "The minimum value of this meter."
					}
				},
				"max": {
					"type": "int8",
					"metadata": {
						"description": "The maximum value of this meter."
					}
				}
			},
			"metadata": {
				"description": "Describes a standard player character condition meter."
			}
		},
		"ImpactCategory": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "A label for this impact category."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this impact category."
					}
				},
				"contents": {
					"values": {
						"ref": "ImpactRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of the Impacts in this category."
					}
				}
			},
			"metadata": {
				"description": "Describes a category of standard impacts/debilities."
			}
		},
		"ImpactRule": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "The label for this impact."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this impact."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this impact applied to all players at once?"
					}
				},
				"prevents_recovery": {
					"elements": {
						"ref": "DictKey"
					},
					"metadata": {
						"description": "Keys of ruleset condition meters, to which this impact prevents recovery."
					}
				},
				"permanent": {
					"type": "boolean",
					"metadata": {
						"description": "Is this impact permanent?"
					}
				}
			},
			"metadata": {
				"description": "Describes a standard impact/debility."
			}
		},
		"Rules": {
			"properties": {
				"stats": {
					"values": {
						"ref": "StatRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard stats used by player characters in this ruleset."
					}
				},
				"condition_meters": {
					"values": {
						"ref": "ConditionMeterRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard condition meters used by player characters in this ruleset."
					}
				},
				"impacts": {
					"values": {
						"ref": "ImpactCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard impacts/debilities used by player characters in this ruleset."
					}
				},
				"special_tracks": {
					"values": {
						"ref": "SpecialTrackRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
					}
				}
			},
			"metadata": {
				"description": "Describes rules for player characters in this ruleset, such as stats and condition meters."
			}
		},
		"RulesExpansion": {
			"optionalProperties": {
				"stats": {
					"values": {
						"ref": "StatRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard stats used by player characters in this ruleset."
					}
				},
				"condition_meters": {
					"values": {
						"ref": "ConditionMeterRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard condition meters used by player characters in this ruleset."
					}
				},
				"impacts": {
					"values": {
						"ref": "ImpactCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard impacts/debilities used by player characters in this ruleset."
					}
				},
				"special_tracks": {
					"values": {
						"ref": "SpecialTrackRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
					}
				}
			},
			"metadata": {
				"description": "Describes rules for player characters in this ruleset, such as stats and condition meters."
			}
		},
		"SpecialTrackRule": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "A label for this special track."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this special track."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this track shared by all players?"
					}
				},
				"optional": {
					"type": "boolean",
					"metadata": {
						"description": "Is this track an optional rule?"
					}
				}
			},
			"metadata": {
				"description": "Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
			}
		},
		"StatRule": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "A label for this stat.",
						"examples": [
							"edge"
						]
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this stat.",
						"examples": [
							"Quickness, agility, and prowess when fighting at a distance."
						]
					}
				}
			},
			"metadata": {
				"description": "Describes a standard player character stat."
			}
		},
		"ChallengeRank": {
			"type": "uint8",
			"metadata": {
				"description": "Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).",
				"typescriptType": "1|2|3|4|5",
				"enumDescription": {
					"1": "Troublesome",
					"2": "Dangerous",
					"3": "Formidable",
					"4": "Extreme",
					"5": "Epic"
				}
			}
		},
		"ProgressTrackTypeInfo": {
			"properties": {
				"category": {
					"ref": "Label",
					"metadata": {
						"description": "A category label for progress tracks of this type.",
						"examples": [
							"Vow",
							"Journey",
							"Combat",
							"Scene Challenge",
							"Expedition",
							"Connection",
							"Delve"
						]
					}
				}
			},
			"optionalProperties": {
				"controls": {
					"values": {},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {
				"description": "Describes the features of a type of progress track."
			}
		},
		"SpecialTrackType": {
			"ref": "DictKey",
			"metadata": {
				"description": "Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.\n'Canonical' examples:\n  * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\n",
				"examples": [
					"bonds_track",
					"failure_track",
					"quests_legacy",
					"bonds_legacy",
					"discoveries_legacy"
				]
			}
		},
		"Npc": {
			"properties": {
				"id": {
					"ref": "NpcId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"features": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				},
				"rank": {
					"ref": "ChallengeRank",
					"metadata": {
						"description": "The suggested challenge rank for this NPC."
					}
				},
				"nature": {
					"ref": "NpcNature"
				},
				"drives": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"tactics": {
					"elements": {
						"ref": "MarkdownString"
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"your_truth": {
					"ref": "MarkdownString"
				},
				"variants": {
					"values": {
						"ref": "NpcVariant"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {
				"description": "A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged."
			}
		},
		"NpcCollection": {
			"properties": {
				"id": {
					"ref": "NpcCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "NpcCollectionId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "NpcCollectionId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "Npc"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {}
		},
		"NpcNature": {
			"ref": "Label",
			"metadata": {
				"description": "A localized category label describing the nature of this NPC.\n\nIn Ironsworn classic, this is probably the singular form of the parent collection's name.\n\nFor Starforged, see the table on p. 258 for examples.",
				"examples": [
					"Ironlander",
					"Firstborn",
					"Animal",
					"Beast",
					"Horror",
					"Anomaly",
					"Creature",
					"Human",
					"Machine",
					"Monster",
					"Vehicle"
				]
			}
		},
		"NpcVariant": {
			"properties": {
				"id": {
					"ref": "NpcVariantId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rank": {
					"ref": "ChallengeRank",
					"metadata": {
						"description": "The suggested challenge rank for this NPC."
					}
				},
				"nature": {
					"ref": "NpcNature"
				}
			},
			"optionalProperties": {
				"summary": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {}
		},
		"DiceNotation": {
			"type": "string",
			"metadata": {
				"examples": [
					"1d100",
					"1d6+2"
				],
				"pattern": "([1-9][0-9]*)d(0|[1-9][0-9]*)([+-]([1-9][0-9]*))?",
				"format": "dice_notation"
			}
		},
		"OracleRollTemplate": {
			"optionalProperties": {
				"result": {
					"ref": "TemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleTableRow#result.",
						"examples": [
							"{{result:starforged/oracles/factions/affiliation}} of the {{result:starforged/oracles/factions/legacy}} {{result:starforged/oracles/factions/identity}}"
						]
					}
				},
				"summary": {
					"ref": "TemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleTableRow#summary."
					}
				},
				"description": {
					"ref": "TemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleTableRow#description."
					}
				}
			},
			"metadata": {
				"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID."
			}
		},
		"OracleTableMatchBehavior": {
			"properties": {
				"text": {
					"ref": "MarkdownString"
				}
			}
		},
		"OracleTableRoll": {
			"optionalProperties": {
				"oracle": {
					"ref": "OracleTableId",
					"metadata": {
						"description": "The ID of the oracle table to be rolled. If omitted, it defaults to the ID of this oracle table."
					}
				},
				"auto": {
					"type": "boolean",
					"metadata": {
						"description": "The rulebook explicitly cautions *against* rolling all details at once, so rolling every referenced oracle automatically is not recommended. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\". If this value is omitted, assume it's false."
					}
				},
				"times": {
					"type": "int16",
					"metadata": {}
				},
				"method": {
					"ref": "OracleTableRollMethod"
				}
			}
		},
		"OracleTableRollMethod": {
			"enum": [
				"no_duplicates",
				"keep_duplicates",
				"make_it_worse"
			],
			"metadata": {
				"description": "Special roll instructions to use when rolling multiple times on a single oracle table.",
				"enumDescription": {
					"no_duplicates": "Duplicates should be re-rolled.",
					"keep_duplicates": "Duplicates should be kept.",
					"make_it_worse": "Duplicates should be kept, and they compound to make things worse."
				}
			}
		},
		"OracleCollection": {
			"properties": {
				"id": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				}
			},
			"optionalProperties": {
				"rendering": {
					"ref": "OracleCollectionRendering"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "OracleTable"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				},
				"collections": {
					"values": {
						"ref": "OracleCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			}
		},
		"OracleCollectionRendering": {
			"discriminator": "style",
			"mapping": {
				"tables": {
					"properties": {}
				},
				"multi_table": {
					"properties": {
						"columns": {
							"values": {
								"ref": "OracleCollectionTableColumn"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					}
				}
			},
			"metadata": {
				"description": "Describes the presentation of this oracle collection, which might represent a group of separate tables, or a single table with additional columns."
			}
		},
		"OracleCollectionStyle": {
			"enum": [
				"tables",
				"multi_table"
			],
			"metadata": {
				"enumDescription": {
					"tables": "Presented as a collection of separate tables.",
					"multi_table": "Presented as a single table, with its OracleTable children rendered as columns."
				}
			}
		},
		"OracleCollectionTableColumn": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "The column's header text."
					}
				},
				"content_type": {
					"ref": "OracleTableColumnContentKey"
				},
				"table_key": {
					"ref": "DictKey",
					"metadata": {
						"description": "The key of the OracleTable (within this collection), whose data is used to render this column."
					}
				}
			},
			"optionalProperties": {
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "The thematic color for this column."
					}
				}
			}
		},
		"OracleTable": {
			"properties": {
				"id": {
					"ref": "OracleTableId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"dice": {
					"ref": "DiceNotation",
					"metadata": {
						"description": "The roll used to select a result on this table."
					}
				},
				"table": {
					"elements": {
						"ref": "OracleTableRow",
						"metadata": {
							"description": "An array of objects, each representing a single row of the table."
						}
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon that represents this table."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this table."
						}
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of the oracle table's intended usage, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"replaces": {
					"ref": "OracleTableId",
					"metadata": {
						"description": "Indicates that this table replaces the identified table. References to the replaced table can be considered equivalent to this table."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of the oracle table's intended usage, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"match": {
					"ref": "OracleTableMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				},
				"rendering": {
					"ref": "OracleTableRendering",
					"metadata": {
						"description": "Describes how how to render this table, when presenting it as a standalone table."
					}
				}
			},
			"metadata": {}
		},
		"OracleTableColumn": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "The column's header text."
					}
				},
				"content_type": {
					"ref": "OracleTableColumnContentKey"
				}
			},
			"optionalProperties": {
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "The thematic color for this column."
					}
				}
			},
			"metadata": {
				"examples": [
					{
						"label": "Roll",
						"content_type": "roll"
					},
					{
						"label": "Result",
						"content_type": "result"
					},
					{
						"label": "Summary",
						"content_type": "summary"
					}
				]
			}
		},
		"OracleTableColumnContentKey": {
			"enum": [
				"roll",
				"result",
				"summary",
				"description"
			],
			"metadata": {
				"description": "The value(s) from each OracleTableRow that is rendered in this column.",
				"enumDescription": {
					"roll": "Column displays the roll range (`min` and `max`) of each OracleTableRow.",
					"result": "Column displays the OracleTableRow's `result` key.",
					"summary": "Column displays the OracleTableRow's `summary` key.",
					"description": "Column displays the OracleTableRow's `description` key."
				}
			}
		},
		"OracleTableRendering": {
			"discriminator": "style",
			"mapping": {
				"standalone": {
					"properties": {
						"columns": {
							"values": {
								"ref": "OracleTableColumn"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					}
				},
				"column": {
					"properties": {}
				},
				"embed_in_row": {
					"properties": {}
				}
			},
			"metadata": {
				"description": "Describes the presentation of this table."
			}
		},
		"OracleTableRow": {
			"properties": {
				"id": {
					"ref": "OracleTableRowId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"result": {
					"ref": "MarkdownString"
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rolls": {
					"elements": {
						"ref": "OracleTableRoll"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleTableId"
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {}
		},
		"OracleTableStyle": {
			"enum": [
				"standalone",
				"embed_in_row",
				"column"
			],
			"metadata": {
				"enumDescription": {
					"standalone": "Render as a standalone table.",
					"embed_in_row": "Render as a table, within a row in another table.",
					"column": "Render as a single column of a table."
				}
			}
		},
		"ActionRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"player_choice": "The player chooses which roll option to use.",
					"highest": "Use the roll option with the best/highest value.",
					"lowest": "Use the roll option with the worst/lowest value.",
					"all": "Use **every** roll option at once."
				}
			}
		},
		"ActionRollOption": {
			"discriminator": "using",
			"mapping": {
				"stat": {
					"properties": {
						"stat": {
							"ref": "StatId"
						}
					}
				},
				"condition_meter": {
					"properties": {
						"condition_meter": {
							"ref": "ConditionMeterId"
						}
					}
				},
				"asset_control": {
					"properties": {
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the asset control field.",
								"examples": [
									"health",
									"integrity"
								]
							}
						}
					}
				},
				"asset_option": {
					"properties": {
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the asset option field."
							}
						}
					}
				},
				"attached_asset_control": {
					"properties": {
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the asset control field.",
								"examples": [
									"health",
									"integrity"
								]
							}
						}
					}
				},
				"attached_asset_option": {
					"properties": {
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the asset option field."
							}
						}
					}
				},
				"custom": {
					"properties": {
						"name": {
							"ref": "Label"
						},
						"value": {
							"type": "int16",
							"metadata": {}
						}
					}
				}
			}
		},
		"ActionRollUsing": {
			"enum": [
				"stat",
				"condition_meter",
				"asset_control",
				"asset_option",
				"custom",
				"attached_asset_control",
				"attached_asset_option"
			],
			"metadata": {
				"enumDescription": {
					"stat": "Roll using a standard player character stat.",
					"condition_meter": "Roll using the value of a standard player condition meter.",
					"asset_control": "Roll using the value of an asset control.",
					"asset_option": "Roll using the value of an asset option.",
					"custom": "Roll using an integer value with customizable labels.",
					"attached_asset_control": "Roll using the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.",
					"attached_asset_option": "Roll using the value of an attached asset option."
				}
			}
		},
		"Move": {
			"discriminator": "roll_type",
			"mapping": {
				"action_roll": {
					"properties": {
						"id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"source": {
							"ref": "Source",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerActionRoll"
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						}
					},
					"optionalProperties": {
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleTableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					}
				},
				"no_roll": {
					"properties": {
						"id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"source": {
							"ref": "Source",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerNoRoll"
						}
					},
					"optionalProperties": {
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleTableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					}
				},
				"progress_roll": {
					"properties": {
						"id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"source": {
							"ref": "Source",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerProgressRoll"
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"tracks": {
							"ref": "ProgressTrackTypeInfo",
							"metadata": {
								"description": "Describes the common features of progress tracks associated with this move."
							}
						}
					},
					"optionalProperties": {
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleTableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					}
				},
				"special_track": {
					"properties": {
						"id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"source": {
							"ref": "Source",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerSpecialTrack"
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						}
					},
					"optionalProperties": {
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleTableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					}
				}
			}
		},
		"MoveCategory": {
			"properties": {
				"id": {
					"ref": "MoveCategoryId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "MoveCategoryId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "MoveCategoryId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "Move"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {}
		},
		"MoveEnhancement": {
			"discriminator": "roll_type",
			"mapping": {
				"action_roll": {
					"properties": {},
					"optionalProperties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						},
						"trigger": {
							"ref": "TriggerActionRollEnhancement"
						}
					}
				},
				"no_roll": {
					"properties": {},
					"optionalProperties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						},
						"trigger": {
							"ref": "TriggerNoRollEnhancement"
						}
					}
				},
				"progress_roll": {
					"properties": {},
					"optionalProperties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						},
						"trigger": {
							"ref": "TriggerProgressRollEnhancement"
						}
					}
				},
				"special_track": {
					"properties": {},
					"optionalProperties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						},
						"trigger": {
							"ref": "TriggerSpecialTrackEnhancement"
						}
					}
				}
			}
		},
		"MoveOutcome": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"pattern": "On a \\*\\*(strong hit|weak hit|miss)\\*\\*"
					}
				}
			}
		},
		"MoveOutcomeType": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit"
			],
			"metadata": {
				"enumDescription": {
					"miss": "The score doesn't beat either challenge die.",
					"weak_hit": "The score is greater than one challenge die.",
					"strong_hit": "The score is greater than both challenge dice."
				}
			}
		},
		"MoveOutcomes": {
			"properties": {
				"strong_hit": {
					"ref": "MoveOutcome"
				},
				"weak_hit": {
					"ref": "MoveOutcome"
				},
				"miss": {
					"ref": "MoveOutcome"
				}
			},
			"metadata": {
				"description": "A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated."
			}
		},
		"MoveRollType": {
			"enum": [
				"no_roll",
				"action_roll",
				"progress_roll",
				"special_track"
			],
			"metadata": {
				"enumDescription": {
					"no_roll": "A move that makes no action rolls or progress rolls.",
					"action_roll": "A move that makes an action roll.",
					"progress_roll": "A progress move that rolls on a standard progress track type (defined by this move).",
					"special_track": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
				}
			}
		},
		"ProgressRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"progress_roll"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"progress_roll": "Make a progress roll on a progress track associated with this move."
				}
			}
		},
		"ProgressRollOption": {
			"properties": {
				"using": {
					"enum": [
						"progress_track"
					]
				}
			}
		},
		"SpecialTrackRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"player_choice": "The player chooses which roll option to use.",
					"highest": "Use the roll option with the best/highest value.",
					"lowest": "Use the roll option with the worst/lowest value.",
					"all": "Use **every** roll option at once."
				}
			}
		},
		"TriggerActionRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerActionRollCondition"
					}
				}
			}
		},
		"TriggerActionRollCondition": {
			"properties": {
				"method": {
					"ref": "ActionRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ActionRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerActionRollConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "ActionRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ActionRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerActionRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerActionRollConditionEnhancement"
					}
				}
			}
		},
		"TriggerBy": {
			"properties": {
				"player": {
					"type": "boolean"
				},
				"ally": {
					"type": "boolean"
				}
			},
			"metadata": {
				"description": "Information on who can trigger this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move."
			}
		},
		"TriggerNoRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerNoRollCondition"
					}
				}
			}
		},
		"TriggerNoRollCondition": {
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerNoRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerNoRollCondition"
					}
				}
			}
		},
		"TriggerProgressRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerProgressRollCondition"
					}
				}
			}
		},
		"TriggerProgressRollCondition": {
			"properties": {
				"method": {
					"ref": "ProgressRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ProgressRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerProgressRollConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "ProgressRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ProgressRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerProgressRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerProgressRollConditionEnhancement"
					}
				}
			}
		},
		"TriggerSpecialTrack": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerSpecialTrackCondition"
					}
				}
			}
		},
		"TriggerSpecialTrackCondition": {
			"properties": {
				"method": {
					"ref": "SpecialTrackRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerSpecialTrackConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "SpecialTrackRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			},
			"metadata": {
				"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged)."
			}
		},
		"TriggerSpecialTrackConditionOption": {
			"properties": {
				"using": {
					"ref": "SpecialTrackType"
				}
			}
		},
		"TriggerSpecialTrackEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionEnhancement"
					}
				}
			}
		},
		"Asset": {
			"properties": {
				"id": {
					"ref": "AssetId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"asset_type": {
					"ref": "Label",
					"metadata": {
						"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
						"examples": [
							"Combat Talent",
							"Command Vehicle",
							"Companion",
							"Deed",
							"Module",
							"Path",
							"Ritual",
							"Support Vehicle"
						]
					}
				},
				"abilities": {
					"elements": {
						"ref": "AssetAbility",
						"metadata": {
							"description": "Abilities provided by this asset. Most assets have 3."
						}
					}
				},
				"count_as_impact": {
					"type": "boolean",
					"metadata": {
						"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "This asset's icon."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this asset."
					}
				},
				"options": {
					"values": {
						"ref": "AssetOptionField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset."
					}
				},
				"requirement": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "Describes prerequisites for purchasing or using this asset."
					}
				},
				"controls": {
					"values": {
						"ref": "AssetControlField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset."
					}
				},
				"attachments": {
					"ref": "AssetAttachment"
				}
			},
			"metadata": {}
		},
		"AssetAbility": {
			"properties": {
				"id": {
					"ref": "AssetAbilityId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"text": {
					"ref": "MarkdownString"
				},
				"enabled": {
					"type": "boolean",
					"metadata": {
						"description": "Is this asset ability enabled?"
					}
				}
			},
			"optionalProperties": {
				"name": {
					"ref": "Label"
				},
				"moves": {
					"values": {
						"ref": "Move"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Unique moves added by this asset ability."
					}
				},
				"options": {
					"values": {
						"ref": "AssetAbilityOptionField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Fields that are expected to be set once and remain the same through the life of the asset."
					}
				},
				"controls": {
					"values": {
						"ref": "AssetAbilityControlField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Fields whose values are expected to change over the life of the asset."
					}
				},
				"enhance_asset": {
					"ref": "AssetEnhancement",
					"metadata": {
						"description": "Changes made to the asset, when this ability is enabled."
					}
				},
				"enhance_moves": {
					"elements": {
						"ref": "MoveEnhancement"
					},
					"metadata": {
						"description": "Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions."
					}
				}
			},
			"metadata": {}
		},
		"AssetAbilityControlField": {
			"discriminator": "field_type",
			"mapping": {
				"clock": {
					"properties": {
						"id": {
							"ref": "AssetAbilityControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current number of filled clock segments."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The minimum number of filled clock segments. This is always 0."
							}
						},
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The size of the clock -- in other words, the maximum number of filled clock segments."
							}
						}
					}
				},
				"counter": {
					"properties": {
						"id": {
							"ref": "AssetAbilityControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "int16",
							"metadata": {
								"description": "The current value of this input."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The (inclusive) minimum value."
							}
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"checkbox": {
					"properties": {
						"id": {
							"ref": "AssetAbilityControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					}
				}
			}
		},
		"AssetAbilityOptionField": {
			"discriminator": "field_type",
			"mapping": {
				"text": {
					"properties": {
						"id": {
							"ref": "AssetAbilityOptionFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "string"
						}
					}
				}
			}
		},
		"AssetAttachment": {
			"properties": {
				"assets": {
					"elements": {
						"ref": "AssetIdWildcard"
					},
					"metadata": {
						"description": "Asset IDs (which may be wildcards) that may be attached to this asset"
					}
				},
				"max": {
					"type": "int16",
					"metadata": {}
				}
			},
			"metadata": {
				"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info."
			}
		},
		"AssetConditionMeterControlField": {
			"discriminator": "field_type",
			"mapping": {
				"checkbox": {
					"properties": {
						"id": {
							"ref": "AssetConditionMeterControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					}
				},
				"card_flip": {
					"properties": {
						"id": {
							"ref": "AssetConditionMeterControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the card flipped over?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					}
				}
			},
			"metadata": {
				"description": "A checkbox control field, rendered as part of an asset condition meter."
			}
		},
		"AssetControlField": {
			"discriminator": "field_type",
			"mapping": {
				"condition_meter": {
					"properties": {
						"id": {
							"ref": "AssetControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current value of this meter."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The minimum value of this meter."
							}
						},
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The maximum value of this meter."
							}
						}
					},
					"optionalProperties": {
						"moves": {
							"optionalProperties": {
								"suffer": {
									"elements": {
										"ref": "MoveIdWildcard",
										"metadata": {
											"examples": [
												"classic/moves/suffer/companion_endure_harm",
												"starforged/moves/suffer/companion_takes_a_hit",
												"starforged/moves/suffer/withstand_damage"
											]
										}
									},
									"metadata": {
										"description": "The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option."
									}
								},
								"recover": {
									"elements": {
										"ref": "MoveIdWildcard",
										"metadata": {
											"examples": [
												"classic/moves/adventure/heal",
												"classic/moves/adventure/make_camp",
												"classic/moves/relationship/sojourn",
												"starforged/moves/recover/heal",
												"starforged/moves/recover/repair"
											]
										}
									},
									"metadata": {
										"description": "The ID(s) of recovery moves associated with this meter."
									}
								}
							},
							"metadata": {
								"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves."
							}
						},
						"controls": {
							"values": {
								"ref": "AssetConditionMeterControlField"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$",
								"description": "Checkbox controls rendered as part of the condition meter."
							}
						}
					}
				},
				"select_enhancement": {
					"properties": {
						"id": {
							"ref": "AssetControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected."
							}
						},
						"choices": {
							"values": {
								"discriminator": "option_type",
								"mapping": {
									"option": {
										"properties": {
											"label": {
												"ref": "Label",
												"metadata": {
													"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
												}
											},
											"value": {
												"optionalProperties": {
													"enhance_asset": {
														"ref": "AssetEnhancement"
													},
													"enhance_moves": {
														"elements": {
															"ref": "MoveEnhancement"
														}
													}
												},
												"metadata": {
													"description": "The current value of this input."
												}
											}
										},
										"optionalProperties": {
											"selected": {
												"type": "boolean",
												"metadata": {
													"description": "Is this option currently selected?"
												}
											}
										}
									},
									"option_group": {
										"properties": {
											"name": {
												"ref": "Label",
												"metadata": {
													"description": "A label for this option group."
												}
											},
											"choices": {
												"values": {
													"properties": {
														"option_type": {
															"enum": [
																"option"
															]
														},
														"label": {
															"ref": "Label",
															"metadata": {
																"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
															}
														},
														"value": {
															"optionalProperties": {
																"enhance_asset": {
																	"ref": "AssetEnhancement"
																},
																"enhance_moves": {
																	"elements": {
																		"ref": "MoveEnhancement"
																	}
																}
															},
															"metadata": {
																"description": "The current value of this input."
															}
														}
													},
													"optionalProperties": {
														"selected": {
															"type": "boolean",
															"metadata": {
																"description": "Is this option currently selected?"
															}
														}
													},
													"metadata": {
														"description": "Represents an option in a list of choices."
													}
												},
												"metadata": {
													"propertyPattern": "^([a-z][a-z_]*)$"
												}
											}
										}
									}
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					}
				},
				"checkbox": {
					"properties": {
						"id": {
							"ref": "AssetControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					}
				},
				"card_flip": {
					"properties": {
						"id": {
							"ref": "AssetControlFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the card flipped over?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					}
				}
			}
		},
		"AssetControlFieldEnhancement": {
			"discriminator": "field_type",
			"mapping": {
				"condition_meter": {
					"properties": {
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The maximum value of this meter."
							}
						}
					}
				}
			}
		},
		"AssetEnhancement": {
			"optionalProperties": {
				"controls": {
					"values": {
						"ref": "AssetControlFieldEnhancement"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"count_as_impact": {
					"type": "boolean",
					"metadata": {
						"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
					}
				},
				"attachments": {
					"ref": "AssetAttachment"
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
					}
				}
			},
			"metadata": {
				"description": "Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed."
			}
		},
		"AssetOptionField": {
			"discriminator": "field_type",
			"mapping": {
				"select_stat": {
					"properties": {
						"id": {
							"ref": "AssetOptionFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected."
							}
						},
						"choices": {
							"values": {
								"discriminator": "option_type",
								"mapping": {
									"option": {
										"properties": {
											"label": {
												"ref": "Label",
												"metadata": {
													"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
												}
											},
											"value": {
												"ref": "StatId",
												"metadata": {
													"description": "The current value of this input."
												}
											}
										},
										"optionalProperties": {
											"selected": {
												"type": "boolean",
												"metadata": {
													"description": "Is this option currently selected?"
												}
											}
										}
									},
									"option_group": {
										"properties": {
											"name": {
												"ref": "Label",
												"metadata": {
													"description": "A label for this option group."
												}
											},
											"choices": {
												"values": {
													"properties": {
														"option_type": {
															"enum": [
																"option"
															]
														},
														"label": {
															"ref": "Label",
															"metadata": {
																"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
															}
														},
														"value": {
															"ref": "StatId",
															"metadata": {
																"description": "The current value of this input."
															}
														}
													},
													"optionalProperties": {
														"selected": {
															"type": "boolean",
															"metadata": {
																"description": "Is this option currently selected?"
															}
														}
													},
													"metadata": {
														"description": "Represents an option in a list of choices."
													}
												},
												"metadata": {
													"propertyPattern": "^([a-z][a-z_]*)$"
												}
											}
										}
									}
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					}
				},
				"select_enhancement": {
					"properties": {
						"id": {
							"ref": "AssetOptionFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected."
							}
						},
						"choices": {
							"values": {
								"discriminator": "option_type",
								"mapping": {
									"option": {
										"properties": {
											"label": {
												"ref": "Label",
												"metadata": {
													"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
												}
											},
											"value": {
												"optionalProperties": {
													"enhance_asset": {
														"ref": "AssetEnhancement"
													},
													"enhance_moves": {
														"elements": {
															"ref": "MoveEnhancement"
														}
													}
												},
												"metadata": {
													"description": "The current value of this input."
												}
											}
										},
										"optionalProperties": {
											"selected": {
												"type": "boolean",
												"metadata": {
													"description": "Is this option currently selected?"
												}
											}
										}
									},
									"option_group": {
										"properties": {
											"name": {
												"ref": "Label",
												"metadata": {
													"description": "A label for this option group."
												}
											},
											"choices": {
												"values": {
													"properties": {
														"option_type": {
															"enum": [
																"option"
															]
														},
														"label": {
															"ref": "Label",
															"metadata": {
																"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
															}
														},
														"value": {
															"optionalProperties": {
																"enhance_asset": {
																	"ref": "AssetEnhancement"
																},
																"enhance_moves": {
																	"elements": {
																		"ref": "MoveEnhancement"
																	}
																}
															},
															"metadata": {
																"description": "The current value of this input."
															}
														}
													},
													"optionalProperties": {
														"selected": {
															"type": "boolean",
															"metadata": {
																"description": "Is this option currently selected?"
															}
														}
													},
													"metadata": {
														"description": "Represents an option in a list of choices."
													}
												},
												"metadata": {
													"propertyPattern": "^([a-z][a-z_]*)$"
												}
											}
										}
									}
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					}
				},
				"text": {
					"properties": {
						"id": {
							"ref": "AssetOptionFieldId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"label": {
							"ref": "Label",
							"metadata": {
								"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
							}
						},
						"value": {
							"type": "string"
						}
					}
				}
			}
		},
		"AssetType": {
			"properties": {
				"id": {
					"ref": "AssetTypeId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "AssetTypeId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "AssetTypeId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "Asset"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {}
		},
		"Truth": {
			"properties": {
				"id": {
					"ref": "TruthId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"options": {
					"elements": {
						"ref": "TruthOption"
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"icon": {
					"ref": "SvgImageUrl"
				},
				"your_character": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {
				"description": "A setting truth category."
			}
		},
		"TruthOption": {
			"properties": {
				"id": {
					"ref": "TruthOptionId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"min": {
					"type": "int16"
				},
				"max": {
					"type": "int16"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"table": {
					"elements": {
						"ref": "TruthOptionTableRow"
					}
				}
			},
			"metadata": {}
		},
		"TruthOptionTableRow": {
			"properties": {
				"result": {
					"ref": "MarkdownString"
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rolls": {
					"elements": {
						"ref": "OracleTableRoll"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleTableId"
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {}
		},
		"Atlas": {
			"properties": {
				"id": {
					"ref": "AtlasId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "AtlasId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "AtlasId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "AtlasEntry"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				},
				"collections": {
					"values": {
						"ref": "Atlas"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			}
		},
		"AtlasEntry": {
			"properties": {
				"id": {
					"ref": "AtlasEntryId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"features": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"your_truth": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {
				"description": "An atlas entry, like the Ironlands region entries found in classic Ironsworn."
			}
		},
		"ConditionMeterId": {
			"ref": "DictKey",
			"metadata": {
				"description": "A basic, rollable player character resource.",
				"examples": [
					"health",
					"spirit",
					"supply"
				]
			}
		},
		"StatId": {
			"ref": "DictKey",
			"metadata": {
				"description": "A basic player character stat.",
				"examples": [
					"edge",
					"heart",
					"iron",
					"shadow",
					"wits"
				]
			}
		},
		"Rarity": {
			"properties": {
				"id": {
					"ref": "RarityId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"asset": {
					"ref": "AssetId",
					"metadata": {
						"description": "The asset augmented by this rarity."
					}
				},
				"xp_cost": {
					"type": "int16",
					"metadata": {
						"description": "From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity."
					}
				},
				"description": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"icon": {
					"ref": "SvgImageUrl"
				}
			},
			"metadata": {
				"description": "A rarity, as described in Ironsworn: Delve."
			}
		},
		"DelveSite": {
			"properties": {
				"id": {
					"ref": "DelveSiteId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"rank": {
					"ref": "ChallengeRank"
				},
				"theme": {
					"ref": "DelveSiteThemeId"
				},
				"domain": {
					"ref": "DelveSiteDomainId"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"denizens": {
					"elements": {
						"ref": "DelveSiteDenizen"
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"icon": {
					"ref": "SvgImageUrl"
				},
				"region": {
					"ref": "AtlasEntryId",
					"metadata": {
						"description": "The ID of an atlas entry representing the region in which this delve site is located."
					}
				},
				"extra_card": {
					"type": "string",
					"metadata": {
						"description": "An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve."
					}
				}
			},
			"metadata": {
				"description": "A delve site with a theme, domain, and denizen table."
			}
		},
		"DelveSiteDenizen": {
			"properties": {
				"id": {
					"ref": "DelveSiteDenizenId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"min": {
					"type": "int16"
				},
				"max": {
					"type": "int16"
				},
				"frequency": {
					"ref": "DelveSiteDenizenFrequency"
				}
			},
			"optionalProperties": {
				"name": {
					"ref": "Label"
				},
				"npc": {
					"ref": "NpcId",
					"metadata": {
						"description": "The ID of the relevant NPC entry, if one is specified."
					}
				}
			},
			"metadata": {}
		},
		"DelveSiteDenizenFrequency": {
			"enum": [
				"very_common",
				"common",
				"uncommon",
				"rare",
				"unforeseen"
			]
		},
		"DelveSiteDomain": {
			"properties": {
				"id": {
					"ref": "DelveSiteDomainId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"features": {
					"elements": {
						"ref": "DelveSiteDomainFeatureRow"
					}
				},
				"dangers": {
					"elements": {
						"ref": "DelveSiteDomainDangerRow"
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"icon": {
					"ref": "SvgImageUrl"
				},
				"name_oracle": {
					"ref": "OracleTableId",
					"metadata": {
						"description": "An oracle table ID containing place name elements. For examples, see oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in oracle collection ID `delve/collections/oracles/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (ID: delve/oracles/site_name/format) to create random names for delve sites."
					}
				}
			},
			"metadata": {
				"description": "A delve site domain card."
			}
		},
		"DelveSiteDomainDangerRow": {
			"properties": {
				"id": {
					"ref": "DomainDangerRowId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"result": {
					"ref": "MarkdownString"
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rolls": {
					"elements": {
						"ref": "OracleTableRoll"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleTableId"
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {}
		},
		"DelveSiteDomainFeatureRow": {
			"properties": {
				"id": {
					"ref": "DomainFeatureRowId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"result": {
					"ref": "MarkdownString"
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rolls": {
					"elements": {
						"ref": "OracleTableRoll"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleTableId"
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {}
		},
		"DelveSiteTheme": {
			"properties": {
				"id": {
					"ref": "DelveSiteThemeId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"source": {
					"ref": "Source",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"features": {
					"elements": {
						"ref": "DelveSiteThemeFeatureRow"
					}
				},
				"dangers": {
					"elements": {
						"ref": "DelveSiteThemeDangerRow"
					}
				}
			},
			"optionalProperties": {
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"icon": {
					"ref": "SvgImageUrl"
				}
			},
			"metadata": {
				"description": "A delve site theme card."
			}
		},
		"DelveSiteThemeDangerRow": {
			"properties": {
				"id": {
					"ref": "ThemeDangerRowId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"result": {
					"ref": "MarkdownString"
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rolls": {
					"elements": {
						"ref": "OracleTableRoll"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleTableId"
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {}
		},
		"DelveSiteThemeFeatureRow": {
			"properties": {
				"id": {
					"ref": "ThemeFeatureRowId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"result": {
					"ref": "MarkdownString"
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rolls": {
					"elements": {
						"ref": "OracleTableRoll"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleTableId"
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {}
		}
	}
}