{
	"discriminator": "type",
	"mapping": {
		"ruleset": {
			"properties": {
				"_id": {
					"ref": "RulesetId"
				},
				"datasworn_version": {
					"ref": "SemanticVersion",
					"metadata": {
						"description": "The version of the Datasworn format used by this data."
					}
				},
				"title": {
					"type": "string",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": [
							"https://ironswornrpg.com"
						]
					}
				},
				"license": {
					"ref": "License"
				},
				"rules": {
					"ref": "Rules"
				},
				"oracles": {
					"values": {
						"ref": "OracleTablesCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing asset collections, which contain assets."
					}
				}
			},
			"optionalProperties": {
				"description": {
					"ref": "MarkdownString"
				},
				"atlas": {
					"values": {
						"ref": "Atlas"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site domains."
					}
				}
			},
			"metadata": {
				"description": "A standalone Datasworn package that describes its own ruleset."
			}
		},
		"expansion": {
			"properties": {
				"_id": {
					"ref": "ExpansionId"
				},
				"datasworn_version": {
					"ref": "SemanticVersion",
					"metadata": {
						"description": "The version of the Datasworn format used by this data."
					}
				},
				"ruleset": {
					"ref": "RulesetId"
				}
			},
			"optionalProperties": {
				"description": {
					"ref": "MarkdownString"
				},
				"title": {
					"type": "string",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": [
							"https://ironswornrpg.com"
						]
					}
				},
				"license": {
					"ref": "License"
				},
				"oracles": {
					"values": {
						"ref": "OracleTablesCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing asset collections, which contain assets."
					}
				},
				"atlas": {
					"values": {
						"ref": "Atlas"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object containing delve site domains."
					}
				},
				"rules": {
					"ref": "RulesExpansion"
				}
			},
			"metadata": {
				"description": "A Datasworn package that relies on an external package to provide its ruleset."
			}
		}
	},
	"metadata": {
		"description": "Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin."
	},
	"definitions": {
		"AssetAbilityId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for an AssetAbility.",
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)$"
			}
		},
		"AssetCollectionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for an AssetCollection.",
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/assets\\/([a-z][a-z_]*)$"
			}
		},
		"AssetId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for an Asset.",
				"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
			}
		},
		"AssetIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded ID that can be used to match multiple Assets.",
				"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$"
			}
		},
		"AtlasEntryId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for an AtlasEntry.",
				"examples": [
					"classic/atlas/ironlands/hinterlands"
				],
				"pattern": "^([a-z0-9_]{3,})\\/atlas\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
			}
		},
		"AtlasId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for an Atlas.",
				"examples": [
					"classic/collections/atlas/ironlands"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/atlas\\/([a-z][a-z_]*)$"
			}
		},
		"DelveSiteDenizenId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a DelveSiteDenizen.",
				"examples": [
					"delve/delve_sites/alvas_rest/denizens/1-27"
				],
				"pattern": "^([a-z0-9_]{3,})\\/delve_sites\\/([a-z][a-z_]*)\\/denizens\\/([1-9][0-9]*)-([1-9][0-9]*)$"
			}
		},
		"DelveSiteDomainId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a DelveSiteDomain.",
				"examples": [
					"delve/site_domains/shadowfen"
				],
				"pattern": "^([a-z0-9_]{3,})\\/site_domains\\/([a-z][a-z_]*)$"
			}
		},
		"DelveSiteId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a DelveSite.",
				"examples": [
					"delve/delve_sites/alvas_rest"
				],
				"pattern": "^([a-z0-9_]{3,})\\/delve_sites\\/([a-z][a-z_]*)$"
			}
		},
		"DelveSiteThemeId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a DelveSiteTheme.",
				"examples": [
					"delve/site_themes/hallowed"
				],
				"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)$"
			}
		},
		"DictKey": {
			"type": "string",
			"metadata": {
				"description": "A `snake_case` key used in a Datasworn dictionary object.",
				"pattern": "^([a-z][a-z_]*)$"
			}
		},
		"ExpansionId": {
			"type": "string",
			"metadata": {
				"description": "The ID of a Datasworn package that relies on an external package to provide its ruleset.",
				"examples": [
					"delve"
				],
				"pattern": "^([a-z0-9_]{3,})$"
			}
		},
		"MoveCategoryId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a MoveCategory.",
				"examples": [
					"starforged/collections/moves/adventure"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/moves\\/([a-z][a-z_]*)$"
			}
		},
		"MoveId": {
			"type": "string",
			"metadata": {
				"pattern": "^(([a-z0-9_]{3,})\\/moves\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)|([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)\\/moves\\/([a-z][a-z_]*))$",
				"description": "A move ID, for a standard move or a unique asset move",
				"examples": [
					"classic/moves/combat/strike",
					"starforged/assets/module/grappler/abilities/0/moves/ready_grappler"
				]
			}
		},
		"MoveIdWildcard": {
			"type": "string",
			"metadata": {
				"pattern": "^((\\*|([a-z0-9_]{3,}))\\/moves\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))|(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))\\/abilities\\/(\\*|(0|[1-9][0-9]*))\\/moves\\/(\\*|([a-z][a-z_]*)))$",
				"description": "A move ID with wildcards.",
				"examples": [
					"*/moves/*/face_danger",
					"*/assets/ritual/*/abilities/*/moves/*"
				]
			}
		},
		"NpcCollectionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a NpcCollection.",
				"examples": [
					"classic/collections/npcs/firstborn",
					"starforged/collections/npcs/sample_npcs"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/npcs\\/([a-z][a-z_]*)$"
			}
		},
		"NpcId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a Npc.",
				"examples": [
					"classic/npcs/firstborn/elf",
					"starforged/npcs/sample_npcs/chiton"
				],
				"pattern": "^([a-z0-9_]{3,})\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
			}
		},
		"NpcVariantId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a NpcVariant.",
				"examples": [
					"starforged/npcs/sample_npcs/chiton/variants/chiton_drone_pack"
				],
				"pattern": "^([a-z0-9_]{3,})\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/variants\\/([a-z][a-z_]*)$"
			}
		},
		"OracleCollectionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for an OracleCollection.",
				"examples": [
					"starforged/collections/oracles/core",
					"starforged/collections/oracles/character/names",
					"starforged/collections/oracles/planets/furnace/settlements"
				],
				"pattern": "^([a-z0-9_]{3,})\\/collections\\/oracles(\\/([a-z][a-z_]*)){1,3}$"
			}
		},
		"OracleRollableId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for an OracleRollable.",
				"examples": [
					"starforged/oracles/core/action",
					"starforged/oracles/character/names/given",
					"starforged/oracles/planets/furnace/settlements/terminus"
				],
				"pattern": "^([a-z0-9_]{3,})\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)$"
			}
		},
		"RarityId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a Rarity.",
				"examples": [
					"classic/rarities/ayethins_journal"
				],
				"pattern": "^([a-z0-9_]{3,})\\/rarities\\/([a-z][a-z_]*)$"
			}
		},
		"RulesetId": {
			"type": "string",
			"metadata": {
				"description": "The ID of standalone Datasworn package that describes its own ruleset.",
				"examples": [
					"classic",
					"starforged",
					"sundered_isles"
				],
				"pattern": "^([a-z0-9_]{3,})$"
			}
		},
		"TruthId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID for a Truth.",
				"examples": [
					"classic/truths/iron",
					"starforged/truths/iron"
				],
				"pattern": "^([a-z0-9_]{3,})\\/truths\\/([a-z][a-z_]*)$"
			}
		},
		"AuthorInfo": {
			"properties": {
				"name": {
					"type": "string",
					"metadata": {
						"examples": [
							"Shawn Tomkin"
						]
					}
				}
			},
			"optionalProperties": {
				"email": {
					"type": "string",
					"metadata": {
						"description": "An optional email contact for the author",
						"format": "email"
					}
				},
				"url": {
					"type": "string",
					"metadata": {
						"description": "An optional URL for the author's website.",
						"format": "uri"
					}
				}
			},
			"metadata": {
				"description": "Information on the original creator of this material.",
				"examples": [
					{
						"name": "Shawn Tomkin",
						"url": "https://ironswornrpg.com"
					}
				]
			}
		},
		"CssColor": {
			"type": "string",
			"metadata": {
				"description": "A CSS color value."
			}
		},
		"License": {
			"ref": "WebUrl",
			"metadata": {
				"description": "An URL pointing to the location where this element's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.",
				"examples": [
					"https://creativecommons.org/licenses/by/4.0",
					"https://creativecommons.org/licenses/by-nc-sa/4.0"
				]
			}
		},
		"SemanticVersion": {
			"type": "string",
			"metadata": {
				"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
			}
		},
		"SourceInfo": {
			"properties": {
				"title": {
					"type": "string",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": [
							"https://ironswornrpg.com"
						]
					}
				},
				"license": {
					"ref": "License"
				}
			},
			"optionalProperties": {
				"page": {
					"type": "uint16",
					"metadata": {
						"description": "The page number where this item is described in full."
					}
				}
			},
			"metadata": {
				"description": "Metadata describing the original source of this item"
			}
		},
		"Suggestions": {
			"optionalProperties": {
				"oracles": {
					"elements": {
						"ref": "OracleRollableId"
					}
				},
				"assets": {
					"elements": {
						"ref": "AssetId"
					}
				},
				"moves": {
					"elements": {
						"ref": "MoveId"
					}
				},
				"site_domains": {
					"elements": {
						"ref": "DelveSiteDomainId"
					}
				},
				"site_themes": {
					"elements": {
						"ref": "DelveSiteThemeId"
					}
				},
				"npcs": {
					"elements": {
						"ref": "NpcId"
					}
				},
				"atlas": {
					"elements": {
						"ref": "AtlasEntryId"
					}
				},
				"rarities": {
					"elements": {
						"ref": "RarityId"
					}
				}
			}
		},
		"SvgImageUrl": {
			"type": "string",
			"metadata": {
				"description": "A relative (local) URL pointing to a vector image in the SVG format.",
				"pattern": "\\.svg$",
				"format": "uri-reference"
			}
		},
		"WebUrl": {
			"type": "string",
			"metadata": {
				"description": "An absolute URL pointing to a website.",
				"format": "uri"
			}
		},
		"WebpImageUrl": {
			"type": "string",
			"metadata": {
				"description": "A relative (local) URL pointing to a raster image in the WEBP format.",
				"pattern": "\\.webp$",
				"format": "uri-reference"
			}
		},
		"I18nHint": {
			"optionalProperties": {
				"part_of_speech": {
					"ref": "PartOfSpeech",
					"metadata": {
						"description": "The part of speech for this string."
					}
				}
			}
		},
		"I18nHints": {
			"optionalProperties": {
				"text": {
					"ref": "I18nHint"
				},
				"text2": {
					"ref": "I18nHint"
				},
				"text3": {
					"ref": "I18nHint"
				},
				"template": {
					"optionalProperties": {
						"text": {
							"ref": "I18nHint"
						},
						"text2": {
							"ref": "I18nHint"
						},
						"text3": {
							"ref": "I18nHint"
						}
					}
				}
			},
			"metadata": {
				"description": "Internationalization/localization hints for the text content of this object."
			}
		},
		"InputLabel": {
			"type": "string",
			"metadata": {
				"description": "A localized label for an input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
				"pattern": "^[^A-Z]+$"
			}
		},
		"Label": {
			"type": "string",
			"metadata": {
				"description": "A localized plain text name or label."
			}
		},
		"MarkdownString": {
			"type": "string",
			"metadata": {
				"description": "Localized text, formatted in Markdown.\n\nIt uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.",
				"format": "markdown"
			}
		},
		"PartOfSpeech": {
			"enum": [
				"common_noun",
				"proper_noun",
				"adjunct_common_noun",
				"adjunct_proper_noun",
				"verb",
				"gerund",
				"adjective",
				"attributive_verb",
				"adjective_as_proper_noun",
				"common_noun_as_proper_noun"
			],
			"metadata": {
				"enumDescription": {
					"common_noun": "A common noun.",
					"proper_noun": "A proper noun.",
					"adjunct_common_noun": "A common noun used as an adjective, to modify another noun.",
					"adjunct_proper_noun": "A proper noun used as an adjective, to modify another noun.",
					"verb": "A verb in present tense",
					"gerund": "Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\". Can function as a noun, an adjective, or a progressive verb.",
					"adjective": "An adjective.",
					"attributive_verb": "A verb used as an adjective, to modify a noun.",
					"adjective_as_proper_noun": "An adjective used as a proper noun.",
					"common_noun_as_proper_noun": "An common noun used as a proper noun."
				}
			}
		},
		"TemplateString": {
			"type": "string",
			"metadata": {
				"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `result` key, for example `{{result:starforged/oracles/core/action}}`\n",
				"format": "markdown"
			}
		},
		"ConditionMeterRule": {
			"properties": {
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this condition meter."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this condition meter shared by all players?"
					}
				},
				"label": {
					"ref": "InputLabel"
				},
				"value": {
					"type": "int8",
					"metadata": {
						"description": "The current value of this meter."
					}
				},
				"min": {
					"type": "int8",
					"metadata": {
						"description": "The minimum value of this meter."
					}
				},
				"max": {
					"type": "int8",
					"metadata": {
						"description": "The maximum value of this meter."
					}
				},
				"rollable": {
					"type": "boolean",
					"metadata": {
						"description": "Is this meter's `value` usable as a stat in an action roll?"
					}
				}
			},
			"metadata": {
				"description": "Describes a standard player character condition meter."
			}
		},
		"ImpactCategory": {
			"properties": {
				"label": {
					"ref": "InputLabel",
					"metadata": {
						"description": "A label for this impact category."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this impact category."
					}
				},
				"contents": {
					"values": {
						"ref": "ImpactRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "A dictionary object of the Impacts in this category."
					}
				}
			},
			"metadata": {
				"description": "Describes a category of standard impacts/debilities."
			}
		},
		"ImpactRule": {
			"properties": {
				"label": {
					"ref": "InputLabel",
					"metadata": {
						"description": "The label for this impact."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this impact."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this impact applied to all players at once?"
					}
				},
				"prevents_recovery": {
					"elements": {
						"ref": "ConditionMeterKey"
					},
					"metadata": {
						"description": "Any ruleset condition meters that can't recover when this impact is active."
					}
				},
				"permanent": {
					"type": "boolean",
					"metadata": {
						"description": "Is this impact permanent?"
					}
				}
			},
			"metadata": {
				"description": "Describes a standard impact/debility."
			}
		},
		"ObjectType": {
			"enum": [
				"oracle_rollable",
				"move",
				"asset",
				"atlas_entry",
				"npc",
				"oracle_collection",
				"move_category",
				"asset_collection",
				"atlas",
				"npc_collection",
				"delve_site",
				"delve_site_theme",
				"delve_site_domain",
				"truth",
				"rarity"
			]
		},
		"Rules": {
			"properties": {
				"stats": {
					"values": {
						"ref": "StatRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard stats used by player characters in this ruleset."
					}
				},
				"condition_meters": {
					"values": {
						"ref": "ConditionMeterRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard condition meters used by player characters in this ruleset."
					}
				},
				"impacts": {
					"values": {
						"ref": "ImpactCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard impacts/debilities used by player characters in this ruleset."
					}
				},
				"special_tracks": {
					"values": {
						"ref": "SpecialTrackRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
					}
				},
				"tags": {
					"values": {
						"ref": "TagRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {
				"description": "Describes rules for player characters in this ruleset, such as stats and condition meters."
			}
		},
		"RulesExpansion": {
			"optionalProperties": {
				"stats": {
					"values": {
						"ref": "StatRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard stats used by player characters in this ruleset."
					}
				},
				"condition_meters": {
					"values": {
						"ref": "ConditionMeterRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard condition meters used by player characters in this ruleset."
					}
				},
				"impacts": {
					"values": {
						"ref": "ImpactCategory"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the standard impacts/debilities used by player characters in this ruleset."
					}
				},
				"special_tracks": {
					"values": {
						"ref": "SpecialTrackRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
					}
				},
				"tags": {
					"values": {
						"ref": "TagRule"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {
				"description": "Describes rules for player characters in this ruleset, such as stats and condition meters."
			}
		},
		"SpecialTrackRule": {
			"properties": {
				"label": {
					"ref": "InputLabel",
					"metadata": {
						"description": "A label for this special track."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this special track."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this track shared by all players?"
					}
				},
				"optional": {
					"type": "boolean",
					"metadata": {
						"description": "Is this track an optional rule?"
					}
				}
			},
			"metadata": {
				"description": "Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
			}
		},
		"StatRule": {
			"properties": {
				"label": {
					"ref": "InputLabel",
					"metadata": {
						"description": "A label for this stat.",
						"examples": [
							"edge"
						]
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this stat.",
						"examples": [
							"Quickness, agility, and prowess when fighting at a distance."
						]
					}
				}
			},
			"metadata": {
				"description": "Describes a standard player character stat."
			}
		},
		"Tag": {},
		"TagRule": {
			"discriminator": "value_type",
			"mapping": {
				"boolean": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"array": {
							"type": "boolean"
						}
					}
				},
				"integer": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"array": {
							"type": "boolean"
						}
					}
				},
				"oracle_rollable": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"move": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"asset": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"atlas_entry": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"npc": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"oracle_collection": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"move_category": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"asset_collection": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"atlas": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"npc_collection": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"delve_site": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"delve_site_theme": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"delve_site_domain": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"truth": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"rarity": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"wildcard": {
							"type": "boolean",
							"metadata": {
								"description": "If `true`, this field accepts an array of wildcard IDs. If `false`, this field accepts a single non-wildcard ID."
							}
						}
					}
				},
				"enum": {
					"properties": {
						"applies_to": {
							"elements": {
								"ref": "ObjectType"
							}
						},
						"description": {
							"ref": "MarkdownString"
						},
						"array": {
							"type": "boolean"
						},
						"enum": {
							"elements": {
								"ref": "DictKey"
							}
						}
					}
				}
			}
		},
		"ChallengeRank": {
			"type": "uint8",
			"metadata": {
				"description": "Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).",
				"enumDescription": {
					"1": "Troublesome",
					"2": "Dangerous",
					"3": "Formidable",
					"4": "Extreme",
					"5": "Epic"
				}
			}
		},
		"ProgressTrackTypeInfo": {
			"properties": {
				"category": {
					"ref": "Label",
					"metadata": {
						"description": "A category label for progress tracks of this type.",
						"examples": [
							"Vow",
							"Journey",
							"Combat",
							"Scene Challenge",
							"Expedition",
							"Connection",
							"Delve"
						]
					}
				}
			},
			"optionalProperties": {
				"controls": {
					"values": {},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {
				"description": "Describes the features of a type of progress track."
			}
		},
		"SpecialTrackType": {
			"ref": "DictKey",
			"metadata": {
				"description": "Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.\n'Canonical' examples:\n  * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\n",
				"examples": [
					"bonds_track",
					"failure_track",
					"quests_legacy",
					"bonds_legacy",
					"discoveries_legacy"
				]
			}
		},
		"RollableValue": {
			"discriminator": "using",
			"mapping": {
				"stat": {
					"properties": {
						"stat": {
							"ref": "StatKey"
						}
					},
					"metadata": {
						"description": "A reference to the value of a standard player character stat."
					}
				},
				"condition_meter": {
					"properties": {
						"condition_meter": {
							"ref": "ConditionMeterKey"
						}
					},
					"metadata": {
						"description": "A reference to the value of a standard player condition meter."
					}
				},
				"asset_control": {
					"properties": {
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": [
									"health",
									"integrity"
								]
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an asset control."
					}
				},
				"asset_option": {
					"properties": {
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an asset option."
					}
				},
				"attached_asset_control": {
					"properties": {
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": [
									"health",
									"integrity"
								]
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle."
					}
				},
				"attached_asset_option": {
					"properties": {
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an attached asset option."
					}
				},
				"custom": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "int16"
						}
					},
					"metadata": {
						"description": "An arbitrary static integer value with a label."
					}
				}
			}
		},
		"Npc": {
			"properties": {
				"_id": {
					"ref": "NpcId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"features": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rank": {
					"ref": "ChallengeRank",
					"metadata": {
						"description": "The suggested challenge rank for this NPC."
					}
				},
				"nature": {
					"ref": "NpcNature"
				},
				"drives": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"tactics": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"type": {
					"enum": [
						"npc"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				},
				"your_truth": {
					"ref": "MarkdownString"
				},
				"variants": {
					"values": {
						"ref": "NpcVariant"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {
				"description": "A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged."
			}
		},
		"NpcCollection": {
			"properties": {
				"_id": {
					"ref": "NpcCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"type": {
					"enum": [
						"npc_collection"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "NpcCollectionId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "NpcCollectionId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "Npc"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {}
		},
		"NpcNature": {
			"ref": "Label",
			"metadata": {
				"description": "A localized category label describing the nature of this NPC.\n\nIn Ironsworn classic, this is probably the singular form of the parent collection's name.\n\nFor Starforged, see the table on p. 258 for examples.",
				"examples": [
					"Ironlander",
					"Firstborn",
					"Animal",
					"Beast",
					"Horror",
					"Anomaly",
					"Creature",
					"Human",
					"Machine",
					"Monster",
					"Vehicle"
				]
			}
		},
		"NpcVariant": {
			"properties": {
				"_id": {
					"ref": "NpcVariantId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label"
				},
				"rank": {
					"ref": "ChallengeRank",
					"metadata": {
						"description": "The suggested challenge rank for this NPC."
					}
				},
				"nature": {
					"ref": "NpcNature"
				},
				"description": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"summary": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {}
		},
		"DiceExpression": {
			"type": "string",
			"metadata": {
				"description": "A simple dice roll expression with an optional modifer.",
				"examples": [
					"1d100",
					"1d6+2"
				],
				"pattern": "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"
			}
		},
		"OracleDuplicateBehavior": {
			"enum": [
				"reroll",
				"keep",
				"make_it_worse"
			],
			"metadata": {
				"description": "Special roll instructions to use when rolling multiple times on a single oracle.",
				"enumDescription": {
					"reroll": "Duplicate results should be re-rolled.",
					"keep": "Duplicates results should be kept.",
					"make_it_worse": "Duplicate results should be kept, and they compound to make things worse."
				}
			}
		},
		"OracleMatchBehavior": {
			"properties": {
				"text": {
					"ref": "MarkdownString"
				}
			}
		},
		"OracleRoll": {
			"properties": {
				"oracle": {
					"ref": "OracleRollableId"
				},
				"auto": {
					"type": "boolean",
					"metadata": {
						"description": "Both Ironsworn and Starforged explicitly recommend *against* rolling all details at once. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\" or \"Roll twice\"."
					}
				},
				"duplicates": {
					"ref": "OracleDuplicateBehavior",
					"metadata": {
						"description": "Special rules on how to handle duplicate results, when rolling multiple times."
					}
				},
				"dice": {
					"ref": "DiceExpression"
				},
				"number_of_rolls": {
					"type": "int16",
					"metadata": {
						"description": "The number of times to roll."
					}
				}
			}
		},
		"OracleRollTemplate": {
			"optionalProperties": {
				"text": {
					"ref": "TemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleTableRow#text.",
						"examples": [
							"{{text:starforged/oracles/factions/affiliation}} of the {{text:starforged/oracles/factions/legacy}} {{text:starforged/oracles/factions/identity}}"
						]
					}
				},
				"text2": {
					"ref": "TemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleTableRow#text2."
					}
				},
				"text3": {
					"ref": "TemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleTableRow#text3."
					}
				}
			},
			"metadata": {
				"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#text`, `OracleTableRow#text2`, and `OracleTableRow#text3`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{text:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#text` from the target oracle table ID."
			}
		},
		"OracleCollection": {
			"discriminator": "oracle_type",
			"mapping": {
				"tables": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"type": {
							"enum": [
								"oracle_collection"
							]
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this collection."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this collection."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
							}
						},
						"replaces": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleTableRollable"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						},
						"collections": {
							"values": {
								"ref": "OracleCollection"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection that represents a category or grouping of tables, which may themselves be `OracleTablesCollection`s."
					}
				},
				"table_shared_rolls": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"type": {
							"enum": [
								"oracle_collection"
							]
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "Provides column labels for this table. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row). For all other column labels, see the `name` property of each child `OracleColumn`."
							}
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this collection."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this collection."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
							}
						},
						"replaces": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with one roll column and multiple `result` columns."
					}
				},
				"table_shared_text": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"type": {
							"enum": [
								"oracle_collection"
							]
						},
						"column_labels": {
							"properties": {
								"text": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "The label at the head of each table column. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row)."
							}
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this collection."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this collection."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
							}
						},
						"replaces": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with multiple roll columns and one `result` column."
					}
				},
				"table_shared_text2": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"type": {
							"enum": [
								"oracle_collection"
							]
						},
						"column_labels": {
							"properties": {
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "The label at the head of each table column. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row)."
							}
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this collection."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this collection."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
							}
						},
						"replaces": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText2"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with multiple roll columns, and 2 shared text columns."
					}
				},
				"table_shared_text3": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"type": {
							"enum": [
								"oracle_collection"
							]
						},
						"column_labels": {
							"properties": {
								"text": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "The label at the head of each table column. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row)."
							}
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this collection."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this collection."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
							}
						},
						"replaces": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText3"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with multiple roll columns, and 2 shared text columns."
					}
				}
			}
		},
		"OracleColumnText": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary label at the head of this column."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleTableRowText"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": [
						"oracle_rollable"
					]
				},
				"oracle_type": {
					"enum": [
						"column_text"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "Optional secondary text at the head of this column. For best results, this should be no more than a few words in length."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "An optional thematic color for this column. For an example, see \"Basic Creature Form\" (Starforged p. 337)"
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An optional icon for this column."
					}
				},
				"replaces": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Indicates that this object replaces the identified OracleRollable. References to the replaced object can be considered equivalent to this object."
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				}
			},
			"metadata": {
				"description": "Represents a single column in an OracleCollection."
			}
		},
		"OracleColumnText2": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary label at the head of this column."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleTableRowText2"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": [
						"oracle_rollable"
					]
				},
				"oracle_type": {
					"enum": [
						"column_text2"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "Optional secondary text at the head of this column. For best results, this should be no more than a few words in length."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "An optional thematic color for this column. For an example, see \"Basic Creature Form\" (Starforged p. 337)"
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An optional icon for this column."
					}
				},
				"replaces": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Indicates that this object replaces the identified OracleRollable. References to the replaced object can be considered equivalent to this object."
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				}
			},
			"metadata": {}
		},
		"OracleColumnText3": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary label at the head of this column."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleTableRowText3"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": [
						"oracle_rollable"
					]
				},
				"oracle_type": {
					"enum": [
						"column_text3"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "Optional secondary text at the head of this column. For best results, this should be no more than a few words in length."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "An optional thematic color for this column. For an example, see \"Basic Creature Form\" (Starforged p. 337)"
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An optional icon for this column."
					}
				},
				"replaces": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Indicates that this object replaces the identified OracleRollable. References to the replaced object can be considered equivalent to this object."
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				}
			},
			"metadata": {}
		},
		"OracleTableRollable": {
			"discriminator": "oracle_type",
			"mapping": {
				"table_text": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "The label at the head of each table column. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row)."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleTableRowText"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": [
								"oracle_rollable"
							]
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon that represents this table."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of the oracle table's intended usage, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of the oracle table's intended usage, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"replaces": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "Indicates that this object replaces the identified OracleRollable. References to the replaced object can be considered equivalent to this object."
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "Represents a basic rollable oracle table with one roll column and one text result column."
					}
				},
				"table_text2": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "The label at the head of each table column. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row)."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleTableRowText2"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": [
								"oracle_rollable"
							]
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon that represents this table."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of the oracle table's intended usage, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of the oracle table's intended usage, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"replaces": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "Indicates that this object replaces the identified OracleRollable. References to the replaced object can be considered equivalent to this object."
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "A rollable oracle table with one roll column and two text columns."
					}
				},
				"table_text3": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								},
								"text3": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "The label at the head of each table column. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row)."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleTableRowText3"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": [
								"oracle_rollable"
							]
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon that represents this table."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of the oracle table's intended usage, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of the oracle table's intended usage, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						},
						"replaces": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "Indicates that this object replaces the identified OracleRollable. References to the replaced object can be considered equivalent to this object."
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "A rollable oracle table with one roll column and 3 text columns."
					}
				}
			}
		},
		"OracleTableRowText": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table, with a single text cell."
			}
		},
		"OracleTableRowText2": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				},
				"text2": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table that provides a secondary text field."
			}
		},
		"OracleTableRowText3": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range for this table row."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range for this table row."
					}
				},
				"text2": {
					"ref": "MarkdownString"
				},
				"text3": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table with 3 text cells."
			}
		},
		"OracleTablesCollection": {
			"properties": {
				"_id": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"type": {
					"enum": [
						"oracle_collection"
					]
				},
				"oracle_type": {
					"enum": [
						"tables"
					],
					"metadata": {
						"description": "A grouping of separate tables."
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "OracleTableRollable"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				},
				"collections": {
					"values": {
						"ref": "OracleCollection"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {
				"description": "An OracleCollection that represents a category or grouping of tables, which may themselves be `OracleTablesCollection`s."
			}
		},
		"ActionRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"player_choice": "The player chooses which roll option to use.",
					"highest": "Use the roll option with the best/highest value.",
					"lowest": "Use the roll option with the worst/lowest value.",
					"all": "Use _every_ roll option at once."
				}
			}
		},
		"Move": {
			"discriminator": "roll_type",
			"mapping": {
				"action_roll": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerActionRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": [
								"move"
							]
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleRollableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					},
					"metadata": {
						"description": "A move that makes an action roll."
					}
				},
				"no_roll": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerNoRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"type": {
							"enum": [
								"move"
							]
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleRollableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					},
					"metadata": {
						"description": "A move that makes no progress rolls or action rolls."
					}
				},
				"progress_roll": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerProgressRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": [
								"move"
							]
						},
						"tracks": {
							"ref": "ProgressTrackTypeInfo",
							"metadata": {
								"description": "Describes the common features of progress tracks associated with this move."
							}
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleRollableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					},
					"metadata": {
						"description": "A progress move that rolls on a standard progress track type (whose features are defined by this move object). For progress rolls that use special tracks, see MoveSpecialTrack."
					}
				},
				"special_track": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this item."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this item."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerSpecialTrack",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": [
								"move"
							]
						}
					},
					"optionalProperties": {
						"_comment": {
							"type": "string",
							"metadata": {
								"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
							}
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"values": {
								"values": {
									"ref": "Tag"
								},
								"metadata": {
									"propertyPattern": "^([a-z][a-z_]*)$"
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z0-9_]{3,})$"
							}
						},
						"replaces": {
							"ref": "MoveId",
							"metadata": {
								"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move."
							}
						},
						"oracles": {
							"elements": {
								"ref": "OracleRollableId"
							},
							"metadata": {
								"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement."
							}
						}
					},
					"metadata": {
						"description": "A progress move that rolls on a special track, such as Legacies (Starforged) or Bonds (classic Ironsworn). For progress moves that use standard progress tracks, see MoveProgressRoll instead."
					}
				}
			}
		},
		"MoveCategory": {
			"properties": {
				"_id": {
					"ref": "MoveCategoryId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"type": {
					"enum": [
						"move_category"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "MoveCategoryId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "MoveCategoryId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "Move"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {}
		},
		"MoveEnhancement": {
			"discriminator": "roll_type",
			"mapping": {
				"action_roll": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerActionRollEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				},
				"no_roll": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerNoRollEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				},
				"progress_roll": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerProgressRollEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				},
				"special_track": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "MoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerSpecialTrackEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				}
			}
		},
		"MoveOutcome": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"pattern": "On a __(strong hit|weak hit|miss)__"
					}
				}
			},
			"optionalProperties": {
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					}
				}
			}
		},
		"MoveOutcomes": {
			"properties": {
				"strong_hit": {
					"ref": "MoveOutcome"
				},
				"weak_hit": {
					"ref": "MoveOutcome"
				},
				"miss": {
					"ref": "MoveOutcome"
				}
			},
			"metadata": {
				"description": "A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated."
			}
		},
		"ProgressRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"progress_roll"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"progress_roll": "Make a progress roll on a progress track associated with this move."
				}
			}
		},
		"ProgressRollOption": {
			"properties": {
				"using": {
					"enum": [
						"progress_track"
					]
				}
			}
		},
		"SpecialTrackRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"player_choice": "The player chooses which roll option to use.",
					"highest": "Use the roll option with the best/highest value.",
					"lowest": "Use the roll option with the worst/lowest value.",
					"all": "Use _every_ roll option at once."
				}
			}
		},
		"TriggerActionRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerActionRollCondition"
					},
					"metadata": {
						"description": "Specific conditions that qualify for this trigger."
					}
				}
			},
			"metadata": {
				"description": "Describes trigger conditions for a move that makes an action roll."
			}
		},
		"TriggerActionRollCondition": {
			"properties": {
				"method": {
					"ref": "ActionRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "RollableValue"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerActionRollConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "ActionRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "RollableValue"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerActionRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerActionRollConditionEnhancement"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"TriggerBy": {
			"properties": {
				"player": {
					"type": "boolean",
					"metadata": {
						"description": "Can this trigger be activated by the player who owns this?"
					}
				},
				"ally": {
					"type": "boolean",
					"metadata": {
						"description": "Can this trigger be activated by one of the player's allies?"
					}
				}
			},
			"metadata": {
				"description": "Information on who can activate this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move."
			}
		},
		"TriggerNoRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerNoRollCondition"
					}
				}
			},
			"metadata": {
				"description": "Describes trigger conditions for a move that makes no rolls."
			}
		},
		"TriggerNoRollCondition": {
			"properties": {},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerNoRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerNoRollCondition"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"TriggerProgressRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerProgressRollCondition"
					},
					"metadata": {
						"description": "Specific conditions that qualify for this trigger."
					}
				}
			}
		},
		"TriggerProgressRollCondition": {
			"properties": {
				"method": {
					"ref": "ProgressRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ProgressRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerProgressRollConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "ProgressRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ProgressRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerProgressRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerProgressRollConditionEnhancement"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"TriggerSpecialTrack": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
						"pattern": ".*\\.{3}"
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerSpecialTrackCondition"
					},
					"metadata": {
						"description": "Specific conditions that qualify for this trigger."
					}
				}
			}
		},
		"TriggerSpecialTrackCondition": {
			"properties": {
				"method": {
					"ref": "SpecialTrackRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerSpecialTrackConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "SpecialTrackRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			},
			"metadata": {
				"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged)."
			}
		},
		"TriggerSpecialTrackConditionOption": {
			"properties": {
				"using": {
					"ref": "SpecialTrackType"
				}
			}
		},
		"TriggerSpecialTrackEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionEnhancement"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"Asset": {
			"properties": {
				"_id": {
					"ref": "AssetId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"category": {
					"ref": "Label",
					"metadata": {
						"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
						"examples": [
							"Combat Talent",
							"Command Vehicle",
							"Companion",
							"Deed",
							"Module",
							"Path",
							"Ritual",
							"Support Vehicle"
						]
					}
				},
				"abilities": {
					"elements": {
						"ref": "AssetAbility",
						"metadata": {
							"description": "Abilities provided by this asset. Most assets have 3."
						}
					}
				},
				"count_as_impact": {
					"type": "boolean",
					"metadata": {
						"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
					}
				},
				"type": {
					"enum": [
						"asset"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "This asset's icon."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this asset."
					}
				},
				"options": {
					"values": {
						"ref": "AssetOptionField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Options are input fields set when the player purchases the asset. They're likely to remain the same through the life of the asset. Typically, they are rendered at the top of the asset card."
					}
				},
				"requirement": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "Describes prerequisites for purchasing or using this asset."
					}
				},
				"controls": {
					"values": {
						"ref": "AssetControlField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset."
					}
				},
				"attachments": {
					"ref": "AssetAttachment"
				}
			},
			"metadata": {}
		},
		"AssetAbility": {
			"properties": {
				"_id": {
					"ref": "AssetAbilityId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of this asset ability."
					}
				},
				"enabled": {
					"type": "boolean",
					"metadata": {
						"description": "Is this asset ability enabled?"
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "A handful of asset abilities have a label/name, for instance classic Ironsworn companion assets. Most canonical assets omit this property."
					}
				},
				"moves": {
					"values": {
						"ref": "Move"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Unique moves added by this asset ability."
					}
				},
				"options": {
					"values": {
						"ref": "AssetAbilityOptionField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Fields that are expected to be set once and remain the same through the life of the asset."
					}
				},
				"controls": {
					"values": {
						"ref": "AssetAbilityControlField"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Fields whose values are expected to change over the life of the asset."
					}
				},
				"enhance_asset": {
					"ref": "AssetEnhancement",
					"metadata": {
						"description": "Changes made to the asset, when this ability is enabled."
					}
				},
				"enhance_moves": {
					"elements": {
						"ref": "MoveEnhancement"
					},
					"metadata": {
						"description": "Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions."
					}
				}
			},
			"metadata": {
				"description": "An asset ability: one of the purchasable features of an asset. Most assets have three."
			}
		},
		"AssetAbilityControlField": {
			"discriminator": "field_type",
			"mapping": {
				"clock": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current value of this input."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The minimum number of filled clock segments. This is always 0."
							}
						},
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The size of the clock -- in other words, the maximum number of filled clock segments. Standard clocks have 4, 6, 8, or 10 segments."
							}
						},
						"rollable": {
							"type": "boolean"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "A clock with 4 or more segments."
					}
				},
				"counter": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current value of this input."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The (inclusive) minimum value."
							}
						},
						"max": {
							"type": "int16"
						},
						"rollable": {
							"type": "boolean"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "A basic counter representing a non-rollable integer value. They usually start at 0, and may or may not have a maximum."
					}
				},
				"checkbox": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				},
				"text": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "string"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents an input that accepts plain text."
					}
				}
			}
		},
		"AssetAbilityOptionField": {
			"discriminator": "field_type",
			"mapping": {
				"text": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "string"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents an input that accepts plain text."
					}
				}
			}
		},
		"AssetAttachment": {
			"properties": {
				"assets": {
					"elements": {
						"ref": "AssetIdWildcard"
					},
					"metadata": {
						"description": "Asset IDs (which may be wildcards) that may be attached to this asset"
					}
				},
				"max": {
					"type": "int16",
					"metadata": {}
				}
			},
			"metadata": {
				"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info."
			}
		},
		"AssetCollection": {
			"properties": {
				"_id": {
					"ref": "AssetCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"type": {
					"enum": [
						"asset_collection"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "AssetCollectionId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "AssetCollectionId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "Asset"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			},
			"metadata": {}
		},
		"AssetConditionMeterControlField": {
			"discriminator": "field_type",
			"mapping": {
				"checkbox": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				},
				"card_flip": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the card flipped over?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				}
			},
			"metadata": {
				"description": "A checkbox control field, rendered as part of an asset condition meter."
			}
		},
		"AssetControlField": {
			"discriminator": "field_type",
			"mapping": {
				"condition_meter": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current value of this meter."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The minimum value of this meter."
							}
						},
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The maximum value of this meter."
							}
						},
						"rollable": {
							"type": "boolean",
							"metadata": {
								"description": "Is this meter's `value` usable as a stat in an action roll?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						},
						"moves": {
							"optionalProperties": {
								"suffer": {
									"elements": {
										"ref": "MoveIdWildcard",
										"metadata": {
											"examples": [
												"classic/moves/suffer/companion_endure_harm",
												"starforged/moves/suffer/companion_takes_a_hit",
												"starforged/moves/suffer/withstand_damage"
											]
										}
									},
									"metadata": {
										"description": "The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option."
									}
								},
								"recover": {
									"elements": {
										"ref": "MoveIdWildcard",
										"metadata": {
											"examples": [
												"classic/moves/adventure/heal",
												"classic/moves/adventure/make_camp",
												"classic/moves/relationship/sojourn",
												"starforged/moves/recover/heal",
												"starforged/moves/recover/repair"
											]
										}
									},
									"metadata": {
										"description": "The ID(s) of recovery moves associated with this meter."
									}
								}
							},
							"metadata": {
								"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves."
							}
						},
						"controls": {
							"values": {
								"ref": "AssetConditionMeterControlField"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$",
								"description": "Checkbox controls rendered as part of the condition meter."
							}
						}
					},
					"metadata": {
						"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\"."
					}
				},
				"select_enhancement": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected."
							}
						},
						"choices": {
							"values": {
								"discriminator": "choice_type",
								"mapping": {
									"choice": {
										"properties": {
											"label": {
												"ref": "InputLabel"
											}
										},
										"optionalProperties": {
											"enhance_asset": {
												"ref": "AssetEnhancement"
											},
											"enhance_moves": {
												"elements": {
													"ref": "MoveEnhancement"
												}
											}
										},
										"metadata": {
											"description": "Represents an option in a list of choices."
										}
									},
									"choice_group": {
										"properties": {
											"name": {
												"ref": "InputLabel",
												"metadata": {
													"description": "A label for this option group."
												}
											},
											"choices": {
												"values": {
													"ref": "SelectEnhancementFieldChoice"
												},
												"metadata": {
													"propertyPattern": "^([a-z][a-z_]*)$"
												}
											}
										},
										"metadata": {
											"description": "Represents a grouping of options in a list of choices."
										}
									}
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles)."
					}
				},
				"checkbox": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				},
				"card_flip": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the card flipped over?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				}
			}
		},
		"AssetControlFieldEnhancement": {
			"discriminator": "field_type",
			"mapping": {
				"condition_meter": {
					"properties": {
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The maximum value of this meter."
							}
						}
					},
					"metadata": {
						"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\"."
					}
				}
			}
		},
		"AssetEnhancement": {
			"optionalProperties": {
				"controls": {
					"values": {
						"ref": "AssetControlFieldEnhancement"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$",
						"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"count_as_impact": {
					"type": "boolean",
					"metadata": {
						"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
					}
				},
				"attachments": {
					"ref": "AssetAttachment"
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
					}
				}
			},
			"metadata": {
				"description": "Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed."
			}
		},
		"AssetOptionField": {
			"discriminator": "field_type",
			"mapping": {
				"select_value": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected."
							}
						},
						"choices": {
							"values": {
								"ref": "SelectValueFieldChoice"
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents a list of mutually exclusive choices."
					}
				},
				"select_enhancement": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"ref": "DictKey",
							"metadata": {
								"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected."
							}
						},
						"choices": {
							"values": {
								"discriminator": "choice_type",
								"mapping": {
									"choice": {
										"properties": {
											"label": {
												"ref": "InputLabel"
											}
										},
										"optionalProperties": {
											"enhance_asset": {
												"ref": "AssetEnhancement"
											},
											"enhance_moves": {
												"elements": {
													"ref": "MoveEnhancement"
												}
											}
										},
										"metadata": {
											"description": "Represents an option in a list of choices."
										}
									},
									"choice_group": {
										"properties": {
											"name": {
												"ref": "InputLabel",
												"metadata": {
													"description": "A label for this option group."
												}
											},
											"choices": {
												"values": {
													"ref": "SelectEnhancementFieldChoice"
												},
												"metadata": {
													"propertyPattern": "^([a-z][a-z_]*)$"
												}
											}
										},
										"metadata": {
											"description": "Represents a grouping of options in a list of choices."
										}
									}
								}
							},
							"metadata": {
								"propertyPattern": "^([a-z][a-z_]*)$"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles)."
					}
				},
				"text": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"value": {
							"type": "string"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents an input that accepts plain text."
					}
				}
			},
			"metadata": {
				"description": "Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset."
			}
		},
		"SelectEnhancementFieldChoice": {
			"properties": {
				"label": {
					"ref": "InputLabel"
				},
				"choice_type": {
					"enum": [
						"choice"
					]
				}
			},
			"optionalProperties": {
				"enhance_asset": {
					"ref": "AssetEnhancement"
				},
				"enhance_moves": {
					"elements": {
						"ref": "MoveEnhancement"
					}
				}
			},
			"metadata": {
				"description": "Represents an option in a list of choices."
			}
		},
		"SelectValueFieldChoice": {
			"discriminator": "using",
			"mapping": {
				"stat": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"choice_type": {
							"enum": [
								"choice"
							]
						},
						"stat": {
							"ref": "StatKey"
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"condition_meter": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"choice_type": {
							"enum": [
								"choice"
							]
						},
						"condition_meter": {
							"ref": "ConditionMeterKey"
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"asset_control": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"choice_type": {
							"enum": [
								"choice"
							]
						},
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": [
									"health",
									"integrity"
								]
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"asset_option": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"choice_type": {
							"enum": [
								"choice"
							]
						},
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"attached_asset_control": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"choice_type": {
							"enum": [
								"choice"
							]
						},
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": [
									"health",
									"integrity"
								]
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"attached_asset_option": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"choice_type": {
							"enum": [
								"choice"
							]
						},
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"custom": {
					"properties": {
						"label": {
							"ref": "InputLabel"
						},
						"choice_type": {
							"enum": [
								"choice"
							]
						},
						"value": {
							"type": "int16"
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				}
			}
		},
		"Truth": {
			"properties": {
				"_id": {
					"ref": "TruthId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"options": {
					"elements": {
						"ref": "TruthOption"
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"icon": {
					"ref": "SvgImageUrl"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"your_character": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {
				"description": "A setting truth category."
			}
		},
		"TruthOption": {
			"properties": {
				"description": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"min": {
					"type": "int16"
				},
				"max": {
					"type": "int16"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"table": {
					"elements": {
						"ref": "OracleTableRowText"
					}
				}
			}
		},
		"Atlas": {
			"properties": {
				"_id": {
					"ref": "AtlasId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"type": {
					"enum": [
						"atlas"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this collection."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"ref": "AtlasId",
					"metadata": {
						"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
					}
				},
				"replaces": {
					"ref": "AtlasId",
					"metadata": {
						"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
					}
				},
				"contents": {
					"values": {
						"ref": "AtlasEntry"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				},
				"collections": {
					"values": {
						"ref": "Atlas"
					},
					"metadata": {
						"propertyPattern": "^([a-z][a-z_]*)$"
					}
				}
			}
		},
		"AtlasEntry": {
			"properties": {
				"_id": {
					"ref": "AtlasEntryId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"features": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"type": {
					"enum": [
						"atlas_entry"
					]
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				},
				"your_truth": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {
				"description": "An atlas entry, like the Ironlands region entries found in classic Ironsworn."
			}
		},
		"ConditionMeterKey": {
			"ref": "DictKey",
			"metadata": {
				"description": "A basic, rollable player character resource specified by the ruleset.",
				"examples": [
					"health",
					"spirit",
					"supply"
				]
			}
		},
		"StatKey": {
			"ref": "DictKey",
			"metadata": {
				"description": "A basic player character stat.",
				"examples": [
					"edge",
					"heart",
					"iron",
					"shadow",
					"wits"
				]
			}
		},
		"Rarity": {
			"properties": {
				"_id": {
					"ref": "RarityId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"asset": {
					"ref": "AssetId",
					"metadata": {
						"description": "The asset augmented by this rarity."
					}
				},
				"xp_cost": {
					"type": "int16",
					"metadata": {
						"description": "From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity."
					}
				},
				"description": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"icon": {
					"ref": "SvgImageUrl"
				}
			},
			"metadata": {
				"description": "A rarity, as described in Ironsworn: Delve."
			}
		},
		"DelveSite": {
			"properties": {
				"_id": {
					"ref": "DelveSiteId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"rank": {
					"ref": "ChallengeRank"
				},
				"theme": {
					"ref": "DelveSiteThemeId"
				},
				"domain": {
					"ref": "DelveSiteDomainId"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"denizens": {
					"elements": {
						"ref": "DelveSiteDenizen"
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"icon": {
					"ref": "SvgImageUrl"
				},
				"region": {
					"ref": "AtlasEntryId",
					"metadata": {
						"description": "The ID of an atlas entry representing the region in which this delve site is located."
					}
				},
				"extra_card": {
					"type": "string",
					"metadata": {
						"description": "An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve."
					}
				}
			},
			"metadata": {
				"description": "A delve site with a theme, domain, and denizens."
			}
		},
		"DelveSiteDenizen": {
			"properties": {
				"_id": {
					"ref": "DelveSiteDenizenId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"min": {
					"type": "int16"
				},
				"max": {
					"type": "int16"
				},
				"frequency": {
					"ref": "DelveSiteDenizenFrequency"
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"name": {
					"ref": "Label"
				},
				"npc": {
					"ref": "NpcId",
					"metadata": {
						"description": "The ID of the relevant NPC entry, if one is specified."
					}
				}
			},
			"metadata": {}
		},
		"DelveSiteDenizenFrequency": {
			"enum": [
				"very_common",
				"common",
				"uncommon",
				"rare",
				"unforeseen"
			]
		},
		"DelveSiteDomain": {
			"properties": {
				"_id": {
					"ref": "DelveSiteDomainId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"features": {
					"elements": {
						"ref": "OracleTableRowText"
					}
				},
				"dangers": {
					"elements": {
						"ref": "OracleTableRowText"
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"icon": {
					"ref": "SvgImageUrl"
				},
				"name_oracle": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "An oracle table ID containing place name elements. For examples, see oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in oracle collection ID `delve/collections/oracles/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (ID: delve/oracles/site_name/format) to create random names for delve sites."
					}
				}
			},
			"metadata": {
				"description": "A delve site Domain card."
			}
		},
		"DelveSiteTheme": {
			"properties": {
				"_id": {
					"ref": "DelveSiteThemeId",
					"metadata": {
						"description": "The unique Datasworn ID for this item."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this item."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information."
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"features": {
					"elements": {
						"ref": "OracleTableRowText"
					}
				},
				"dangers": {
					"elements": {
						"ref": "OracleTableRowText"
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"type": "string",
					"metadata": {
						"description": "Any implementation hints or other developer-facing comments on this object. These should be omitted when presenting the object for gameplay."
					}
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this item as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"values": {
						"values": {
							"ref": "Tag"
						},
						"metadata": {
							"propertyPattern": "^([a-z][a-z_]*)$"
						}
					},
					"metadata": {
						"propertyPattern": "^([a-z0-9_]{3,})$"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"icon": {
					"ref": "SvgImageUrl"
				}
			},
			"metadata": {
				"description": "A delve site theme card."
			}
		}
	}
}