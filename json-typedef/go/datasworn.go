// Code generated by jtd-codegen for Go v0.2.1. DO NOT EDIT.

package Datasworn

import (
	"encoding/json"
	"fmt"
	"time"
)

// Describes game rules compatible with the Ironsworn tabletop role-playing game
// by Shawn Tomkin.
type RulesPackage struct {
	Type string

	Expansion RulesPackageExpansion

	Ruleset RulesPackageRuleset
}

func (v RulesPackage) MarshalJSON() ([]byte, error) {
	switch v.Type {
	case "expansion":
		return json.Marshal(struct { T string `json:"type"`; RulesPackageExpansion }{ v.Type, v.Expansion })
	case "ruleset":
		return json.Marshal(struct { T string `json:"type"`; RulesPackageRuleset }{ v.Type, v.Ruleset })
	}

	return nil, fmt.Errorf("bad Type value: %s", v.Type)
}

func (v *RulesPackage) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "expansion":
		err = json.Unmarshal(b, &v.Expansion)
	case "ruleset":
		err = json.Unmarshal(b, &v.Ruleset)
	default:
		err = fmt.Errorf("bad Type value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.Type = t.T
	return nil
}

// The version of the Datasworn format used by this data.
type RulesPackageExpansionDataswornVersion string

const (
	RulesPackageExpansionDataswornVersion0 RulesPackageExpansionDataswornVersion = "0.0.9"
)

// A Datasworn package that relies on an external package to provide its
// ruleset.
type RulesPackageExpansion struct {
	ID ExpansionID `json:"_id"`

	Ruleset RulesetID `json:"ruleset"`

	// A dictionary object containing asset collections, which contain assets.
	Assets map[string]AssetCollection `json:"assets,omitempty"`

	// A dictionary object containing atlas collections, which contain atlas
	// entries.
	Atlas map[string]Atlas `json:"atlas,omitempty"`

	// Lists authors credited by the source material.
	Authors []AuthorInfo `json:"authors,omitempty"`

	// The version of the Datasworn format used by this data.
	DataswornVersion *RulesPackageExpansionDataswornVersion `json:"datasworn_version,omitempty"`

	// The date of the source documents's last update, formatted YYYY-MM-DD.
	// Required because it's used to determine whether the data needs updating.
	Date *time.Time `json:"date,omitempty"`

	// A dictionary object of delve sites, like the premade delve sites presented
	// in Ironsworn: Delve
	DelveSites map[string]DelveSite `json:"delve_sites,omitempty"`

	Description *MarkdownString `json:"description,omitempty"`

	License *License `json:"license,omitempty"`

	// A dictionary object containing move categories, which contain moves.
	Moves map[string]MoveCategory `json:"moves,omitempty"`

	// A dictionary object containing NPC collections, which contain NPCs.
	Npcs map[string]NpcCollection `json:"npcs,omitempty"`

	// A dictionary object containing oracle collections, which may contain oracle
	// tables and/or oracle collections.
	Oracles map[string]OracleTablesCollection `json:"oracles,omitempty"`

	// A dictionary object containing rarities, like those presented in Ironsworn:
	// Delve.
	Rarities map[string]Rarity `json:"rarities,omitempty"`

	Rules *RulesExpansion `json:"rules,omitempty"`

	// A dictionary object containing delve site domains.
	SiteDomains map[string]DelveSiteDomain `json:"site_domains,omitempty"`

	// A dictionary object containing delve site themes.
	SiteThemes map[string]DelveSiteTheme `json:"site_themes,omitempty"`

	// The title of the source document.
	Title *string `json:"title,omitempty"`

	// A dictionary object of truth categories.
	Truths map[string]Truth `json:"truths,omitempty"`

	// A URL where the source document is available.
	URL *WebURL `json:"url,omitempty"`
}

// The version of the Datasworn format used by this data.
type RulesPackageRulesetDataswornVersion string

const (
	RulesPackageRulesetDataswornVersion0 RulesPackageRulesetDataswornVersion = "0.0.9"
)

// A standalone Datasworn package that describes its own ruleset.
type RulesPackageRuleset struct {
	ID RulesetID `json:"_id"`

	// A dictionary object containing asset collections, which contain assets.
	Assets map[string]AssetCollection `json:"assets"`

	// Lists authors credited by the source material.
	Authors []AuthorInfo `json:"authors"`

	// The version of the Datasworn format used by this data.
	DataswornVersion RulesPackageRulesetDataswornVersion `json:"datasworn_version"`

	// The date of the source documents's last update, formatted YYYY-MM-DD.
	// Required because it's used to determine whether the data needs updating.
	Date time.Time `json:"date"`

	License License `json:"license"`

	// A dictionary object containing move categories, which contain moves.
	Moves map[string]MoveCategory `json:"moves"`

	// A dictionary object containing oracle collections, which may contain oracle
	// tables and/or oracle collections.
	Oracles map[string]OracleTablesCollection `json:"oracles"`

	Rules Rules `json:"rules"`

	// The title of the source document.
	Title string `json:"title"`

	// A URL where the source document is available.
	URL WebURL `json:"url"`

	// A dictionary object containing atlas collections, which contain atlas
	// entries.
	Atlas map[string]Atlas `json:"atlas,omitempty"`

	// A dictionary object of delve sites, like the premade delve sites presented
	// in Ironsworn: Delve
	DelveSites map[string]DelveSite `json:"delve_sites,omitempty"`

	Description *MarkdownString `json:"description,omitempty"`

	// A dictionary object containing NPC collections, which contain NPCs.
	Npcs map[string]NpcCollection `json:"npcs,omitempty"`

	// A dictionary object containing rarities, like those presented in Ironsworn:
	// Delve.
	Rarities map[string]Rarity `json:"rarities,omitempty"`

	// A dictionary object containing delve site domains.
	SiteDomains map[string]DelveSiteDomain `json:"site_domains,omitempty"`

	// A dictionary object containing delve site themes.
	SiteThemes map[string]DelveSiteTheme `json:"site_themes,omitempty"`

	// A dictionary object of truth categories.
	Truths map[string]Truth `json:"truths,omitempty"`
}

type ActionRollMethod string

const (
// Use _every_ roll option at once.
	ActionRollMethodAll ActionRollMethod = "all"

// Use the roll option with the best/highest value.
	ActionRollMethodHighest ActionRollMethod = "highest"

// Use the roll option with the worst/lowest value.
	ActionRollMethodLowest ActionRollMethod = "lowest"

// An automatic miss.
	ActionRollMethodMiss ActionRollMethod = "miss"

// The player chooses which roll option to use.
	ActionRollMethodPlayerChoice ActionRollMethod = "player_choice"

// An automatic strong hit.
	ActionRollMethodStrongHit ActionRollMethod = "strong_hit"

// An automatic weak hit.
	ActionRollMethodWeakHit ActionRollMethod = "weak_hit"
)

type AssetType string

const (
	AssetTypeAsset AssetType = "asset"
)

type Asset struct {
	// The unique Datasworn ID for this item.
	ID AssetID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	Abilities []AssetAbility `json:"abilities"`

	// A localized category label for this asset. This is the surtitle above the
	// asset's name on the card.
	Category Label `json:"category"`

	// If `true`, this asset counts as an impact (Starforged) or a debility
	// (classic Ironsworn).
	CountAsImpact bool `json:"count_as_impact"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	// Most assets only benefit to their owner, but certain assets (like
	// Starforged's module and command vehicle assets) are shared amongst the
	// player's allies, too.
	Shared bool `json:"shared"`

	Type AssetType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	Attachments *AssetAttachment `json:"attachments,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this asset.
	Color *CSSColor `json:"color,omitempty"`

	// Controls are condition meters, clocks, counters, and other asset input
	// fields whose values are expected to change throughout the life of the asset.
	Controls map[string]AssetControlField `json:"controls,omitempty"`

	// This asset's icon.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Options are input fields set when the player purchases the asset. They're
	// likely to remain the same through the life of the asset. Typically, they are
	// rendered at the top of the asset card.
	Options map[string]AssetOptionField `json:"options,omitempty"`

	// Describes prerequisites for purchasing or using this asset.
	Requirement *MarkdownString `json:"requirement,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// An asset ability: one of the purchasable features of an asset. Most assets
// have three.
type AssetAbility struct {
	// The unique Datasworn ID for this item.
	ID AssetAbilityID `json:"_id"`

	// Is this asset ability enabled?
	Enabled bool `json:"enabled"`

	// The complete rules text of this asset ability.
	Text MarkdownString `json:"text"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// Fields whose values are expected to change over the life of the asset.
	Controls map[string]AssetAbilityControlField `json:"controls,omitempty"`

	// Changes made to the asset, when this ability is enabled.
	EnhanceAsset *AssetEnhancement `json:"enhance_asset,omitempty"`

	// Describes changes made to various moves by this asset ability. Usually these
	// require specific trigger conditions.
	EnhanceMoves []MoveEnhancement `json:"enhance_moves,omitempty"`

	// Unique moves added by this asset ability.
	Moves map[string]Move `json:"moves,omitempty"`

	// A handful of asset abilities have a label/name, for instance classic
	// Ironsworn companion assets. Most canonical assets omit this property.
	Name *Label `json:"name,omitempty"`

	// Fields that are expected to be set once and remain the same through the life
	// of the asset.
	Options map[string]AssetAbilityOptionField `json:"options,omitempty"`
}

type AssetAbilityControlField struct {
	FieldType string

	Checkbox AssetAbilityControlFieldCheckbox

	Clock AssetAbilityControlFieldClock

	Counter AssetAbilityControlFieldCounter

	Text AssetAbilityControlFieldText
}

func (v AssetAbilityControlField) MarshalJSON() ([]byte, error) {
	switch v.FieldType {
	case "checkbox":
		return json.Marshal(struct { T string `json:"field_type"`; AssetAbilityControlFieldCheckbox }{ v.FieldType, v.Checkbox })
	case "clock":
		return json.Marshal(struct { T string `json:"field_type"`; AssetAbilityControlFieldClock }{ v.FieldType, v.Clock })
	case "counter":
		return json.Marshal(struct { T string `json:"field_type"`; AssetAbilityControlFieldCounter }{ v.FieldType, v.Counter })
	case "text":
		return json.Marshal(struct { T string `json:"field_type"`; AssetAbilityControlFieldText }{ v.FieldType, v.Text })
	}

	return nil, fmt.Errorf("bad FieldType value: %s", v.FieldType)
}

func (v *AssetAbilityControlField) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"field_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "checkbox":
		err = json.Unmarshal(b, &v.Checkbox)
	case "clock":
		err = json.Unmarshal(b, &v.Clock)
	case "counter":
		err = json.Unmarshal(b, &v.Counter)
	case "text":
		err = json.Unmarshal(b, &v.Text)
	default:
		err = fmt.Errorf("bad FieldType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.FieldType = t.T
	return nil
}

type AssetAbilityControlFieldCheckbox struct {
	// Does this field disable the asset when its value is set to `true`?
	DisablesAsset bool `json:"disables_asset"`

	// Does this field count as an impact (Starforged) or debility (Ironsworn
	// classic) when its value is set to `true`?
	IsImpact bool `json:"is_impact"`

	Label InputLabel `json:"label"`

	// Is the box checked?
	Value bool `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// A clock with 4 or more segments.
type AssetAbilityControlFieldClock struct {
	Label InputLabel `json:"label"`

	// The size of the clock -- in other words, the maximum number of filled clock
	// segments. Standard clocks have 4, 6, 8, or 10 segments.
	Max int8 `json:"max"`

	// The minimum number of filled clock segments. This is always 0.
	Min int8 `json:"min"`

	Rollable bool `json:"rollable"`

	// The current value of this input.
	Value int8 `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// A basic counter representing a non-rollable integer value. They usually start
// at 0, and may or may not have a maximum.
type AssetAbilityControlFieldCounter struct {
	Label InputLabel `json:"label"`

	Max int16 `json:"max"`

	// The (inclusive) minimum value.
	Min int8 `json:"min"`

	Rollable bool `json:"rollable"`

	// The current value of this input.
	Value int8 `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// Represents an input that accepts plain text.
type AssetAbilityControlFieldText struct {
	Label InputLabel `json:"label"`

	Value string `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// A unique ID for an AssetAbility.
type AssetAbilityID = string

type AssetAbilityOptionField struct {
	FieldType string

	Text AssetAbilityOptionFieldText
}

func (v AssetAbilityOptionField) MarshalJSON() ([]byte, error) {
	switch v.FieldType {
	case "text":
		return json.Marshal(struct { T string `json:"field_type"`; AssetAbilityOptionFieldText }{ v.FieldType, v.Text })
	}

	return nil, fmt.Errorf("bad FieldType value: %s", v.FieldType)
}

func (v *AssetAbilityOptionField) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"field_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "text":
		err = json.Unmarshal(b, &v.Text)
	default:
		err = fmt.Errorf("bad FieldType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.FieldType = t.T
	return nil
}

// Represents an input that accepts plain text.
type AssetAbilityOptionFieldText struct {
	Label InputLabel `json:"label"`

	Value string `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// Describes which assets can be attached to this asset. Example: Starforged's
// Module assets, which can be equipped by Command Vehicle assets. See p. 55 of
// Starforged for more info.
type AssetAttachment struct {
	// Asset IDs (which may be wildcards) that may be attached to this asset
	Assets []AssetIDWildcard `json:"assets"`

	Max int16 `json:"max"`
}

type AssetCollectionType string

const (
	AssetCollectionTypeAssetCollection AssetCollectionType = "asset_collection"
)

type AssetCollection struct {
	// The unique Datasworn ID for this item.
	ID AssetCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type AssetCollectionType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]Asset `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *AssetCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *AssetCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// A unique ID for an AssetCollection.
type AssetCollectionID = string

// A checkbox control field, rendered as part of an asset condition meter.
type AssetConditionMeterControlField struct {
	FieldType string

	CardFlip AssetConditionMeterControlFieldCardFlip

	Checkbox AssetConditionMeterControlFieldCheckbox
}

func (v AssetConditionMeterControlField) MarshalJSON() ([]byte, error) {
	switch v.FieldType {
	case "card_flip":
		return json.Marshal(struct { T string `json:"field_type"`; AssetConditionMeterControlFieldCardFlip }{ v.FieldType, v.CardFlip })
	case "checkbox":
		return json.Marshal(struct { T string `json:"field_type"`; AssetConditionMeterControlFieldCheckbox }{ v.FieldType, v.Checkbox })
	}

	return nil, fmt.Errorf("bad FieldType value: %s", v.FieldType)
}

func (v *AssetConditionMeterControlField) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"field_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "card_flip":
		err = json.Unmarshal(b, &v.CardFlip)
	case "checkbox":
		err = json.Unmarshal(b, &v.Checkbox)
	default:
		err = fmt.Errorf("bad FieldType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.FieldType = t.T
	return nil
}

type AssetConditionMeterControlFieldCardFlip struct {
	// Does this field disable the asset when its value is set to `true`?
	DisablesAsset bool `json:"disables_asset"`

	// Does this field count as an impact (Starforged) or debility (Ironsworn
	// classic) when its value is set to `true`?
	IsImpact bool `json:"is_impact"`

	Label InputLabel `json:"label"`

	// Is the card flipped over?
	Value bool `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

type AssetConditionMeterControlFieldCheckbox struct {
	// Does this field disable the asset when its value is set to `true`?
	DisablesAsset bool `json:"disables_asset"`

	// Does this field count as an impact (Starforged) or debility (Ironsworn
	// classic) when its value is set to `true`?
	IsImpact bool `json:"is_impact"`

	Label InputLabel `json:"label"`

	// Is the box checked?
	Value bool `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

type AssetControlField struct {
	FieldType string

	CardFlip AssetControlFieldCardFlip

	Checkbox AssetControlFieldCheckbox

	ConditionMeter AssetControlFieldConditionMeter

	SelectEnhancement AssetControlFieldSelectEnhancement
}

func (v AssetControlField) MarshalJSON() ([]byte, error) {
	switch v.FieldType {
	case "card_flip":
		return json.Marshal(struct { T string `json:"field_type"`; AssetControlFieldCardFlip }{ v.FieldType, v.CardFlip })
	case "checkbox":
		return json.Marshal(struct { T string `json:"field_type"`; AssetControlFieldCheckbox }{ v.FieldType, v.Checkbox })
	case "condition_meter":
		return json.Marshal(struct { T string `json:"field_type"`; AssetControlFieldConditionMeter }{ v.FieldType, v.ConditionMeter })
	case "select_enhancement":
		return json.Marshal(struct { T string `json:"field_type"`; AssetControlFieldSelectEnhancement }{ v.FieldType, v.SelectEnhancement })
	}

	return nil, fmt.Errorf("bad FieldType value: %s", v.FieldType)
}

func (v *AssetControlField) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"field_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "card_flip":
		err = json.Unmarshal(b, &v.CardFlip)
	case "checkbox":
		err = json.Unmarshal(b, &v.Checkbox)
	case "condition_meter":
		err = json.Unmarshal(b, &v.ConditionMeter)
	case "select_enhancement":
		err = json.Unmarshal(b, &v.SelectEnhancement)
	default:
		err = fmt.Errorf("bad FieldType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.FieldType = t.T
	return nil
}

type AssetControlFieldCardFlip struct {
	// Does this field disable the asset when its value is set to `true`?
	DisablesAsset bool `json:"disables_asset"`

	// Does this field count as an impact (Starforged) or debility (Ironsworn
	// classic) when its value is set to `true`?
	IsImpact bool `json:"is_impact"`

	Label InputLabel `json:"label"`

	// Is the card flipped over?
	Value bool `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

type AssetControlFieldCheckbox struct {
	// Does this field disable the asset when its value is set to `true`?
	DisablesAsset bool `json:"disables_asset"`

	// Does this field count as an impact (Starforged) or debility (Ironsworn
	// classic) when its value is set to `true`?
	IsImpact bool `json:"is_impact"`

	Label InputLabel `json:"label"`

	// Is the box checked?
	Value bool `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// Provides hints for moves that interact with this condition meter, such as
// suffer and recovery moves.
type AssetControlFieldConditionMeterMoves struct {
	// The ID(s) of recovery moves associated with this meter.
	Recover []MoveIDWildcard `json:"recover,omitempty"`

	// The ID(s) of suffer moves associated with the condition meter. If the
	// suffer move makes an action roll, this condition meter value should be made
	// available as a roll option.
	Suffer []MoveIDWildcard `json:"suffer,omitempty"`
}

// Some assets provide a special condition meter of their own. The most common
// example is the health meters on companion assets. Asset condition meters
// may also include their own controls, such as the checkboxes that Starforged
// companion assets use to indicate they are "out of action".
type AssetControlFieldConditionMeter struct {
	Label InputLabel `json:"label"`

	// The maximum value of this meter.
	Max int8 `json:"max"`

	// The minimum value of this meter.
	Min int8 `json:"min"`

	// Is this meter's `value` usable as a stat in an action roll?
	Rollable bool `json:"rollable"`

	// The current value of this meter.
	Value int8 `json:"value"`

	// Checkbox controls rendered as part of the condition meter.
	Controls map[string]AssetConditionMeterControlField `json:"controls,omitempty"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Provides hints for moves that interact with this condition meter, such as
	// suffer and recovery moves.
	Moves *AssetControlFieldConditionMeterMoves `json:"moves,omitempty"`
}

type AssetControlFieldSelectEnhancementChoice struct {
	ChoiceType string

	Choice AssetControlFieldSelectEnhancementChoiceChoice

	ChoiceGroup AssetControlFieldSelectEnhancementChoiceChoiceGroup
}

func (v AssetControlFieldSelectEnhancementChoice) MarshalJSON() ([]byte, error) {
	switch v.ChoiceType {
	case "choice":
		return json.Marshal(struct { T string `json:"choice_type"`; AssetControlFieldSelectEnhancementChoiceChoice }{ v.ChoiceType, v.Choice })
	case "choice_group":
		return json.Marshal(struct { T string `json:"choice_type"`; AssetControlFieldSelectEnhancementChoiceChoiceGroup }{ v.ChoiceType, v.ChoiceGroup })
	}

	return nil, fmt.Errorf("bad ChoiceType value: %s", v.ChoiceType)
}

func (v *AssetControlFieldSelectEnhancementChoice) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"choice_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "choice":
		err = json.Unmarshal(b, &v.Choice)
	case "choice_group":
		err = json.Unmarshal(b, &v.ChoiceGroup)
	default:
		err = fmt.Errorf("bad ChoiceType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.ChoiceType = t.T
	return nil
}

// Represents an option in a list of choices.
type AssetControlFieldSelectEnhancementChoiceChoice struct {
	Label InputLabel `json:"label"`

	EnhanceAsset *AssetEnhancement `json:"enhance_asset,omitempty"`

	EnhanceMoves []MoveEnhancement `json:"enhance_moves,omitempty"`
}

// Represents a grouping of options in a list of choices.
type AssetControlFieldSelectEnhancementChoiceChoiceGroup struct {
	Choices map[string]SelectEnhancementFieldChoice `json:"choices"`

	// A label for this option group.
	Name InputLabel `json:"name"`
}

// Select from player and/or asset enhancements. Use it to describe modal
// abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder
// (Sundered Isles).
type AssetControlFieldSelectEnhancement struct {
	Choices map[string]AssetControlFieldSelectEnhancementChoice `json:"choices"`

	Label InputLabel `json:"label"`

	// The key of the currently selected choice from the `choices` property, or
	// `null` if none is selected.
	Value DictKey `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

type AssetControlFieldEnhancement struct {
	FieldType string

	ConditionMeter AssetControlFieldEnhancementConditionMeter
}

func (v AssetControlFieldEnhancement) MarshalJSON() ([]byte, error) {
	switch v.FieldType {
	case "condition_meter":
		return json.Marshal(struct { T string `json:"field_type"`; AssetControlFieldEnhancementConditionMeter }{ v.FieldType, v.ConditionMeter })
	}

	return nil, fmt.Errorf("bad FieldType value: %s", v.FieldType)
}

func (v *AssetControlFieldEnhancement) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"field_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "condition_meter":
		err = json.Unmarshal(b, &v.ConditionMeter)
	default:
		err = fmt.Errorf("bad FieldType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.FieldType = t.T
	return nil
}

// Some assets provide a special condition meter of their own. The most common
// example is the health meters on companion assets. Asset condition meters
// may also include their own controls, such as the checkboxes that Starforged
// companion assets use to indicate they are "out of action".
type AssetControlFieldEnhancementConditionMeter struct {
	// The maximum value of this meter.
	Max int8 `json:"max"`
}

// Describes enhancements made to this asset in a partial asset object. The
// changes should be applied recursively; only the values that are specified
// should be changed.
type AssetEnhancement struct {
	Attachments *AssetAttachment `json:"attachments,omitempty"`

	// Controls are condition meters, clocks, counters, and other asset input
	// fields whose values are expected to change throughout the life of the asset.
	Controls map[string]AssetControlFieldEnhancement `json:"controls,omitempty"`

	// If `true`, this asset counts as an impact (Starforged) or a debility
	// (classic Ironsworn).
	CountAsImpact *bool `json:"count_as_impact,omitempty"`

	// Most assets only benefit to their owner, but certain assets (like
	// Starforged's module and command vehicle assets) are shared amongst the
	// player's allies, too.
	Shared *bool `json:"shared,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`
}

// A unique ID for an Asset.
type AssetID = string

// A wildcarded ID that can be used to match multiple Assets.
type AssetIDWildcard = string

// Options are asset input fields which are set once, usually when the character
// takes the asset. The most common example is the "name" field on companion
// assets. A more complex example is the choice of a god's stat for the Devotant
// asset.
type AssetOptionField struct {
	FieldType string

	SelectEnhancement AssetOptionFieldSelectEnhancement

	SelectValue AssetOptionFieldSelectValue

	Text AssetOptionFieldText
}

func (v AssetOptionField) MarshalJSON() ([]byte, error) {
	switch v.FieldType {
	case "select_enhancement":
		return json.Marshal(struct { T string `json:"field_type"`; AssetOptionFieldSelectEnhancement }{ v.FieldType, v.SelectEnhancement })
	case "select_value":
		return json.Marshal(struct { T string `json:"field_type"`; AssetOptionFieldSelectValue }{ v.FieldType, v.SelectValue })
	case "text":
		return json.Marshal(struct { T string `json:"field_type"`; AssetOptionFieldText }{ v.FieldType, v.Text })
	}

	return nil, fmt.Errorf("bad FieldType value: %s", v.FieldType)
}

func (v *AssetOptionField) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"field_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "select_enhancement":
		err = json.Unmarshal(b, &v.SelectEnhancement)
	case "select_value":
		err = json.Unmarshal(b, &v.SelectValue)
	case "text":
		err = json.Unmarshal(b, &v.Text)
	default:
		err = fmt.Errorf("bad FieldType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.FieldType = t.T
	return nil
}

type AssetOptionFieldSelectEnhancementChoice struct {
	ChoiceType string

	Choice AssetOptionFieldSelectEnhancementChoiceChoice

	ChoiceGroup AssetOptionFieldSelectEnhancementChoiceChoiceGroup
}

func (v AssetOptionFieldSelectEnhancementChoice) MarshalJSON() ([]byte, error) {
	switch v.ChoiceType {
	case "choice":
		return json.Marshal(struct { T string `json:"choice_type"`; AssetOptionFieldSelectEnhancementChoiceChoice }{ v.ChoiceType, v.Choice })
	case "choice_group":
		return json.Marshal(struct { T string `json:"choice_type"`; AssetOptionFieldSelectEnhancementChoiceChoiceGroup }{ v.ChoiceType, v.ChoiceGroup })
	}

	return nil, fmt.Errorf("bad ChoiceType value: %s", v.ChoiceType)
}

func (v *AssetOptionFieldSelectEnhancementChoice) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"choice_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "choice":
		err = json.Unmarshal(b, &v.Choice)
	case "choice_group":
		err = json.Unmarshal(b, &v.ChoiceGroup)
	default:
		err = fmt.Errorf("bad ChoiceType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.ChoiceType = t.T
	return nil
}

// Represents an option in a list of choices.
type AssetOptionFieldSelectEnhancementChoiceChoice struct {
	Label InputLabel `json:"label"`

	EnhanceAsset *AssetEnhancement `json:"enhance_asset,omitempty"`

	EnhanceMoves []MoveEnhancement `json:"enhance_moves,omitempty"`
}

// Represents a grouping of options in a list of choices.
type AssetOptionFieldSelectEnhancementChoiceChoiceGroup struct {
	Choices map[string]SelectEnhancementFieldChoice `json:"choices"`

	// A label for this option group.
	Name InputLabel `json:"name"`
}

// Select from player and/or asset enhancements. Use it to describe modal
// abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder
// (Sundered Isles).
type AssetOptionFieldSelectEnhancement struct {
	Choices map[string]AssetOptionFieldSelectEnhancementChoice `json:"choices"`

	Label InputLabel `json:"label"`

	// The key of the currently selected choice from the `choices` property, or
	// `null` if none is selected.
	Value DictKey `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// Represents a list of mutually exclusive choices.
type AssetOptionFieldSelectValue struct {
	Choices map[string]SelectValueFieldChoice `json:"choices"`

	Label InputLabel `json:"label"`

	// The key of the currently selected choice from the `choices` property, or
	// `null` if none is selected.
	Value DictKey `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

// Represents an input that accepts plain text.
type AssetOptionFieldText struct {
	Label InputLabel `json:"label"`

	Value string `json:"value"`

	// An icon associated with this input.
	Icon *SvgImageURL `json:"icon,omitempty"`
}

type AtlasType string

const (
	AtlasTypeAtlas AtlasType = "atlas"
)

type Atlas struct {
	// The unique Datasworn ID for this item.
	ID AtlasID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type AtlasType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	Collections map[string]Atlas `json:"collections,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]AtlasEntry `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *AtlasID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *AtlasID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type AtlasEntryType string

const (
	AtlasEntryTypeAtlasEntry AtlasEntryType = "atlas_entry"
)

// An atlas entry, like the Ironlands region entries found in classic Ironsworn.
type AtlasEntry struct {
	// The unique Datasworn ID for this item.
	ID AtlasEntryID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	Description MarkdownString `json:"description"`

	Features []MarkdownString `json:"features"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type AtlasEntryType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	QuestStarter *MarkdownString `json:"quest_starter,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`

	YourTruth *MarkdownString `json:"your_truth,omitempty"`
}

// A unique ID for an AtlasEntry.
type AtlasEntryID = string

// A unique ID for an Atlas.
type AtlasID = string

// Information on the original creator of this material.
type AuthorInfo struct {
	Name string `json:"name"`

	// An optional email contact for the author
	Email *string `json:"email,omitempty"`

	// An optional URL for the author's website.
	URL *string `json:"url,omitempty"`
}

// Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).
type ChallengeRank = uint8

// A basic, rollable player character resource specified by the ruleset.
type ConditionMeterKey = DictKey

// Describes a standard player character condition meter.
type ConditionMeterRule struct {
	// A description of this condition meter.
	Description MarkdownString `json:"description"`

	Label InputLabel `json:"label"`

	// The maximum value of this meter.
	Max int8 `json:"max"`

	// The minimum value of this meter.
	Min int8 `json:"min"`

	// Is this meter's `value` usable as a stat in an action roll?
	Rollable bool `json:"rollable"`

	// Is this condition meter shared by all players?
	Shared bool `json:"shared"`

	// The current value of this meter.
	Value int8 `json:"value"`
}

// A CSS color value.
type CSSColor = string

type DelveSiteType string

const (
	DelveSiteTypeDelveSite DelveSiteType = "delve_site"
)

// A delve site with a theme, domain, and denizens.
type DelveSite struct {
	// The unique Datasworn ID for this item.
	ID DelveSiteID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	Denizens []DelveSiteDenizen `json:"denizens"`

	Description MarkdownString `json:"description"`

	Domain DelveSiteDomainID `json:"domain"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Rank ChallengeRank `json:"rank"`

	Theme DelveSiteThemeID `json:"theme"`

	Type DelveSiteType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// An additional theme or domain card ID, for use with optional rules in
	// Ironsworn: Delve.
	ExtraCard *string `json:"extra_card,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	// The ID of an atlas entry representing the region in which this delve site
	// is located.
	Region *AtlasEntryID `json:"region,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type DelveSiteDenizen struct {
	// The unique Datasworn ID for this item.
	ID DelveSiteDenizenID `json:"_id"`

	Frequency DelveSiteDenizenFrequency `json:"frequency"`

	Max int16 `json:"max"`

	Min int16 `json:"min"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	Name *Label `json:"name,omitempty"`

	// The ID of the relevant NPC entry, if one is specified.
	Npc *NpcID `json:"npc,omitempty"`
}

type DelveSiteDenizenFrequency string

const (
	DelveSiteDenizenFrequencyCommon DelveSiteDenizenFrequency = "common"

	DelveSiteDenizenFrequencyRare DelveSiteDenizenFrequency = "rare"

	DelveSiteDenizenFrequencyUncommon DelveSiteDenizenFrequency = "uncommon"

	DelveSiteDenizenFrequencyUnforeseen DelveSiteDenizenFrequency = "unforeseen"

	DelveSiteDenizenFrequencyVeryCommon DelveSiteDenizenFrequency = "very_common"
)

// A unique ID for a DelveSiteDenizen.
type DelveSiteDenizenID = string

type DelveSiteDomainType string

const (
	DelveSiteDomainTypeDelveSiteDomain DelveSiteDomainType = "delve_site_domain"
)

// A delve site Domain card.
type DelveSiteDomain struct {
	// The unique Datasworn ID for this item.
	ID DelveSiteDomainID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	Dangers []OracleTableRowText `json:"dangers"`

	Features []OracleTableRowText `json:"features"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Summary MarkdownString `json:"summary"`

	Type DelveSiteDomainType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	Description *MarkdownString `json:"description,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	// An oracle table ID containing place name elements. For examples, see
	// oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in
	// oracle collection ID `delve/collections/oracles/site_name/place`. These
	// oracles are used by the site name oracle from Ironsworn: Delve (ID:
	// delve/oracles/site_name/format) to create random names for delve sites.
	NameOracle *OracleRollableID `json:"name_oracle,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// A unique ID for a DelveSiteDomain.
type DelveSiteDomainID = string

// A unique ID for a DelveSite.
type DelveSiteID = string

type DelveSiteThemeType string

const (
	DelveSiteThemeTypeDelveSiteTheme DelveSiteThemeType = "delve_site_theme"
)

// A delve site theme card.
type DelveSiteTheme struct {
	// The unique Datasworn ID for this item.
	ID DelveSiteThemeID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	Dangers []OracleTableRowText `json:"dangers"`

	Features []OracleTableRowText `json:"features"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Summary MarkdownString `json:"summary"`

	Type DelveSiteThemeType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	Description *MarkdownString `json:"description,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// A unique ID for a DelveSiteTheme.
type DelveSiteThemeID = string

// A simple dice roll expression with an optional modifer.
type DiceExpression = string

// A `snake_case` key used in a Datasworn dictionary object.
type DictKey = string

// The ID of a Datasworn package that relies on an external package to provide
// its ruleset.
type ExpansionID = string

type I18nHint struct {
	// The part of speech for this string.
	PartOfSpeech *PartOfSpeech `json:"part_of_speech,omitempty"`
}

type I18nHintsTemplate struct {
	Text *I18nHint `json:"text,omitempty"`

	Text2 *I18nHint `json:"text2,omitempty"`

	Text3 *I18nHint `json:"text3,omitempty"`
}

// Internationalization/localization hints for the text content of this object.
type I18nHints struct {
	Template *I18nHintsTemplate `json:"template,omitempty"`

	Text *I18nHint `json:"text,omitempty"`

	Text2 *I18nHint `json:"text2,omitempty"`

	Text3 *I18nHint `json:"text3,omitempty"`
}

// Describes a category of standard impacts/debilities.
type ImpactCategory struct {
	// A dictionary object of the Impacts in this category.
	Contents map[string]ImpactRule `json:"contents"`

	// A description of this impact category.
	Description MarkdownString `json:"description"`

	// A label for this impact category.
	Label InputLabel `json:"label"`
}

// Describes a standard impact/debility.
type ImpactRule struct {
	// A description of this impact.
	Description MarkdownString `json:"description"`

	// The label for this impact.
	Label InputLabel `json:"label"`

	// Is this impact permanent?
	Permanent bool `json:"permanent"`

	// Any ruleset condition meters that can't recover when this impact is active.
	PreventsRecovery []ConditionMeterKey `json:"prevents_recovery"`

	// Is this impact applied to all players at once?
	Shared bool `json:"shared"`
}

// A localized label for an input. In some contexts it may be undesirable to
// render this text, but it should always be exposed to assistive technology
// (e.g. with `aria-label` in HTML).
type InputLabel = string

// A localized plain text name or label.
type Label = string

// An URL pointing to the location where this element's license can be found.
// 
// A `null` here indicates that the content provides __no__ license, and is not
// intended for redistribution.
type License = WebURL

// Localized text, formatted in Markdown.
// 
// It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates
// that the referenced oracle table is rendered there in the source material.
type MarkdownString = string

type Move struct {
	RollType string

	ActionRoll MoveActionRoll

	NoRoll MoveNoRoll

	ProgressRoll MoveProgressRoll

	SpecialTrack MoveSpecialTrack
}

func (v Move) MarshalJSON() ([]byte, error) {
	switch v.RollType {
	case "action_roll":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveActionRoll }{ v.RollType, v.ActionRoll })
	case "no_roll":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveNoRoll }{ v.RollType, v.NoRoll })
	case "progress_roll":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveProgressRoll }{ v.RollType, v.ProgressRoll })
	case "special_track":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveSpecialTrack }{ v.RollType, v.SpecialTrack })
	}

	return nil, fmt.Errorf("bad RollType value: %s", v.RollType)
}

func (v *Move) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"roll_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "action_roll":
		err = json.Unmarshal(b, &v.ActionRoll)
	case "no_roll":
		err = json.Unmarshal(b, &v.NoRoll)
	case "progress_roll":
		err = json.Unmarshal(b, &v.ProgressRoll)
	case "special_track":
		err = json.Unmarshal(b, &v.SpecialTrack)
	default:
		err = fmt.Errorf("bad RollType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.RollType = t.T
	return nil
}

type MoveActionRollType string

const (
	MoveActionRollTypeMove MoveActionRollType = "move"
)

// A move that makes an action roll.
type MoveActionRoll struct {
	// The unique Datasworn ID for this item.
	ID MoveID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Outcomes MoveOutcomes `json:"outcomes"`

	// The complete rules text of the move.
	Text MarkdownString `json:"text"`

	// Trigger conditions for this move.
	Trigger TriggerActionRoll `json:"trigger"`

	Type MoveActionRollType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// Oracles associated with this move. It's not recommended to roll these
	// automatically, as almost all moves present them as an option, not a
	// requirement.
	Oracles []OracleRollableID `json:"oracles,omitempty"`

	// Indicates that this move replaces the identified move. References to the
	// replaced move can be considered equivalent to this move.
	Replaces *MoveID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type MoveNoRollType string

const (
	MoveNoRollTypeMove MoveNoRollType = "move"
)

// A move that makes no progress rolls or action rolls.
type MoveNoRoll struct {
	// The unique Datasworn ID for this item.
	ID MoveID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	// The complete rules text of the move.
	Text MarkdownString `json:"text"`

	// Trigger conditions for this move.
	Trigger TriggerNoRoll `json:"trigger"`

	Type MoveNoRollType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// Oracles associated with this move. It's not recommended to roll these
	// automatically, as almost all moves present them as an option, not a
	// requirement.
	Oracles []OracleRollableID `json:"oracles,omitempty"`

	// Indicates that this move replaces the identified move. References to the
	// replaced move can be considered equivalent to this move.
	Replaces *MoveID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type MoveProgressRollType string

const (
	MoveProgressRollTypeMove MoveProgressRollType = "move"
)

// A progress move that rolls on a standard progress track type (whose features
// are defined by this move object). For progress rolls that use special tracks,
// see MoveSpecialTrack.
type MoveProgressRoll struct {
	// The unique Datasworn ID for this item.
	ID MoveID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Outcomes MoveOutcomes `json:"outcomes"`

	// The complete rules text of the move.
	Text MarkdownString `json:"text"`

	// Describes the common features of progress tracks associated with this move.
	Tracks ProgressTrackTypeInfo `json:"tracks"`

	// Trigger conditions for this move.
	Trigger TriggerProgressRoll `json:"trigger"`

	Type MoveProgressRollType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// Oracles associated with this move. It's not recommended to roll these
	// automatically, as almost all moves present them as an option, not a
	// requirement.
	Oracles []OracleRollableID `json:"oracles,omitempty"`

	// Indicates that this move replaces the identified move. References to the
	// replaced move can be considered equivalent to this move.
	Replaces *MoveID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type MoveSpecialTrackType string

const (
	MoveSpecialTrackTypeMove MoveSpecialTrackType = "move"
)

// A progress move that rolls on a special track, such as Legacies (Starforged)
// or Bonds (classic Ironsworn). For progress moves that use standard progress
// tracks, see MoveProgressRoll instead.
type MoveSpecialTrack struct {
	// The unique Datasworn ID for this item.
	ID MoveID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Outcomes MoveOutcomes `json:"outcomes"`

	// The complete rules text of the move.
	Text MarkdownString `json:"text"`

	// Trigger conditions for this move.
	Trigger TriggerSpecialTrack `json:"trigger"`

	Type MoveSpecialTrackType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// Oracles associated with this move. It's not recommended to roll these
	// automatically, as almost all moves present them as an option, not a
	// requirement.
	Oracles []OracleRollableID `json:"oracles,omitempty"`

	// Indicates that this move replaces the identified move. References to the
	// replaced move can be considered equivalent to this move.
	Replaces *MoveID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type MoveCategoryType string

const (
	MoveCategoryTypeMoveCategory MoveCategoryType = "move_category"
)

type MoveCategory struct {
	// The unique Datasworn ID for this item.
	ID MoveCategoryID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type MoveCategoryType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]Move `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *MoveCategoryID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *MoveCategoryID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// A unique ID for a MoveCategory.
type MoveCategoryID = string

type MoveEnhancement struct {
	RollType string

	ActionRoll MoveEnhancementActionRoll

	NoRoll MoveEnhancementNoRoll

	ProgressRoll MoveEnhancementProgressRoll

	SpecialTrack MoveEnhancementSpecialTrack
}

func (v MoveEnhancement) MarshalJSON() ([]byte, error) {
	switch v.RollType {
	case "action_roll":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveEnhancementActionRoll }{ v.RollType, v.ActionRoll })
	case "no_roll":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveEnhancementNoRoll }{ v.RollType, v.NoRoll })
	case "progress_roll":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveEnhancementProgressRoll }{ v.RollType, v.ProgressRoll })
	case "special_track":
		return json.Marshal(struct { T string `json:"roll_type"`; MoveEnhancementSpecialTrack }{ v.RollType, v.SpecialTrack })
	}

	return nil, fmt.Errorf("bad RollType value: %s", v.RollType)
}

func (v *MoveEnhancement) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"roll_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "action_roll":
		err = json.Unmarshal(b, &v.ActionRoll)
	case "no_roll":
		err = json.Unmarshal(b, &v.NoRoll)
	case "progress_roll":
		err = json.Unmarshal(b, &v.ProgressRoll)
	case "special_track":
		err = json.Unmarshal(b, &v.SpecialTrack)
	default:
		err = fmt.Errorf("bad RollType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.RollType = t.T
	return nil
}

// An object that describes changes to a move. These changes should be applied
// recursively, altering only the specified properties; enhanced arrays should
// be concatencated with the original array value.
type MoveEnhancementActionRoll struct {
	Enhances []MoveIDWildcard `json:"enhances"`

	Trigger *TriggerActionRollEnhancement `json:"trigger,omitempty"`
}

// An object that describes changes to a move. These changes should be applied
// recursively, altering only the specified properties; enhanced arrays should
// be concatencated with the original array value.
type MoveEnhancementNoRoll struct {
	Enhances []MoveIDWildcard `json:"enhances"`

	Trigger *TriggerNoRollEnhancement `json:"trigger,omitempty"`
}

// An object that describes changes to a move. These changes should be applied
// recursively, altering only the specified properties; enhanced arrays should
// be concatencated with the original array value.
type MoveEnhancementProgressRoll struct {
	Enhances []MoveIDWildcard `json:"enhances"`

	Trigger *TriggerProgressRollEnhancement `json:"trigger,omitempty"`
}

// An object that describes changes to a move. These changes should be applied
// recursively, altering only the specified properties; enhanced arrays should
// be concatencated with the original array value.
type MoveEnhancementSpecialTrack struct {
	Enhances []MoveIDWildcard `json:"enhances"`

	Trigger *TriggerSpecialTrackEnhancement `json:"trigger,omitempty"`
}

// A move ID, for a standard move or a unique asset move
type MoveID = string

// A move ID with wildcards.
type MoveIDWildcard = string

type MoveOutcome struct {
	Text MarkdownString `json:"text"`

	OracleRolls []OracleRoll `json:"oracle_rolls,omitempty"`
}

// A standalone localized description for each move outcome (miss, weak hit,
// or strong hit). This is for for e.g. VTT implementations, where it's often
// useful to display only the rules text relevant to a roll result.
// 
//   This often requires light editorialization to create text that can stand
// alone without reference to the rest of the move. For example, 'as above'
// (in reference to another move outcome) shouldn't be used here; instead, the
// relevant text should be repeated.
type MoveOutcomes struct {
	Miss MoveOutcome `json:"miss"`

	StrongHit MoveOutcome `json:"strong_hit"`

	WeakHit MoveOutcome `json:"weak_hit"`
}

type NpcType string

const (
	NpcTypeNpc NpcType = "npc"
)

// A non-player character entry, similar to those in Chapter 5 of the Ironsworn
// Rulebook, or Chapter 4 of Starforged.
type Npc struct {
	// The unique Datasworn ID for this item.
	ID NpcID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	Description MarkdownString `json:"description"`

	Drives []MarkdownString `json:"drives"`

	Features []MarkdownString `json:"features"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Nature NpcNature `json:"nature"`

	// The suggested challenge rank for this NPC.
	Rank ChallengeRank `json:"rank"`

	Tactics []MarkdownString `json:"tactics"`

	Type NpcType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	QuestStarter *MarkdownString `json:"quest_starter,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`

	Variants map[string]NpcVariant `json:"variants,omitempty"`

	YourTruth *MarkdownString `json:"your_truth,omitempty"`
}

type NpcCollectionType string

const (
	NpcCollectionTypeNpcCollection NpcCollectionType = "npc_collection"
)

type NpcCollection struct {
	// The unique Datasworn ID for this item.
	ID NpcCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type NpcCollectionType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]Npc `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *NpcCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *NpcCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// A unique ID for a NpcCollection.
type NpcCollectionID = string

// A unique ID for a Npc.
type NpcID = string

// A localized category label describing the nature of this NPC.
// 
// In Ironsworn classic, this is probably the singular form of the parent
// collection's name.
// 
// For Starforged, see the table on p. 258 for examples.
type NpcNature = Label

type NpcVariant struct {
	// The unique Datasworn ID for this item.
	ID NpcVariantID `json:"_id"`

	Description MarkdownString `json:"description"`

	Name Label `json:"name"`

	Nature NpcNature `json:"nature"`

	// The suggested challenge rank for this NPC.
	Rank ChallengeRank `json:"rank"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	Summary *MarkdownString `json:"summary,omitempty"`
}

// A unique ID for a NpcVariant.
type NpcVariantID = string

type ObjectType string

const (
	ObjectTypeAsset ObjectType = "asset"

	ObjectTypeAssetCollection ObjectType = "asset_collection"

	ObjectTypeAtlas ObjectType = "atlas"

	ObjectTypeAtlasEntry ObjectType = "atlas_entry"

	ObjectTypeDelveSite ObjectType = "delve_site"

	ObjectTypeDelveSiteDomain ObjectType = "delve_site_domain"

	ObjectTypeDelveSiteTheme ObjectType = "delve_site_theme"

	ObjectTypeMove ObjectType = "move"

	ObjectTypeMoveCategory ObjectType = "move_category"

	ObjectTypeNpc ObjectType = "npc"

	ObjectTypeNpcCollection ObjectType = "npc_collection"

	ObjectTypeOracleCollection ObjectType = "oracle_collection"

	ObjectTypeOracleRollable ObjectType = "oracle_rollable"

	ObjectTypeRarity ObjectType = "rarity"

	ObjectTypeTruth ObjectType = "truth"
)

type OracleCollection struct {
	OracleType string

	OracleTableSharedText3 OracleCollectionOracleTableSharedText3

	TableSharedRolls OracleCollectionTableSharedRolls

	TableSharedText OracleCollectionTableSharedText

	TableSharedText2 OracleCollectionTableSharedText2

	Tables OracleCollectionTables
}

func (v OracleCollection) MarshalJSON() ([]byte, error) {
	switch v.OracleType {
	case "OracleTableSharedText3":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleCollectionOracleTableSharedText3 }{ v.OracleType, v.OracleTableSharedText3 })
	case "table_shared_rolls":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleCollectionTableSharedRolls }{ v.OracleType, v.TableSharedRolls })
	case "table_shared_text":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleCollectionTableSharedText }{ v.OracleType, v.TableSharedText })
	case "table_shared_text2":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleCollectionTableSharedText2 }{ v.OracleType, v.TableSharedText2 })
	case "tables":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleCollectionTables }{ v.OracleType, v.Tables })
	}

	return nil, fmt.Errorf("bad OracleType value: %s", v.OracleType)
}

func (v *OracleCollection) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"oracle_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "OracleTableSharedText3":
		err = json.Unmarshal(b, &v.OracleTableSharedText3)
	case "table_shared_rolls":
		err = json.Unmarshal(b, &v.TableSharedRolls)
	case "table_shared_text":
		err = json.Unmarshal(b, &v.TableSharedText)
	case "table_shared_text2":
		err = json.Unmarshal(b, &v.TableSharedText2)
	case "tables":
		err = json.Unmarshal(b, &v.Tables)
	default:
		err = fmt.Errorf("bad OracleType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.OracleType = t.T
	return nil
}

// The label at the head of each table column. The `roll` key refers to the roll
// column showing the dice range (`min` and `max` on each table row).
type OracleCollectionOracleTableSharedText3ColumnLabels struct {
	Text Label `json:"text"`
}

type OracleCollectionOracleTableSharedText3Type string

const (
	OracleCollectionOracleTableSharedText3TypeOracleCollection OracleCollectionOracleTableSharedText3Type = "oracle_collection"
)

// An OracleCollection representing a single table with multiple roll columns,
// and 2 shared text columns.
type OracleCollectionOracleTableSharedText3 struct {
	// The unique Datasworn ID for this item.
	ID OracleCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The label at the head of each table column. The `roll` key refers to the
	// roll column showing the dice range (`min` and `max` on each table row).
	ColumnLabels OracleCollectionOracleTableSharedText3ColumnLabels `json:"column_labels"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type OracleCollectionOracleTableSharedText3Type `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]OracleColumnText3 `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *OracleCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *OracleCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// Provides column labels for this table. The `roll` key refers to the roll
// column showing the dice range (`min` and `max` on each table row). For all
// other column labels, see the `name` property of each child `OracleColumn`.
type OracleCollectionTableSharedRollsColumnLabels struct {
	Roll Label `json:"roll"`
}

type OracleCollectionTableSharedRollsType string

const (
	OracleCollectionTableSharedRollsTypeOracleCollection OracleCollectionTableSharedRollsType = "oracle_collection"
)

// An OracleCollection representing a single table with one roll column and
// multiple `result` columns.
type OracleCollectionTableSharedRolls struct {
	// The unique Datasworn ID for this item.
	ID OracleCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// Provides column labels for this table. The `roll` key refers to the roll
	// column showing the dice range (`min` and `max` on each table row). For all
	// other column labels, see the `name` property of each child `OracleColumn`.
	ColumnLabels OracleCollectionTableSharedRollsColumnLabels `json:"column_labels"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type OracleCollectionTableSharedRollsType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]OracleColumnText `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *OracleCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *OracleCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// The label at the head of each table column. The `roll` key refers to the roll
// column showing the dice range (`min` and `max` on each table row).
type OracleCollectionTableSharedTextColumnLabels struct {
	Text Label `json:"text"`
}

type OracleCollectionTableSharedTextType string

const (
	OracleCollectionTableSharedTextTypeOracleCollection OracleCollectionTableSharedTextType = "oracle_collection"
)

// An OracleCollection representing a single table with multiple roll columns
// and one `result` column.
type OracleCollectionTableSharedText struct {
	// The unique Datasworn ID for this item.
	ID OracleCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The label at the head of each table column. The `roll` key refers to the
	// roll column showing the dice range (`min` and `max` on each table row).
	ColumnLabels OracleCollectionTableSharedTextColumnLabels `json:"column_labels"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type OracleCollectionTableSharedTextType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]OracleColumnText `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *OracleCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *OracleCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// The label at the head of each table column. The `roll` key refers to the roll
// column showing the dice range (`min` and `max` on each table row).
type OracleCollectionTableSharedText2ColumnLabels struct {
	Text Label `json:"text"`

	Text2 Label `json:"text2"`
}

type OracleCollectionTableSharedText2Type string

const (
	OracleCollectionTableSharedText2TypeOracleCollection OracleCollectionTableSharedText2Type = "oracle_collection"
)

// An OracleCollection representing a single table with multiple roll columns,
// and 2 shared text columns.
type OracleCollectionTableSharedText2 struct {
	// The unique Datasworn ID for this item.
	ID OracleCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The label at the head of each table column. The `roll` key refers to the
	// roll column showing the dice range (`min` and `max` on each table row).
	ColumnLabels OracleCollectionTableSharedText2ColumnLabels `json:"column_labels"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type OracleCollectionTableSharedText2Type `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]OracleColumnText2 `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *OracleCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *OracleCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type OracleCollectionTablesType string

const (
	OracleCollectionTablesTypeOracleCollection OracleCollectionTablesType = "oracle_collection"
)

// An OracleCollection that represents a category or grouping of tables, which
// may themselves be `OracleTablesCollection`s.
type OracleCollectionTables struct {
	// The unique Datasworn ID for this item.
	ID OracleCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type OracleCollectionTablesType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	Collections map[string]OracleCollection `json:"collections,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]OracleTableRollable `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *OracleCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *OracleCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// A unique ID for an OracleCollection.
type OracleCollectionID = string

type OracleColumnTextOracleType string

const (
	OracleColumnTextOracleTypeColumnText OracleColumnTextOracleType = "column_text"
)

type OracleColumnTextType string

const (
	OracleColumnTextTypeOracleRollable OracleColumnTextType = "oracle_rollable"
)

// Represents a single column in an OracleCollection.
type OracleColumnText struct {
	// The unique Datasworn ID for this item.
	ID OracleRollableID `json:"_id"`

	// The roll used to select a result on this oracle.
	Dice DiceExpression `json:"dice"`

	// The primary label at the head of this column.
	Name Label `json:"name"`

	OracleType OracleColumnTextOracleType `json:"oracle_type"`

	// An array of objects, each representing a single row of the table.
	Rows []OracleTableRowText `json:"rows"`

	Type OracleColumnTextType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// An optional thematic color for this column. For an example, see "Basic
	// Creature Form" (Starforged p. 337)
	Color *CSSColor `json:"color,omitempty"`

	// An optional icon for this column.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Most oracle tables are insensitive to matches, but a few define special
	// match behavior.
	Match *OracleMatchBehavior `json:"match,omitempty"`

	// Indicates that this object replaces the identified OracleRollable.
	// References to the replaced object can be considered equivalent to this
	// object.
	Replaces *OracleRollableID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// Optional secondary text at the head of this column. For best results, this
	// should be no more than a few words in length.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type OracleColumnText2OracleType string

const (
	OracleColumnText2OracleTypeColumnText2 OracleColumnText2OracleType = "column_text2"
)

type OracleColumnText2Type string

const (
	OracleColumnText2TypeOracleRollable OracleColumnText2Type = "oracle_rollable"
)

type OracleColumnText2 struct {
	// The unique Datasworn ID for this item.
	ID OracleRollableID `json:"_id"`

	// The roll used to select a result on this oracle.
	Dice DiceExpression `json:"dice"`

	// The primary label at the head of this column.
	Name Label `json:"name"`

	OracleType OracleColumnText2OracleType `json:"oracle_type"`

	// An array of objects, each representing a single row of the table.
	Rows []OracleTableRowText2 `json:"rows"`

	Type OracleColumnText2Type `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// An optional thematic color for this column. For an example, see "Basic
	// Creature Form" (Starforged p. 337)
	Color *CSSColor `json:"color,omitempty"`

	// An optional icon for this column.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Most oracle tables are insensitive to matches, but a few define special
	// match behavior.
	Match *OracleMatchBehavior `json:"match,omitempty"`

	// Indicates that this object replaces the identified OracleRollable.
	// References to the replaced object can be considered equivalent to this
	// object.
	Replaces *OracleRollableID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// Optional secondary text at the head of this column. For best results, this
	// should be no more than a few words in length.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type OracleColumnText3OracleType string

const (
	OracleColumnText3OracleTypeColumnText3 OracleColumnText3OracleType = "column_text3"
)

type OracleColumnText3Type string

const (
	OracleColumnText3TypeOracleRollable OracleColumnText3Type = "oracle_rollable"
)

type OracleColumnText3 struct {
	// The unique Datasworn ID for this item.
	ID OracleRollableID `json:"_id"`

	// The roll used to select a result on this oracle.
	Dice DiceExpression `json:"dice"`

	// The primary label at the head of this column.
	Name Label `json:"name"`

	OracleType OracleColumnText3OracleType `json:"oracle_type"`

	// An array of objects, each representing a single row of the table.
	Rows []OracleTableRowText3 `json:"rows"`

	Type OracleColumnText3Type `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// An optional thematic color for this column. For an example, see "Basic
	// Creature Form" (Starforged p. 337)
	Color *CSSColor `json:"color,omitempty"`

	// An optional icon for this column.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Most oracle tables are insensitive to matches, but a few define special
	// match behavior.
	Match *OracleMatchBehavior `json:"match,omitempty"`

	// Indicates that this object replaces the identified OracleRollable.
	// References to the replaced object can be considered equivalent to this
	// object.
	Replaces *OracleRollableID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// Optional secondary text at the head of this column. For best results, this
	// should be no more than a few words in length.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// Special roll instructions to use when rolling multiple times on a single
// oracle.
type OracleDuplicateBehavior string

const (
// Duplicates results should be kept.
	OracleDuplicateBehaviorKeep OracleDuplicateBehavior = "keep"

// Duplicate results should be kept, and they compound to make things worse.
	OracleDuplicateBehaviorMakeItWorse OracleDuplicateBehavior = "make_it_worse"

// Duplicate results should be re-rolled.
	OracleDuplicateBehaviorReroll OracleDuplicateBehavior = "reroll"
)

type OracleMatchBehavior struct {
	Text MarkdownString `json:"text"`
}

type OracleRoll struct {
	// Both Ironsworn and Starforged explicitly recommend *against* rolling
	// all details at once. That said, some oracle results only provide useful
	// information once a secondary roll occurs, such as "Action + Theme" or "Roll
	// twice".
	Auto bool `json:"auto"`

	Dice DiceExpression `json:"dice"`

	// Special rules on how to handle duplicate results, when rolling multiple
	// times.
	Duplicates OracleDuplicateBehavior `json:"duplicates"`

	// The number of times to roll.
	NumberOfRolls int16 `json:"number_of_rolls"`

	Oracle OracleRollableID `json:"oracle"`
}

// Provides string templates that may be used in place of the static
// row text from `OracleTableRow#text`, `OracleTableRow#text2`, and
// `OracleTableRow#text3`.
// 
//   These strings are formatted in Markdown, but use a special syntax for their
// placeholders: `{{text:some_oracle_table_id}}`. The placeholder should be
// replaced with the value of a rolled (or selected) `OracleTableRow#text` from
// the target oracle table ID.
type OracleRollTemplate struct {
	// A string template that may be used in place of OracleTableRow#text.
	Text *TemplateString `json:"text,omitempty"`

	// A string template that may be used in place of OracleTableRow#text2.
	Text2 *TemplateString `json:"text2,omitempty"`

	// A string template that may be used in place of OracleTableRow#text3.
	Text3 *TemplateString `json:"text3,omitempty"`
}

// A unique ID for an OracleRollable.
type OracleRollableID = string

type OracleTableRollable struct {
	OracleType string

	TableText OracleTableRollableTableText

	TableText2 OracleTableRollableTableText2

	TableText3 OracleTableRollableTableText3
}

func (v OracleTableRollable) MarshalJSON() ([]byte, error) {
	switch v.OracleType {
	case "table_text":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleTableRollableTableText }{ v.OracleType, v.TableText })
	case "table_text2":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleTableRollableTableText2 }{ v.OracleType, v.TableText2 })
	case "table_text3":
		return json.Marshal(struct { T string `json:"oracle_type"`; OracleTableRollableTableText3 }{ v.OracleType, v.TableText3 })
	}

	return nil, fmt.Errorf("bad OracleType value: %s", v.OracleType)
}

func (v *OracleTableRollable) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"oracle_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "table_text":
		err = json.Unmarshal(b, &v.TableText)
	case "table_text2":
		err = json.Unmarshal(b, &v.TableText2)
	case "table_text3":
		err = json.Unmarshal(b, &v.TableText3)
	default:
		err = fmt.Errorf("bad OracleType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.OracleType = t.T
	return nil
}

// The label at the head of each table column. The `roll` key refers to the roll
// column showing the dice range (`min` and `max` on each table row).
type OracleTableRollableTableTextColumnLabels struct {
	Roll Label `json:"roll"`

	Text Label `json:"text"`
}

type OracleTableRollableTableTextType string

const (
	OracleTableRollableTableTextTypeOracleRollable OracleTableRollableTableTextType = "oracle_rollable"
)

type OracleTableRollableTableTextRecommendedRolls struct {
	Max int16 `json:"max"`

	Min int16 `json:"min"`
}

// Represents a basic rollable oracle table with one roll column and one text
// result column.
type OracleTableRollableTableText struct {
	// The unique Datasworn ID for this item.
	ID OracleRollableID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The label at the head of each table column. The `roll` key refers to the
	// roll column showing the dice range (`min` and `max` on each table row).
	ColumnLabels OracleTableRollableTableTextColumnLabels `json:"column_labels"`

	// The roll used to select a result on this oracle.
	Dice DiceExpression `json:"dice"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	// An array of objects, each representing a single row of the table.
	Rows []OracleTableRowText `json:"rows"`

	Type OracleTableRollableTableTextType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A longer description of the oracle table's intended usage, which might
	// include multiple paragraphs. If it's only a couple sentences, use the
	// `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// An icon that represents this table.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Most oracle tables are insensitive to matches, but a few define special
	// match behavior.
	Match *OracleMatchBehavior `json:"match,omitempty"`

	RecommendedRolls *OracleTableRollableTableTextRecommendedRolls `json:"recommended_rolls,omitempty"`

	// Indicates that this object replaces the identified OracleRollable.
	// References to the replaced object can be considered equivalent to this
	// object.
	Replaces *OracleRollableID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of the oracle table's intended usage, no more than a few
	// sentences in length. This is intended for use in application tooltips
	// and similar sorts of hints. Longer text should use the "description" key
	// instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// The label at the head of each table column. The `roll` key refers to the roll
// column showing the dice range (`min` and `max` on each table row).
type OracleTableRollableTableText2ColumnLabels struct {
	Roll Label `json:"roll"`

	Text Label `json:"text"`

	Text2 Label `json:"text2"`
}

type OracleTableRollableTableText2Type string

const (
	OracleTableRollableTableText2TypeOracleRollable OracleTableRollableTableText2Type = "oracle_rollable"
)

type OracleTableRollableTableText2RecommendedRolls struct {
	Max int16 `json:"max"`

	Min int16 `json:"min"`
}

// A rollable oracle table with one roll column and two text columns.
type OracleTableRollableTableText2 struct {
	// The unique Datasworn ID for this item.
	ID OracleRollableID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The label at the head of each table column. The `roll` key refers to the
	// roll column showing the dice range (`min` and `max` on each table row).
	ColumnLabels OracleTableRollableTableText2ColumnLabels `json:"column_labels"`

	// The roll used to select a result on this oracle.
	Dice DiceExpression `json:"dice"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	// An array of objects, each representing a single row of the table.
	Rows []OracleTableRowText2 `json:"rows"`

	Type OracleTableRollableTableText2Type `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A longer description of the oracle table's intended usage, which might
	// include multiple paragraphs. If it's only a couple sentences, use the
	// `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// An icon that represents this table.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Most oracle tables are insensitive to matches, but a few define special
	// match behavior.
	Match *OracleMatchBehavior `json:"match,omitempty"`

	RecommendedRolls *OracleTableRollableTableText2RecommendedRolls `json:"recommended_rolls,omitempty"`

	// Indicates that this object replaces the identified OracleRollable.
	// References to the replaced object can be considered equivalent to this
	// object.
	Replaces *OracleRollableID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of the oracle table's intended usage, no more than a few
	// sentences in length. This is intended for use in application tooltips
	// and similar sorts of hints. Longer text should use the "description" key
	// instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// The label at the head of each table column. The `roll` key refers to the roll
// column showing the dice range (`min` and `max` on each table row).
type OracleTableRollableTableText3ColumnLabels struct {
	Roll Label `json:"roll"`

	Text Label `json:"text"`

	Text2 Label `json:"text2"`

	Text3 Label `json:"text3"`
}

type OracleTableRollableTableText3Type string

const (
	OracleTableRollableTableText3TypeOracleRollable OracleTableRollableTableText3Type = "oracle_rollable"
)

type OracleTableRollableTableText3RecommendedRolls struct {
	Max int16 `json:"max"`

	Min int16 `json:"min"`
}

// A rollable oracle table with one roll column and 3 text columns.
type OracleTableRollableTableText3 struct {
	// The unique Datasworn ID for this item.
	ID OracleRollableID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The label at the head of each table column. The `roll` key refers to the
	// roll column showing the dice range (`min` and `max` on each table row).
	ColumnLabels OracleTableRollableTableText3ColumnLabels `json:"column_labels"`

	// The roll used to select a result on this oracle.
	Dice DiceExpression `json:"dice"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	// An array of objects, each representing a single row of the table.
	Rows []OracleTableRowText3 `json:"rows"`

	Type OracleTableRollableTableText3Type `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	// A longer description of the oracle table's intended usage, which might
	// include multiple paragraphs. If it's only a couple sentences, use the
	// `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// An icon that represents this table.
	Icon *SvgImageURL `json:"icon,omitempty"`

	// Most oracle tables are insensitive to matches, but a few define special
	// match behavior.
	Match *OracleMatchBehavior `json:"match,omitempty"`

	RecommendedRolls *OracleTableRollableTableText3RecommendedRolls `json:"recommended_rolls,omitempty"`

	// Indicates that this object replaces the identified OracleRollable.
	// References to the replaced object can be considered equivalent to this
	// object.
	Replaces *OracleRollableID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of the oracle table's intended usage, no more than a few
	// sentences in length. This is intended for use in application tooltips
	// and similar sorts of hints. Longer text should use the "description" key
	// instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// Represents a row in an oracle table, with a single text cell.
type OracleTableRowText struct {
	// High end of the dice range for this table row.
	Max int16 `json:"max"`

	// Low end of the dice range for this table row.
	Min int16 `json:"min"`

	// The primary text content of this row.
	Text MarkdownString `json:"text"`

	I18n *I18nHints `json:"_i18n,omitempty"`

	// Hints that the identified table should be rendered inside this table row.
	EmbedTable *OracleRollableID `json:"embed_table,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	// Further oracle rolls prompted by this table row.
	OracleRolls []OracleRoll `json:"oracle_rolls,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Template *OracleRollTemplate `json:"template,omitempty"`
}

// Represents a row in an oracle table that provides a secondary text field.
type OracleTableRowText2 struct {
	// High end of the dice range for this table row.
	Max int16 `json:"max"`

	// Low end of the dice range for this table row.
	Min int16 `json:"min"`

	// The primary text content of this row.
	Text MarkdownString `json:"text"`

	Text2 MarkdownString `json:"text2"`

	I18n *I18nHints `json:"_i18n,omitempty"`

	// Hints that the identified table should be rendered inside this table row.
	EmbedTable *OracleRollableID `json:"embed_table,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	// Further oracle rolls prompted by this table row.
	OracleRolls []OracleRoll `json:"oracle_rolls,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Template *OracleRollTemplate `json:"template,omitempty"`
}

// Represents a row in an oracle table with 3 text cells.
type OracleTableRowText3 struct {
	// High end of the dice range for this table row.
	Max int16 `json:"max"`

	// Low end of the dice range for this table row.
	Min int16 `json:"min"`

	// The primary text content of this row.
	Text MarkdownString `json:"text"`

	Text2 MarkdownString `json:"text2"`

	Text3 MarkdownString `json:"text3"`

	I18n *I18nHints `json:"_i18n,omitempty"`

	// Hints that the identified table should be rendered inside this table row.
	EmbedTable *OracleRollableID `json:"embed_table,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	// Further oracle rolls prompted by this table row.
	OracleRolls []OracleRoll `json:"oracle_rolls,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Template *OracleRollTemplate `json:"template,omitempty"`
}

// A grouping of separate tables.
type OracleTablesCollectionOracleType string

const (
	OracleTablesCollectionOracleTypeTables OracleTablesCollectionOracleType = "tables"
)

type OracleTablesCollectionType string

const (
	OracleTablesCollectionTypeOracleCollection OracleTablesCollectionType = "oracle_collection"
)

// An OracleCollection that represents a category or grouping of tables, which
// may themselves be `OracleTablesCollection`s.
type OracleTablesCollection struct {
	// The unique Datasworn ID for this item.
	ID OracleCollectionID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	// A grouping of separate tables.
	OracleType OracleTablesCollectionOracleType `json:"oracle_type"`

	Type OracleTablesCollectionType `json:"type"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	Collections map[string]OracleCollection `json:"collections,omitempty"`

	// A thematic color associated with this collection.
	Color *CSSColor `json:"color,omitempty"`

	Contents map[string]OracleTableRollable `json:"contents,omitempty"`

	// A longer description of this collection, which might include multiple
	// paragraphs. If it's only a couple sentences, use the `summary` key instead.
	Description *MarkdownString `json:"description,omitempty"`

	// This collection's content enhances the identified collection, rather than
	// being a standalone collection of its own.
	Enhances *OracleCollectionID `json:"enhances,omitempty"`

	// An SVG icon associated with this collection.
	Icon *SvgImageURL `json:"icon,omitempty"`

	Images []WebpImageURL `json:"images,omitempty"`

	// This collection replaces the identified collection. References to the
	// replaced collection can be considered equivalent to this collection.
	Replaces *OracleCollectionID `json:"replaces,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	// A brief summary of this collection, no more than a few sentences in length.
	// This is intended for use in application tooltips and similar sorts of hints.
	// Longer text should use the "description" key instead.
	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

type PartOfSpeech string

const (
// An adjective.
	PartOfSpeechAdjective PartOfSpeech = "adjective"

// An adjective used as a proper noun.
	PartOfSpeechAdjectiveAsProperNoun PartOfSpeech = "adjective_as_proper_noun"

// A common noun used as an adjective, to modify another noun.
	PartOfSpeechAdjunctCommonNoun PartOfSpeech = "adjunct_common_noun"

// A proper noun used as an adjective, to modify another noun.
	PartOfSpeechAdjunctProperNoun PartOfSpeech = "adjunct_proper_noun"

// A verb used as an adjective, to modify a noun.
	PartOfSpeechAttributiveVerb PartOfSpeech = "attributive_verb"

// A common noun.
	PartOfSpeechCommonNoun PartOfSpeech = "common_noun"

// An common noun used as a proper noun.
	PartOfSpeechCommonNounAsProperNoun PartOfSpeech = "common_noun_as_proper_noun"

// Gerund or present participle of a verb, e.g. "going", "seeing", "waving". Can
// function as a noun, an adjective, or a progressive verb.
	PartOfSpeechGerund PartOfSpeech = "gerund"

// A proper noun.
	PartOfSpeechProperNoun PartOfSpeech = "proper_noun"

// A verb in present tense
	PartOfSpeechVerb PartOfSpeech = "verb"
)

type ProgressRollMethod string

const (
// An automatic miss.
	ProgressRollMethodMiss ProgressRollMethod = "miss"

// Make a progress roll on a progress track associated with this move.
	ProgressRollMethodProgressRoll ProgressRollMethod = "progress_roll"

// An automatic strong hit.
	ProgressRollMethodStrongHit ProgressRollMethod = "strong_hit"

// An automatic weak hit.
	ProgressRollMethodWeakHit ProgressRollMethod = "weak_hit"
)

type ProgressRollOptionUsing string

const (
	ProgressRollOptionUsingProgressTrack ProgressRollOptionUsing = "progress_track"
)

type ProgressRollOption struct {
	Using ProgressRollOptionUsing `json:"using"`
}

// Describes the features of a type of progress track.
type ProgressTrackTypeInfo struct {
	// A category label for progress tracks of this type.
	Category Label `json:"category"`

	Controls map[string]interface{} `json:"controls,omitempty"`
}

type RarityType string

const (
	RarityTypeRarity RarityType = "rarity"
)

// A rarity, as described in Ironsworn: Delve.
type Rarity struct {
	// The unique Datasworn ID for this item.
	ID RarityID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The asset augmented by this rarity.
	Asset AssetID `json:"asset"`

	Description MarkdownString `json:"description"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Type RarityType `json:"type"`

	// From Ironsworn: Delve, p. 174:
	// 
	//       Some assets will bring a rarity into play more often than others, so
	// the experience point cost for a rarity will vary by the linked asset. These
	// costs are shown in the tables on page 175.
	// 
	//       If you are playing solo, and aren’t concerned with the relative
	// balance of rarity abilities, you can ignore these variable costs. If so,
	// spend 3 experience points to purchase a rarity.
	XpCost int16 `json:"xp_cost"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`
}

// A unique ID for a Rarity.
type RarityID = string

// Provides a value like a stat, condition meter, or other number (usually for
// use in an action roll). The expected value is an integer, or null.
type RollableValue struct {
	Using string

	AssetControl RollableValueAssetControl

	AssetOption RollableValueAssetOption

	AttachedAssetControl RollableValueAttachedAssetControl

	AttachedAssetOption RollableValueAttachedAssetOption

	ConditionMeter RollableValueConditionMeter

	Custom RollableValueCustom

	Stat RollableValueStat
}

func (v RollableValue) MarshalJSON() ([]byte, error) {
	switch v.Using {
	case "asset_control":
		return json.Marshal(struct { T string `json:"using"`; RollableValueAssetControl }{ v.Using, v.AssetControl })
	case "asset_option":
		return json.Marshal(struct { T string `json:"using"`; RollableValueAssetOption }{ v.Using, v.AssetOption })
	case "attached_asset_control":
		return json.Marshal(struct { T string `json:"using"`; RollableValueAttachedAssetControl }{ v.Using, v.AttachedAssetControl })
	case "attached_asset_option":
		return json.Marshal(struct { T string `json:"using"`; RollableValueAttachedAssetOption }{ v.Using, v.AttachedAssetOption })
	case "condition_meter":
		return json.Marshal(struct { T string `json:"using"`; RollableValueConditionMeter }{ v.Using, v.ConditionMeter })
	case "custom":
		return json.Marshal(struct { T string `json:"using"`; RollableValueCustom }{ v.Using, v.Custom })
	case "stat":
		return json.Marshal(struct { T string `json:"using"`; RollableValueStat }{ v.Using, v.Stat })
	}

	return nil, fmt.Errorf("bad Using value: %s", v.Using)
}

func (v *RollableValue) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"using"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "asset_control":
		err = json.Unmarshal(b, &v.AssetControl)
	case "asset_option":
		err = json.Unmarshal(b, &v.AssetOption)
	case "attached_asset_control":
		err = json.Unmarshal(b, &v.AttachedAssetControl)
	case "attached_asset_option":
		err = json.Unmarshal(b, &v.AttachedAssetOption)
	case "condition_meter":
		err = json.Unmarshal(b, &v.ConditionMeter)
	case "custom":
		err = json.Unmarshal(b, &v.Custom)
	case "stat":
		err = json.Unmarshal(b, &v.Stat)
	default:
		err = fmt.Errorf("bad Using value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.Using = t.T
	return nil
}

// A reference to the value of an asset control.
type RollableValueAssetControl struct {
	Assets []AssetIDWildcard `json:"assets"`

	// The dictionary key of the asset control field.
	Control DictKey `json:"control"`
}

// A reference to the value of an asset option.
type RollableValueAssetOption struct {
	Assets []AssetIDWildcard `json:"assets"`

	// The dictionary key of the asset option field.
	Option DictKey `json:"option"`
}

// A reference to the value of an attached asset control. For example, a Module
// asset could use this to roll using the `integrity` control of an attached
// Vehicle.
type RollableValueAttachedAssetControl struct {
	// The dictionary key of the asset control field.
	Control DictKey `json:"control"`
}

// A reference to the value of an attached asset option.
type RollableValueAttachedAssetOption struct {
	// The dictionary key of the asset option field.
	Option DictKey `json:"option"`
}

// A reference to the value of a standard player condition meter.
type RollableValueConditionMeter struct {
	ConditionMeter ConditionMeterKey `json:"condition_meter"`
}

// An arbitrary static integer value with a label.
type RollableValueCustom struct {
	Label InputLabel `json:"label"`

	Value int16 `json:"value"`
}

// A reference to the value of a standard player character stat.
type RollableValueStat struct {
	Stat StatKey `json:"stat"`
}

// Describes rules for player characters in this ruleset, such as stats and
// condition meters.
type Rules struct {
	// Describes the standard condition meters used by player characters in this
	// ruleset.
	ConditionMeters map[string]ConditionMeterRule `json:"condition_meters"`

	// Describes the standard impacts/debilities used by player characters in this
	// ruleset.
	Impacts map[string]ImpactCategory `json:"impacts"`

	// Describes the special tracks used by player characters in this ruleset, like
	// Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
	SpecialTracks map[string]SpecialTrackRule `json:"special_tracks"`

	// Describes the standard stats used by player characters in this ruleset.
	Stats map[string]StatRule `json:"stats"`

	Tags map[string]TagRule `json:"tags"`
}

// Describes rules for player characters in this ruleset, such as stats and
// condition meters.
type RulesExpansion struct {
	// Describes the standard condition meters used by player characters in this
	// ruleset.
	ConditionMeters map[string]ConditionMeterRule `json:"condition_meters,omitempty"`

	// Describes the standard impacts/debilities used by player characters in this
	// ruleset.
	Impacts map[string]ImpactCategory `json:"impacts,omitempty"`

	// Describes the special tracks used by player characters in this ruleset, like
	// Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
	SpecialTracks map[string]SpecialTrackRule `json:"special_tracks,omitempty"`

	// Describes the standard stats used by player characters in this ruleset.
	Stats map[string]StatRule `json:"stats,omitempty"`

	Tags map[string]TagRule `json:"tags,omitempty"`
}

// The ID of standalone Datasworn package that describes its own ruleset.
type RulesetID = string

type SelectEnhancementFieldChoiceChoiceType string

const (
	SelectEnhancementFieldChoiceChoiceTypeChoice SelectEnhancementFieldChoiceChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectEnhancementFieldChoice struct {
	ChoiceType SelectEnhancementFieldChoiceChoiceType `json:"choice_type"`

	Label InputLabel `json:"label"`

	EnhanceAsset *AssetEnhancement `json:"enhance_asset,omitempty"`

	EnhanceMoves []MoveEnhancement `json:"enhance_moves,omitempty"`
}

type SelectValueFieldChoice struct {
	Using string

	AssetControl SelectValueFieldChoiceAssetControl

	AssetOption SelectValueFieldChoiceAssetOption

	AttachedAssetControl SelectValueFieldChoiceAttachedAssetControl

	AttachedAssetOption SelectValueFieldChoiceAttachedAssetOption

	ConditionMeter SelectValueFieldChoiceConditionMeter

	Custom SelectValueFieldChoiceCustom

	Stat SelectValueFieldChoiceStat
}

func (v SelectValueFieldChoice) MarshalJSON() ([]byte, error) {
	switch v.Using {
	case "asset_control":
		return json.Marshal(struct { T string `json:"using"`; SelectValueFieldChoiceAssetControl }{ v.Using, v.AssetControl })
	case "asset_option":
		return json.Marshal(struct { T string `json:"using"`; SelectValueFieldChoiceAssetOption }{ v.Using, v.AssetOption })
	case "attached_asset_control":
		return json.Marshal(struct { T string `json:"using"`; SelectValueFieldChoiceAttachedAssetControl }{ v.Using, v.AttachedAssetControl })
	case "attached_asset_option":
		return json.Marshal(struct { T string `json:"using"`; SelectValueFieldChoiceAttachedAssetOption }{ v.Using, v.AttachedAssetOption })
	case "condition_meter":
		return json.Marshal(struct { T string `json:"using"`; SelectValueFieldChoiceConditionMeter }{ v.Using, v.ConditionMeter })
	case "custom":
		return json.Marshal(struct { T string `json:"using"`; SelectValueFieldChoiceCustom }{ v.Using, v.Custom })
	case "stat":
		return json.Marshal(struct { T string `json:"using"`; SelectValueFieldChoiceStat }{ v.Using, v.Stat })
	}

	return nil, fmt.Errorf("bad Using value: %s", v.Using)
}

func (v *SelectValueFieldChoice) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"using"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "asset_control":
		err = json.Unmarshal(b, &v.AssetControl)
	case "asset_option":
		err = json.Unmarshal(b, &v.AssetOption)
	case "attached_asset_control":
		err = json.Unmarshal(b, &v.AttachedAssetControl)
	case "attached_asset_option":
		err = json.Unmarshal(b, &v.AttachedAssetOption)
	case "condition_meter":
		err = json.Unmarshal(b, &v.ConditionMeter)
	case "custom":
		err = json.Unmarshal(b, &v.Custom)
	case "stat":
		err = json.Unmarshal(b, &v.Stat)
	default:
		err = fmt.Errorf("bad Using value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.Using = t.T
	return nil
}

type SelectValueFieldChoiceAssetControlChoiceType string

const (
	SelectValueFieldChoiceAssetControlChoiceTypeChoice SelectValueFieldChoiceAssetControlChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectValueFieldChoiceAssetControl struct {
	Assets []AssetIDWildcard `json:"assets"`

	ChoiceType SelectValueFieldChoiceAssetControlChoiceType `json:"choice_type"`

	// The dictionary key of the asset control field.
	Control DictKey `json:"control"`

	Label InputLabel `json:"label"`
}

type SelectValueFieldChoiceAssetOptionChoiceType string

const (
	SelectValueFieldChoiceAssetOptionChoiceTypeChoice SelectValueFieldChoiceAssetOptionChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectValueFieldChoiceAssetOption struct {
	Assets []AssetIDWildcard `json:"assets"`

	ChoiceType SelectValueFieldChoiceAssetOptionChoiceType `json:"choice_type"`

	Label InputLabel `json:"label"`

	// The dictionary key of the asset option field.
	Option DictKey `json:"option"`
}

type SelectValueFieldChoiceAttachedAssetControlChoiceType string

const (
	SelectValueFieldChoiceAttachedAssetControlChoiceTypeChoice SelectValueFieldChoiceAttachedAssetControlChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectValueFieldChoiceAttachedAssetControl struct {
	ChoiceType SelectValueFieldChoiceAttachedAssetControlChoiceType `json:"choice_type"`

	// The dictionary key of the asset control field.
	Control DictKey `json:"control"`

	Label InputLabel `json:"label"`
}

type SelectValueFieldChoiceAttachedAssetOptionChoiceType string

const (
	SelectValueFieldChoiceAttachedAssetOptionChoiceTypeChoice SelectValueFieldChoiceAttachedAssetOptionChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectValueFieldChoiceAttachedAssetOption struct {
	ChoiceType SelectValueFieldChoiceAttachedAssetOptionChoiceType `json:"choice_type"`

	Label InputLabel `json:"label"`

	// The dictionary key of the asset option field.
	Option DictKey `json:"option"`
}

type SelectValueFieldChoiceConditionMeterChoiceType string

const (
	SelectValueFieldChoiceConditionMeterChoiceTypeChoice SelectValueFieldChoiceConditionMeterChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectValueFieldChoiceConditionMeter struct {
	ChoiceType SelectValueFieldChoiceConditionMeterChoiceType `json:"choice_type"`

	ConditionMeter ConditionMeterKey `json:"condition_meter"`

	Label InputLabel `json:"label"`
}

type SelectValueFieldChoiceCustomChoiceType string

const (
	SelectValueFieldChoiceCustomChoiceTypeChoice SelectValueFieldChoiceCustomChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectValueFieldChoiceCustom struct {
	ChoiceType SelectValueFieldChoiceCustomChoiceType `json:"choice_type"`

	Label InputLabel `json:"label"`

	Value int16 `json:"value"`
}

type SelectValueFieldChoiceStatChoiceType string

const (
	SelectValueFieldChoiceStatChoiceTypeChoice SelectValueFieldChoiceStatChoiceType = "choice"
)

// Represents an option in a list of choices.
type SelectValueFieldChoiceStat struct {
	ChoiceType SelectValueFieldChoiceStatChoiceType `json:"choice_type"`

	Label InputLabel `json:"label"`

	Stat StatKey `json:"stat"`
}

// Metadata describing the original source of this item
type SourceInfo struct {
	// Lists authors credited by the source material.
	Authors []AuthorInfo `json:"authors"`

	// The date of the source documents's last update, formatted YYYY-MM-DD.
	// Required because it's used to determine whether the data needs updating.
	Date time.Time `json:"date"`

	License License `json:"license"`

	// The title of the source document.
	Title string `json:"title"`

	// A URL where the source document is available.
	URL WebURL `json:"url"`

	// The page number where this item is described in full.
	Page *uint16 `json:"page,omitempty"`
}

type SpecialTrackRollMethod string

const (
// Use _every_ roll option at once.
	SpecialTrackRollMethodAll SpecialTrackRollMethod = "all"

// Use the roll option with the best/highest value.
	SpecialTrackRollMethodHighest SpecialTrackRollMethod = "highest"

// Use the roll option with the worst/lowest value.
	SpecialTrackRollMethodLowest SpecialTrackRollMethod = "lowest"

// An automatic miss.
	SpecialTrackRollMethodMiss SpecialTrackRollMethod = "miss"

// The player chooses which roll option to use.
	SpecialTrackRollMethodPlayerChoice SpecialTrackRollMethod = "player_choice"

// An automatic strong hit.
	SpecialTrackRollMethodStrongHit SpecialTrackRollMethod = "strong_hit"

// An automatic weak hit.
	SpecialTrackRollMethodWeakHit SpecialTrackRollMethod = "weak_hit"
)

// Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or
// Legacies (Starforged).
type SpecialTrackRule struct {
	// A description of this special track.
	Description MarkdownString `json:"description"`

	// A label for this special track.
	Label InputLabel `json:"label"`

	// Is this track an optional rule?
	Optional bool `json:"optional"`

	// Is this track shared by all players?
	Shared bool `json:"shared"`
}

// Special, ruleset-specific progress tracks. Usually, one exists per player
// character, and they persist through the life of the player character.
// 'Canonical' examples:
//   * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged
// legacy track, use `bonds_legacy` instead.
//   * `failure_track`, described in Ironsworn: Delve
//   * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described
// Ironsworn: Starforged
// 
type SpecialTrackType = DictKey

// A basic player character stat.
type StatKey = DictKey

// Describes a standard player character stat.
type StatRule struct {
	// A description of this stat.
	Description MarkdownString `json:"description"`

	// A label for this stat.
	Label InputLabel `json:"label"`
}

type Suggestions struct {
	Assets []AssetID `json:"assets,omitempty"`

	Atlas []AtlasEntryID `json:"atlas,omitempty"`

	Moves []MoveID `json:"moves,omitempty"`

	Npcs []NpcID `json:"npcs,omitempty"`

	Oracles []OracleRollableID `json:"oracles,omitempty"`

	Rarities []RarityID `json:"rarities,omitempty"`

	SiteDomains []DelveSiteDomainID `json:"site_domains,omitempty"`

	SiteThemes []DelveSiteThemeID `json:"site_themes,omitempty"`
}

// A relative (local) URL pointing to a vector image in the SVG format.
type SvgImageURL = string

type Tag = interface{}

type TagRule struct {
	ValueType string

	Asset TagRuleAsset

	AssetCollection TagRuleAssetCollection

	Atlas TagRuleAtlas

	AtlasEntry TagRuleAtlasEntry

	Boolean TagRuleBoolean

	DelveSite TagRuleDelveSite

	DelveSiteDomain TagRuleDelveSiteDomain

	DelveSiteTheme TagRuleDelveSiteTheme

	Enum TagRuleEnum

	Integer TagRuleInteger

	Move TagRuleMove

	MoveCategory TagRuleMoveCategory

	Npc TagRuleNpc

	NpcCollection TagRuleNpcCollection

	OracleCollection TagRuleOracleCollection

	OracleRollable TagRuleOracleRollable

	Rarity TagRuleRarity

	Truth TagRuleTruth
}

func (v TagRule) MarshalJSON() ([]byte, error) {
	switch v.ValueType {
	case "asset":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleAsset }{ v.ValueType, v.Asset })
	case "asset_collection":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleAssetCollection }{ v.ValueType, v.AssetCollection })
	case "atlas":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleAtlas }{ v.ValueType, v.Atlas })
	case "atlas_entry":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleAtlasEntry }{ v.ValueType, v.AtlasEntry })
	case "boolean":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleBoolean }{ v.ValueType, v.Boolean })
	case "delve_site":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleDelveSite }{ v.ValueType, v.DelveSite })
	case "delve_site_domain":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleDelveSiteDomain }{ v.ValueType, v.DelveSiteDomain })
	case "delve_site_theme":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleDelveSiteTheme }{ v.ValueType, v.DelveSiteTheme })
	case "enum":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleEnum }{ v.ValueType, v.Enum })
	case "integer":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleInteger }{ v.ValueType, v.Integer })
	case "move":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleMove }{ v.ValueType, v.Move })
	case "move_category":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleMoveCategory }{ v.ValueType, v.MoveCategory })
	case "npc":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleNpc }{ v.ValueType, v.Npc })
	case "npc_collection":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleNpcCollection }{ v.ValueType, v.NpcCollection })
	case "oracle_collection":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleOracleCollection }{ v.ValueType, v.OracleCollection })
	case "oracle_rollable":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleOracleRollable }{ v.ValueType, v.OracleRollable })
	case "rarity":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleRarity }{ v.ValueType, v.Rarity })
	case "truth":
		return json.Marshal(struct { T string `json:"value_type"`; TagRuleTruth }{ v.ValueType, v.Truth })
	}

	return nil, fmt.Errorf("bad ValueType value: %s", v.ValueType)
}

func (v *TagRule) UnmarshalJSON(b []byte) error {
	var t struct { T string `json:"value_type"` }
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}

	var err error
	switch t.T {
	case "asset":
		err = json.Unmarshal(b, &v.Asset)
	case "asset_collection":
		err = json.Unmarshal(b, &v.AssetCollection)
	case "atlas":
		err = json.Unmarshal(b, &v.Atlas)
	case "atlas_entry":
		err = json.Unmarshal(b, &v.AtlasEntry)
	case "boolean":
		err = json.Unmarshal(b, &v.Boolean)
	case "delve_site":
		err = json.Unmarshal(b, &v.DelveSite)
	case "delve_site_domain":
		err = json.Unmarshal(b, &v.DelveSiteDomain)
	case "delve_site_theme":
		err = json.Unmarshal(b, &v.DelveSiteTheme)
	case "enum":
		err = json.Unmarshal(b, &v.Enum)
	case "integer":
		err = json.Unmarshal(b, &v.Integer)
	case "move":
		err = json.Unmarshal(b, &v.Move)
	case "move_category":
		err = json.Unmarshal(b, &v.MoveCategory)
	case "npc":
		err = json.Unmarshal(b, &v.Npc)
	case "npc_collection":
		err = json.Unmarshal(b, &v.NpcCollection)
	case "oracle_collection":
		err = json.Unmarshal(b, &v.OracleCollection)
	case "oracle_rollable":
		err = json.Unmarshal(b, &v.OracleRollable)
	case "rarity":
		err = json.Unmarshal(b, &v.Rarity)
	case "truth":
		err = json.Unmarshal(b, &v.Truth)
	default:
		err = fmt.Errorf("bad ValueType value: %s", t.T)
	}

	if err != nil {
		return err
	}

	v.ValueType = t.T
	return nil
}

type TagRuleAsset struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleAssetCollection struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleAtlas struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleAtlasEntry struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleBoolean struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Array bool `json:"array"`

	Description MarkdownString `json:"description"`
}

type TagRuleDelveSite struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleDelveSiteDomain struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleDelveSiteTheme struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleEnum struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Array bool `json:"array"`

	Description MarkdownString `json:"description"`

	Enum []DictKey `json:"enum"`
}

type TagRuleInteger struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Array bool `json:"array"`

	Description MarkdownString `json:"description"`
}

type TagRuleMove struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleMoveCategory struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleNpc struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleNpcCollection struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleOracleCollection struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleOracleRollable struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleRarity struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

type TagRuleTruth struct {
	AppliesTo []ObjectType `json:"applies_to"`

	Description MarkdownString `json:"description"`

	// If `true`, this field accepts an array of wildcard IDs. If `false`, this
	// field accepts a single non-wildcard ID.
	Wildcard bool `json:"wildcard"`
}

// A rich text string in Markdown with replaced values from oracle roll results.
// 
// The custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced
// by the `some_row_key` string of a rolled oracle table. This is usually the
// `result` key, for example `{{result:starforged/oracles/core/action}}`
type TemplateString = string

// Describes trigger conditions for a move that makes an action roll.
type TriggerActionRoll struct {
	// Specific conditions that qualify for this trigger.
	Conditions []TriggerActionRollCondition `json:"conditions"`

	// A markdown string containing the primary trigger text for this move.
	// 
	// Secondary trigger text (for specific stats or uses of an asset ability) may
	// be described in individual trigger conditions.
	Text MarkdownString `json:"text"`
}

type TriggerActionRollCondition struct {
	Method ActionRollMethod `json:"method"`

	// The options available when rolling with this trigger condition.
	RollOptions []RollableValue `json:"roll_options"`

	By *TriggerBy `json:"by,omitempty"`

	// A markdown string of any trigger text specific to this trigger condition.
	Text *MarkdownString `json:"text,omitempty"`
}

type TriggerActionRollConditionEnhancement struct {
	Method ActionRollMethod `json:"method"`

	// The options available when rolling with this trigger condition.
	RollOptions []RollableValue `json:"roll_options"`

	By *TriggerBy `json:"by,omitempty"`

	// A markdown string of any trigger text specific to this trigger condition.
	Text *MarkdownString `json:"text,omitempty"`
}

// Describes changes/additions made to the enhanced move's trigger conditions.
type TriggerActionRollEnhancement struct {
	// Trigger conditions added to the enhanced move.
	Conditions []TriggerActionRollConditionEnhancement `json:"conditions"`
}

// Information on who can activate this trigger condition. Usually this is just
// the player, but some asset abilities can trigger from an ally's move.
type TriggerBy struct {
	// Can this trigger be activated by one of the player's allies?
	Ally bool `json:"ally"`

	// Can this trigger be activated by the player who owns this?
	Player bool `json:"player"`
}

// Describes trigger conditions for a move that makes no rolls.
type TriggerNoRoll struct {
	Conditions []TriggerNoRollCondition `json:"conditions"`

	// A markdown string containing the primary trigger text for this move.
	// 
	// Secondary trigger text (for specific stats or uses of an asset ability) may
	// be described in individual trigger conditions.
	Text MarkdownString `json:"text"`
}

type TriggerNoRollCondition struct {
	By *TriggerBy `json:"by,omitempty"`

	// A markdown string of any trigger text specific to this trigger condition.
	Text *MarkdownString `json:"text,omitempty"`
}

// Describes changes/additions made to the enhanced move's trigger conditions.
type TriggerNoRollEnhancement struct {
	// Trigger conditions added to the enhanced move.
	Conditions []TriggerNoRollCondition `json:"conditions"`
}

type TriggerProgressRoll struct {
	// Specific conditions that qualify for this trigger.
	Conditions []TriggerProgressRollCondition `json:"conditions"`

	// A markdown string containing the primary trigger text for this move.
	// 
	// Secondary trigger text (for specific stats or uses of an asset ability) may
	// be described in individual trigger conditions.
	Text MarkdownString `json:"text"`
}

type TriggerProgressRollCondition struct {
	Method ProgressRollMethod `json:"method"`

	// The options available when rolling with this trigger condition.
	RollOptions []ProgressRollOption `json:"roll_options"`

	By *TriggerBy `json:"by,omitempty"`

	// A markdown string of any trigger text specific to this trigger condition.
	Text *MarkdownString `json:"text,omitempty"`
}

type TriggerProgressRollConditionEnhancement struct {
	Method ProgressRollMethod `json:"method"`

	// The options available when rolling with this trigger condition.
	RollOptions []ProgressRollOption `json:"roll_options"`

	By *TriggerBy `json:"by,omitempty"`

	// A markdown string of any trigger text specific to this trigger condition.
	Text *MarkdownString `json:"text,omitempty"`
}

// Describes changes/additions made to the enhanced move's trigger conditions.
type TriggerProgressRollEnhancement struct {
	// Trigger conditions added to the enhanced move.
	Conditions []TriggerProgressRollConditionEnhancement `json:"conditions"`
}

type TriggerSpecialTrack struct {
	// Specific conditions that qualify for this trigger.
	Conditions []TriggerSpecialTrackCondition `json:"conditions"`

	// A markdown string containing the primary trigger text for this move.
	// 
	// Secondary trigger text (for specific stats or uses of an asset ability) may
	// be described in individual trigger conditions.
	Text MarkdownString `json:"text"`
}

type TriggerSpecialTrackCondition struct {
	Method SpecialTrackRollMethod `json:"method"`

	// The options available when rolling with this trigger condition.
	RollOptions []TriggerSpecialTrackConditionOption `json:"roll_options"`

	By *TriggerBy `json:"by,omitempty"`

	// A markdown string of any trigger text specific to this trigger condition.
	Text *MarkdownString `json:"text,omitempty"`
}

// A progress move that rolls on one or more special tracks, like Bonds (classic
// Ironsworn), Failure (Delve), or Legacy (Starforged).
type TriggerSpecialTrackConditionEnhancement struct {
	Method SpecialTrackRollMethod `json:"method"`

	// The options available when rolling with this trigger condition.
	RollOptions []TriggerSpecialTrackConditionOption `json:"roll_options"`

	By *TriggerBy `json:"by,omitempty"`

	// A markdown string of any trigger text specific to this trigger condition.
	Text *MarkdownString `json:"text,omitempty"`
}

type TriggerSpecialTrackConditionOption struct {
	Using SpecialTrackType `json:"using"`
}

// Describes changes/additions made to the enhanced move's trigger conditions.
type TriggerSpecialTrackEnhancement struct {
	// Trigger conditions added to the enhanced move.
	Conditions []TriggerSpecialTrackConditionEnhancement `json:"conditions"`
}

// A setting truth category.
type Truth struct {
	// The unique Datasworn ID for this item.
	ID TruthID `json:"_id"`

	// Attribution for the original source (such as a book or website) of this
	// item, including the author and licensing information.
	Source SourceInfo `json:"_source"`

	// The primary name/label for this item.
	Name Label `json:"name"`

	Options []TruthOption `json:"options"`

	// Any implementation hints or other developer-facing comments on this object.
	// These should be omitted when presenting the object for gameplay.
	Comment *string `json:"_comment,omitempty"`

	// The name of this item as it appears on the page in the book, if it's
	// different from `name`.
	CanonicalName *Label `json:"canonical_name,omitempty"`

	Icon *SvgImageURL `json:"icon,omitempty"`

	Suggestions *Suggestions `json:"suggestions,omitempty"`

	Summary *MarkdownString `json:"summary,omitempty"`

	Tags map[string]map[string]Tag `json:"tags,omitempty"`

	YourCharacter *MarkdownString `json:"your_character,omitempty"`
}

// A unique ID for a Truth.
type TruthID = string

type TruthOption struct {
	Description MarkdownString `json:"description"`

	QuestStarter MarkdownString `json:"quest_starter"`

	Max *int16 `json:"max,omitempty"`

	Min *int16 `json:"min,omitempty"`

	Summary *MarkdownString `json:"summary,omitempty"`

	Table []OracleTableRowText `json:"table,omitempty"`
}

// An absolute URL pointing to a website.
type WebURL = string

// A relative (local) URL pointing to a raster image in the WEBP format.
type WebpImageURL = string
