{
	"title": "RulesPackage",
	"anyOf": [
		{
			"$ref": "#/definitions/Ruleset"
		},
		{
			"$ref": "#/definitions/Expansion"
		}
	],
	"definitions": {
		"AssetAbilityControlFieldId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)\\/controls\\/([a-z][a-z_]*)$",
			"title": "AssetAbilityControlFieldId"
		},
		"AssetAbilityId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)$",
			"title": "AssetAbilityId"
		},
		"AssetAbilityOptionFieldId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)\\/options\\/([a-z][a-z_]*)$",
			"title": "AssetAbilityOptionFieldId"
		},
		"AssetConditionMeterControlFieldId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)$",
			"title": "AssetConditionMeterControlFieldId"
		},
		"AssetControlFieldId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)$",
			"title": "AssetControlFieldId"
		},
		"AssetControlFieldIdWildcard": {
			"type": "string",
			"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))\\/controls\\/(\\*|([a-z][a-z_]*))$",
			"title": "AssetControlFieldIdWildcard"
		},
		"AssetId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$",
			"title": "AssetId"
		},
		"AssetIdWildcard": {
			"type": "string",
			"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$",
			"title": "AssetIdWildcard"
		},
		"AssetOptionFieldId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/options\\/([a-z][a-z_]*)$",
			"title": "AssetOptionFieldId"
		},
		"AssetOptionFieldIdWildcard": {
			"type": "string",
			"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))\\/options\\/(\\*|([a-z][a-z_]*))$",
			"title": "AssetOptionFieldIdWildcard"
		},
		"AssetTypeId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/collections\\/assets\\/([a-z][a-z_]*)$",
			"title": "AssetTypeId"
		},
		"AtlasEntryId": {
			"examples": [
				"classic/atlas/ironlands/hinterlands"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/atlas\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$",
			"title": "AtlasEntryId"
		},
		"AtlasEntryIdWildcard": {
			"type": "string",
			"pattern": "^(\\*|([a-z0-9_]{3,}))\\/atlas\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$",
			"title": "AtlasEntryIdWildcard"
		},
		"AtlasId": {
			"examples": [
				"classic/collections/atlas/ironlands"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/collections\\/atlas\\/([a-z][a-z_]*)$",
			"title": "AtlasId"
		},
		"AtlasIdWildcard": {
			"type": "string",
			"pattern": "^(\\*|([a-z0-9_]{3,}))\\/collections\\/atlas\\/(\\*|([a-z][a-z_]*))$",
			"title": "AtlasIdWildcard"
		},
		"ConditionMeterRuleId": {
			"examples": [
				"classic/rules/condition_meters/health",
				"starforged/rules/condition_meters/spirit"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/rules\\/condition_meters\\/([a-z][a-z_]*)$",
			"title": "ConditionMeterRuleId"
		},
		"DelveSiteDenizenId": {
			"examples": [
				"delve/delve_sites/alvas_rest/denizens/1-27"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/delve_sites\\/([a-z][a-z_]*)\\/denizens\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "DelveSiteDenizenId"
		},
		"DelveSiteDomainId": {
			"examples": [
				"delve/site_domains/shadowfen"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_domains\\/([a-z][a-z_]*)$",
			"title": "DelveSiteDomainId"
		},
		"DelveSiteId": {
			"examples": [
				"delve/delve_sites/alvas_rest"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/delve_sites\\/([a-z][a-z_]*)$",
			"title": "DelveSiteId"
		},
		"DelveSiteThemeId": {
			"examples": [
				"delve/site_themes/hallowed"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)$",
			"title": "DelveSiteThemeId"
		},
		"DictKey": {
			"description": "A key used in a Datasworn dictionary object.",
			"$comment": "If you need to generate a key from a user-provided label, it's recommended to use a 'slugify' function/library, e.g. https://www.npmjs.com/package/slugify for NodeJS.",
			"type": "string",
			"pattern": "^([a-z][a-z_]*)$",
			"title": "DictKey"
		},
		"DomainDangerRowId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_domains\\/([a-z][a-z_]*)\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "DomainDangerRowId"
		},
		"DomainFeatureRowId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_domains\\/([a-z][a-z_]*)\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "DomainFeatureRowId"
		},
		"ExpansionId": {
			"examples": [
				"delve"
			],
			"description": "The ID of a Datasworn package that relies on an external package to provide its ruleset.",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})$",
			"title": "ExpansionId"
		},
		"ImpactRuleCollectionId": {
			"examples": [
				"classic/collections/rules/impacts/conditions",
				"starforged/collections/rules/impacts/vehicle_troubles"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/collections\\/rules\\/impacts\\/([a-z][a-z_]*)$",
			"title": "ImpactRuleCollectionId"
		},
		"ImpactRuleId": {
			"examples": [
				"classic/rules/impacts/conditions/wounded",
				"starforged/rules/impacts/vehicle_troubles/battered"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/rules\\/impacts\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$",
			"title": "ImpactRuleId"
		},
		"MoveCategoryId": {
			"examples": [
				"starforged/collections/moves/adventure"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/collections\\/moves\\/([a-z][a-z_]*)$",
			"title": "MoveCategoryId"
		},
		"MoveId": {
			"description": "A move ID, for a standard move or a unique asset move",
			"examples": [
				"classic/moves/combat/strike",
				"starforged/assets/module/grappler/abilities/0/moves/ready_grappler"
			],
			"anyOf": [
				{
					"title": "StandardMoveId",
					"description": "A move ID for a standard move.",
					"type": "string",
					"pattern": "^([a-z0-9_]{3,})\\/moves\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$"
				},
				{
					"title": "AssetMoveId",
					"description": "A move ID for an asset move.",
					"type": "string",
					"pattern": "^([a-z0-9_]{3,})\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/(0|[1-9][0-9]*)\\/moves\\/([a-z][a-z_]*)$"
				}
			],
			"title": "MoveId"
		},
		"MoveIdWildcard": {
			"title": "Move ID (with wildcard)",
			"description": "A move ID with wildcards.",
			"examples": [
				"*/moves/*/face_danger",
				"*/assets/ritual/*/abilities/*/moves/*"
			],
			"anyOf": [
				{
					"title": "StandardMoveId (with wildcard)",
					"type": "string",
					"pattern": "^(\\*|([a-z0-9_]{3,}))\\/moves\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$"
				},
				{
					"title": "AssetMoveId (with wildcard)",
					"type": "string",
					"pattern": "^(\\*|([a-z0-9_]{3,}))\\/assets\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))\\/abilities\\/(\\*|(0|[1-9][0-9]*))\\/moves\\/(\\*|([a-z][a-z_]*))$"
				}
			]
		},
		"NpcCollectionId": {
			"examples": [
				"classic/collections/npcs/firstborn",
				"starforged/collections/npcs/sample_npcs"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/collections\\/npcs\\/([a-z][a-z_]*)$",
			"title": "NpcCollectionId"
		},
		"NpcId": {
			"examples": [
				"classic/npcs/firstborn/elf",
				"starforged/npcs/sample_npcs/chiton"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$",
			"title": "NpcId"
		},
		"NpcIdWildcard": {
			"type": "string",
			"pattern": "^(\\*|([a-z0-9_]{3,}))\\/npcs\\/(\\*|([a-z][a-z_]*))\\/(\\*|([a-z][a-z_]*))$",
			"title": "NpcIdWildcard"
		},
		"NpcVariantId": {
			"examples": [
				"starforged/npcs/sample_npcs/chiton/variants/chiton_drone_pack"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/npcs\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/variants\\/([a-z][a-z_]*)$",
			"title": "NpcVariantId"
		},
		"OracleCollectionId": {
			"examples": [
				"starforged/collections/oracles/core",
				"starforged/collections/oracles/character/names",
				"starforged/collections/oracles/planets/furnace/settlements"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/collections\\/oracles(\\/([a-z][a-z_]*)){1,3}$",
			"title": "OracleCollectionId"
		},
		"OracleTableId": {
			"title": "OracleTableId",
			"examples": [
				"starforged/oracles/core/action",
				"starforged/oracles/character/names/given",
				"starforged/oracles/planets/furnace/settlements/terminus"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)$"
		},
		"OracleTableIdWildcard": {
			"description": "Oracle table wildcards can also use '**' to represent any number of collection levels in the oracle tree.",
			"examples": [
				"*/oracles/**/peril",
				"starforged/oracles/character/names/*",
				"starforged/oracles/planets/*/settlements/*"
			],
			"title": "OracleTableId (with wildcard)",
			"type": "string",
			"pattern": "^(\\*|([a-z0-9_]{3,}))\\/oracles\\/((\\/([a-z][a-z_]*)){1,3}|\\/\\*\\*|\\/\\*\\*\\/([a-z][a-z_]*)|\\/([a-z][a-z_]*)\\/\\*\\*)\\/(\\*|([a-z][a-z_]*))$"
		},
		"OracleTableRowId": {
			"examples": [
				"classic/oracles/action_and_theme/action/1-1",
				"starforged/oracles/derelicts/zones/starship/0"
			],
			"description": "Normally, rows will end with two numbers separated by a dash, indicating their dice range.\n\nRows with a single number represent unrollable rows that are sometimes included for rendering purposes; in this case, the number represents the row's index.",
			"anyOf": [
				{
					"type": "string",
					"pattern": "^([a-z0-9_]{3,})\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)\\/([1-9][0-9]*)-([1-9][0-9]*)$"
				},
				{
					"type": "string",
					"pattern": "^([a-z0-9_]{3,})\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)\\/(0|[1-9][0-9]*)$"
				}
			],
			"title": "OracleTableRowId"
		},
		"RarityId": {
			"examples": [
				"classic/rarities/ayethins_journal"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/rarities\\/([a-z][a-z_]*)$",
			"title": "RarityId"
		},
		"RulesetId": {
			"examples": [
				"classic",
				"starforged"
			],
			"description": "The ID of standalone Datasworn package that describes its own ruleset.",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})$",
			"title": "RulesetId"
		},
		"SpecialTrackRuleId": {
			"examples": [
				"classic/rules/special_tracks/bonds",
				"delve/rules/special_tracks/failure",
				"starforged/rules/special_tracks/bonds_legacy"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/rules\\/special_tracks\\/([a-z][a-z_]*)$",
			"title": "SpecialTrackRuleId"
		},
		"StatRuleId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/rules\\/stats\\/([a-z][a-z_]*)$",
			"title": "StatRuleId"
		},
		"ThemeDangerRowId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "ThemeDangerRowId"
		},
		"ThemeFeatureRowId": {
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "ThemeFeatureRowId"
		},
		"TruthId": {
			"examples": [
				"classic/truths/iron",
				"starforged/truths/iron"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/truths\\/([a-z][a-z_]*)$",
			"title": "TruthId"
		},
		"TruthOptionId": {
			"examples": [
				"classic/truths/iron/0",
				"starforged/truths/iron/0"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/truths\\/([a-z][a-z_]*)\\/(0|[1-9][0-9]*)$",
			"title": "TruthOptionId"
		},
		"CssColor": {
			"description": "A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value",
			"type": "string",
			"title": "CssColor"
		},
		"SemanticVersion": {
			"type": "string",
			"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
			"title": "SemanticVersion"
		},
		"Source": {
			"description": "Metadata describing the original source of this item",
			"type": "object",
			"properties": {
				"title": {
					"title": "Title",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					],
					"type": "string"
				},
				"page": {
					"minimum": 1,
					"description": "The page number where this item is described in full.",
					"type": "integer"
				},
				"authors": {
					"minItems": 1,
					"type": "array",
					"items": {
						"examples": [
							{
								"name": "Shawn Tomkin"
							}
						],
						"type": "object",
						"properties": {
							"name": {
								"examples": [
									"Shawn Tomkin"
								],
								"type": "string"
							},
							"email": {
								"title": "Email",
								"format": "email",
								"description": "An optional email contact for the author",
								"type": "string"
							},
							"url": {
								"format": "uri",
								"description": "An optional URL for the author's website.",
								"type": "string"
							}
						},
						"required": [
							"name"
						],
						"additionalProperties": false
					}
				},
				"date": {
					"format": "date",
					"$comment": "You may prefer to deserialize this as a Date object.",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"type": "string"
				},
				"url": {
					"format": "uri",
					"description": "An absolute URL where the source document is available.",
					"examples": [
						"https://ironswornrpg.com"
					],
					"type": "string"
				},
				"license": {
					"title": "License",
					"description": "An absolute URL pointing to the location where this element's license can be found.\n\nA `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Datasworn's build process skips unlicensed content by default.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [
						{
							"format": "uri",
							"type": "string"
						},
						{
							"type": "null"
						}
					]
				}
			},
			"required": [
				"title",
				"authors",
				"date",
				"url",
				"license"
			],
			"title": "Source",
			"additionalProperties": false
		},
		"Suggestions": {
			"type": "object",
			"properties": {
				"oracles": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableId"
					}
				},
				"assets": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssetId"
					}
				},
				"moves": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MoveId"
					}
				},
				"site_domains": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelveSiteDomainId"
					}
				},
				"site_themes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelveSiteThemeId"
					}
				},
				"npcs": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NpcId"
					}
				},
				"atlas": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AtlasEntryId"
					}
				},
				"rarities": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/RarityId"
					}
				}
			},
			"title": "Suggestions",
			"additionalProperties": false
		},
		"SvgImageUrl": {
			"format": "uri-reference",
			"description": "A relative URL pointing to a vector image in the SVG format.",
			"type": "string",
			"pattern": "\\.svg$",
			"title": "SvgImageUrl"
		},
		"WebpImageUrl": {
			"format": "uri-reference",
			"description": "A relative URL pointing to a raster image in the WEBP format.",
			"type": "string",
			"pattern": "\\.webp$",
			"title": "WebpImageUrl"
		},
		"I18nHint": {
			"type": "object",
			"properties": {
				"part_of_speech": {
					"$ref": "#/definitions/PartOfSpeech"
				}
			},
			"title": "I18nHint",
			"additionalProperties": false
		},
		"I18nHints": {
			"description": "Internationalization/localization hints for the text content of this object.",
			"type": "object",
			"properties": {
				"result": {
					"$ref": "#/definitions/I18nHint"
				},
				"summary": {
					"$ref": "#/definitions/I18nHint"
				},
				"description": {
					"$ref": "#/definitions/I18nHint"
				},
				"template": {
					"type": "object",
					"properties": {
						"result": {
							"$ref": "#/definitions/I18nHint"
						},
						"summary": {
							"$ref": "#/definitions/I18nHint"
						},
						"description": {
							"$ref": "#/definitions/I18nHint"
						}
					},
					"additionalProperties": false
				}
			},
			"title": "I18nHints",
			"additionalProperties": false
		},
		"Label": {
			"description": "A localized plain text name or label.",
			"i18n": true,
			"type": "string",
			"title": "Label"
		},
		"MarkdownString": {
			"description": "Localized text, formatted in Markdown.\n\nIt uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.",
			"format": "markdown",
			"i18n": true,
			"type": "string",
			"title": "MarkdownString"
		},
		"PartOfSpeech": {
			"title": "PartOfSpeech",
			"anyOf": [
				{
					"description": "A common noun.",
					"const": "common_noun",
					"type": "string"
				},
				{
					"description": "A proper noun.",
					"const": "proper_noun",
					"type": "string"
				},
				{
					"description": "A common noun used as an adjective, to modify another noun.",
					"const": "adjunct_common_noun",
					"type": "string"
				},
				{
					"description": "A proper noun used as an adjective, to modify another noun.",
					"const": "adjunct_proper_noun",
					"type": "string"
				},
				{
					"description": "A verb in present tense",
					"const": "verb",
					"type": "string"
				},
				{
					"description": "Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\"",
					"const": "gerund",
					"type": "string"
				},
				{
					"description": "An adjective.",
					"const": "adjective",
					"type": "string"
				},
				{
					"description": "A verb used as an adjective, to modify a noun.",
					"const": "attributive_verb",
					"type": "string"
				}
			]
		},
		"TemplateString": {
			"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `result` key, for example `{{result:starforged/oracles/core/action}}`\n",
			"format": "markdown",
			"i18n": true,
			"releaseStage": "experimental",
			"type": "string",
			"title": "TemplateString"
		},
		"ConditionMeterRule": {
			"description": "Describes a standard player character condition meter.",
			"type": "object",
			"properties": {
				"description": {
					"description": "A description of this condition meter.",
					"$ref": "#/definitions/MarkdownString"
				},
				"shared": {
					"default": false,
					"description": "Is this condition meter shared by all players?",
					"type": "boolean"
				},
				"label": {
					"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
					"$ref": "#/definitions/Label"
				},
				"value": {
					"description": "The current value of this meter.",
					"type": "integer"
				},
				"min": {
					"description": "The minimum value of this meter.",
					"default": 0,
					"type": "integer"
				},
				"max": {
					"description": "The maximum value of this meter.",
					"default": 5,
					"type": "integer"
				}
			},
			"required": [
				"description",
				"shared",
				"label",
				"value",
				"min",
				"max"
			],
			"title": "ConditionMeterRule",
			"additionalProperties": false
		},
		"ImpactCategory": {
			"description": "Describes a category of standard impacts/debilities.",
			"type": "object",
			"properties": {
				"label": {
					"description": "A label for this impact category.",
					"$ref": "#/definitions/Label"
				},
				"description": {
					"description": "A description of this impact category.",
					"$ref": "#/definitions/MarkdownString"
				},
				"contents": {
					"description": "A dictionary object of the Impacts in this category.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/ImpactRule"
						}
					}
				}
			},
			"required": [
				"label",
				"description",
				"contents"
			],
			"title": "ImpactCategory",
			"additionalProperties": false
		},
		"ImpactRule": {
			"description": "Describes a standard impact/debility.",
			"type": "object",
			"properties": {
				"label": {
					"description": "The label for this impact.",
					"$ref": "#/definitions/Label"
				},
				"description": {
					"description": "A description of this impact.",
					"$ref": "#/definitions/MarkdownString"
				},
				"shared": {
					"default": false,
					"description": "Is this impact applied to all players at once?",
					"type": "boolean"
				},
				"prevents_recovery": {
					"default": [],
					"description": "Keys of ruleset condition meters, to which this impact prevents recovery.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DictKey"
					}
				},
				"permanent": {
					"default": false,
					"description": "Is this impact permanent?",
					"type": "boolean"
				}
			},
			"required": [
				"label",
				"description",
				"shared",
				"prevents_recovery",
				"permanent"
			],
			"title": "ImpactRule",
			"additionalProperties": false
		},
		"Rules": {
			"description": "Describes rules for player characters in this ruleset, such as stats and condition meters.",
			"type": "object",
			"properties": {
				"stats": {
					"description": "Describes the standard stats used by player characters in this ruleset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/StatRule"
						}
					}
				},
				"condition_meters": {
					"description": "Describes the standard condition meters used by player characters in this ruleset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/ConditionMeterRule"
						}
					}
				},
				"impacts": {
					"description": "Describes the standard impacts/debilities used by player characters in this ruleset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/ImpactCategory"
						}
					}
				},
				"special_tracks": {
					"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/SpecialTrackRule"
						}
					}
				}
			},
			"required": [
				"stats",
				"condition_meters",
				"impacts",
				"special_tracks"
			],
			"title": "Rules",
			"additionalProperties": false
		},
		"RulesExpansion": {
			"description": "Describes rules for player characters in this ruleset, such as stats and condition meters.",
			"type": "object",
			"properties": {
				"stats": {
					"description": "Describes the standard stats used by player characters in this ruleset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/StatRule"
						}
					}
				},
				"condition_meters": {
					"description": "Describes the standard condition meters used by player characters in this ruleset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/ConditionMeterRule"
						}
					}
				},
				"impacts": {
					"description": "Describes the standard impacts/debilities used by player characters in this ruleset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/ImpactCategory"
						}
					}
				},
				"special_tracks": {
					"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/SpecialTrackRule"
						}
					}
				}
			},
			"title": "RulesExpansion",
			"additionalProperties": false
		},
		"SpecialTrackRule": {
			"description": "Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
			"type": "object",
			"properties": {
				"label": {
					"description": "A label for this special track.",
					"$ref": "#/definitions/Label"
				},
				"description": {
					"description": "A description of this special track.",
					"$ref": "#/definitions/MarkdownString"
				},
				"shared": {
					"default": false,
					"description": "Is this track shared by all players?",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "Is this track an optional rule?",
					"type": "boolean"
				}
			},
			"required": [
				"label",
				"description",
				"shared",
				"optional"
			],
			"title": "SpecialTrackRule",
			"additionalProperties": false
		},
		"StatRule": {
			"description": "Describes a standard player character stat.",
			"type": "object",
			"properties": {
				"label": {
					"description": "A label for this stat.",
					"examples": [
						"edge"
					],
					"$ref": "#/definitions/Label"
				},
				"description": {
					"description": "A description of this stat.",
					"examples": [
						"Quickness, agility, and prowess when fighting at a distance."
					],
					"$ref": "#/definitions/MarkdownString"
				}
			},
			"required": [
				"label",
				"description"
			],
			"title": "StatRule",
			"additionalProperties": false
		},
		"ChallengeRank": {
			"description": "Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).\n\n  * 1: Troublesome\n  * 2: Dangerous\n  * 3: Formidable\n  * 4: Extreme\n  * 5: Epic",
			"title": "ChallengeRank",
			"type": "integer"
		},
		"ProgressTrackTypeInfo": {
			"description": "Describes the features of a type of progress track.",
			"type": "object",
			"properties": {
				"category": {
					"description": "A category label for progress tracks of this type.",
					"examples": [
						"Vow",
						"Journey",
						"Combat",
						"Scene Challenge",
						"Expedition",
						"Connection",
						"Delve"
					],
					"$ref": "#/definitions/Label"
				},
				"controls": {
					"type": "object",
					"patternProperties": {
						".*": {
							"type": "object",
							"properties": {}
						}
					}
				}
			},
			"required": [
				"category"
			],
			"title": "ProgressTrackTypeInfo",
			"additionalProperties": false
		},
		"SpecialTrackType": {
			"examples": [
				"bonds_track",
				"failure_track",
				"quests_legacy",
				"bonds_legacy",
				"discoveries_legacy"
			],
			"description": "Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.\n'Canonical' examples:\n  * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\n",
			"$ref": "#/definitions/DictKey",
			"title": "SpecialTrackType"
		},
		"Npc": {
			"description": "A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/NpcId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/definitions/MarkdownString"
				},
				"your_truth": {
					"$ref": "#/definitions/MarkdownString"
				},
				"rank": {
					"description": "The suggested challenge rank for this NPC.",
					"$ref": "#/definitions/ChallengeRank"
				},
				"nature": {
					"$ref": "#/definitions/NpcNature"
				},
				"drives": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"tactics": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"variants": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/NpcVariant"
						}
					}
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"features",
				"description",
				"quest_starter",
				"rank",
				"nature",
				"drives",
				"tactics"
			],
			"title": "Npc",
			"additionalProperties": false
		},
		"NpcCollection": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/NpcCollectionId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"color": {
					"description": "A thematic color associated with this collection.",
					"$ref": "#/definitions/CssColor"
				},
				"summary": {
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"images": {
					"type": "array",
					"items": {
						"description": "Extra images associated with this collection.",
						"$ref": "#/definitions/WebpImageUrl"
					}
				},
				"icon": {
					"description": "An SVG icon associated with this collection.",
					"$ref": "#/definitions/SvgImageUrl"
				},
				"enhances": {
					"$ref": "#/definitions/NpcCollectionId",
					"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
				},
				"replaces": {
					"$ref": "#/definitions/NpcCollectionId",
					"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
				},
				"contents": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Npc"
						}
					}
				}
			},
			"required": [
				"id",
				"name",
				"source"
			],
			"title": "NpcCollection",
			"additionalProperties": false
		},
		"NpcNature": {
			"description": "A localized category label describing the nature of this NPC.\n\nIn Ironsworn classic, this is probably the singular form of the parent collection's name.\n\nFor Starforged, see the table on p. 258 for examples.",
			"examples": [
				"Ironlander",
				"Firstborn",
				"Animal",
				"Beast",
				"Horror",
				"Anomaly",
				"Creature",
				"Human",
				"Machine",
				"Monster",
				"Vehicle"
			],
			"$ref": "#/definitions/Label",
			"title": "NpcNature"
		},
		"NpcVariant": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/NpcVariantId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"$ref": "#/definitions/Label"
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"rank": {
					"description": "The suggested challenge rank for this NPC.",
					"$ref": "#/definitions/ChallengeRank"
				},
				"nature": {
					"$ref": "#/definitions/NpcNature"
				}
			},
			"required": [
				"id",
				"name",
				"description",
				"rank",
				"nature"
			],
			"title": "NpcVariant",
			"additionalProperties": false
		},
		"DiceNotation": {
			"examples": [
				"1d100",
				"1d6+2"
			],
			"format": "dice_notation",
			"type": "string",
			"pattern": "([1-9][0-9]*)d(0|[1-9][0-9]*)([+-]([1-9][0-9]*))?",
			"title": "DiceNotation"
		},
		"OracleRollTemplate": {
			"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.",
			"type": "object",
			"properties": {
				"result": {
					"description": "A string template that may be used in place of OracleTableRow#result.",
					"examples": [
						"{{result:starforged/oracles/factions/affiliation}} of the {{result:starforged/oracles/factions/legacy}} {{result:starforged/oracles/factions/identity}}"
					],
					"$ref": "#/definitions/TemplateString"
				},
				"summary": {
					"description": "A string template that may be used in place of OracleTableRow#summary.",
					"$ref": "#/definitions/TemplateString"
				},
				"description": {
					"description": "A string template that may be used in place of OracleTableRow#description.",
					"$ref": "#/definitions/TemplateString"
				}
			},
			"title": "OracleRollTemplate",
			"additionalProperties": false
		},
		"OracleTableMatchBehavior": {
			"title": "Match behavior",
			"type": "object",
			"properties": {
				"text": {
					"$ref": "#/definitions/MarkdownString"
				}
			},
			"required": [
				"text"
			],
			"additionalProperties": false
		},
		"OracleTableRoll": {
			"type": "object",
			"properties": {
				"oracle": {
					"description": "The ID of the oracle table to be rolled. If omitted, it defaults to the ID of this oracle table.",
					"$ref": "#/definitions/OracleTableId"
				},
				"auto": {
					"default": false,
					"description": "The rulebook explicitly cautions *against* rolling all details at once, so rolling every referenced oracle automatically is not recommended. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\". If this value is omitted, assume it's false.",
					"type": "boolean"
				},
				"times": {
					"minimum": 1,
					"default": 1,
					"type": "integer"
				},
				"method": {
					"$ref": "#/definitions/OracleTableRollMethod"
				}
			},
			"title": "OracleTableRoll",
			"additionalProperties": false
		},
		"OracleTableRollMethod": {
			"default": "no_duplicates",
			"description": "Special roll instructions to use when rolling multiple times on a single oracle table.",
			"title": "OracleTableRollMethod",
			"anyOf": [
				{
					"description": "Duplicates should be re-rolled.",
					"const": "no_duplicates",
					"type": "string"
				},
				{
					"description": "Duplicates should be kept.",
					"const": "keep_duplicates",
					"type": "string"
				},
				{
					"description": "Duplicates should be kept, and they compound to make things worse.",
					"const": "make_it_worse",
					"type": "string"
				}
			]
		},
		"OracleCollection": {
			"type": "object",
			"properties": {
				"rendering": {
					"default": {
						"style": "tables"
					},
					"$ref": "#/definitions/OracleCollectionRendering"
				},
				"id": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"color": {
					"description": "A thematic color associated with this collection.",
					"$ref": "#/definitions/CssColor"
				},
				"summary": {
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"images": {
					"type": "array",
					"items": {
						"description": "Extra images associated with this collection.",
						"$ref": "#/definitions/WebpImageUrl"
					}
				},
				"icon": {
					"description": "An SVG icon associated with this collection.",
					"$ref": "#/definitions/SvgImageUrl"
				},
				"enhances": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
				},
				"replaces": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
				},
				"contents": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/OracleTable"
						}
					}
				},
				"collections": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/OracleCollection"
						}
					}
				}
			},
			"required": [
				"id",
				"name",
				"source"
			],
			"title": "OracleCollection",
			"additionalProperties": false
		},
		"OracleCollectionRendering": {
			"description": "Describes the presentation of this oracle collection, which might represent a group of separate tables, or a single table with additional columns.",
			"tsType": "OracleCollectionRenderingTables | OracleCollectionRenderingMultiTable",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `style` property as a discriminator.",
			"required": [
				"style"
			],
			"title": "OracleCollectionRendering",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleCollectionRenderingTables"
				},
				{
					"$ref": "#/definitions/OracleCollectionRenderingMultiTable"
				}
			]
		},
		"OracleCollectionRenderingMultiTable": {
			"type": "object",
			"properties": {
				"style": {
					"description": "Presented as a single table, with its OracleTable children rendered as columns.",
					"const": "multi_table",
					"type": "string"
				},
				"columns": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/OracleCollectionTableColumn"
						}
					}
				}
			},
			"required": [
				"style",
				"columns"
			],
			"title": "OracleCollectionRenderingMultiTable",
			"additionalProperties": false
		},
		"OracleCollectionRenderingTables": {
			"type": "object",
			"properties": {
				"style": {
					"description": "Presented as a collection of separate tables.",
					"const": "tables",
					"type": "string"
				}
			},
			"required": [
				"style"
			],
			"title": "OracleCollectionRenderingTables",
			"additionalProperties": false
		},
		"OracleCollectionStyle": {
			"title": "OracleCollectionStyle",
			"anyOf": [
				{
					"description": "Presented as a collection of separate tables.",
					"const": "tables",
					"type": "string"
				},
				{
					"description": "Presented as a single table, with its OracleTable children rendered as columns.",
					"const": "multi_table",
					"type": "string"
				}
			]
		},
		"OracleCollectionTableColumn": {
			"type": "object",
			"properties": {
				"label": {
					"description": "The column's header text.",
					"$ref": "#/definitions/Label"
				},
				"content_type": {
					"$ref": "#/definitions/OracleTableColumnContentKey"
				},
				"color": {
					"description": "The thematic color for this column.",
					"$ref": "#/definitions/CssColor"
				},
				"table_key": {
					"description": "The key of the OracleTable (within this collection), whose data is used to render this column.",
					"$ref": "#/definitions/DictKey"
				}
			},
			"required": [
				"label",
				"content_type",
				"table_key"
			],
			"title": "OracleCollectionTableColumn",
			"additionalProperties": false
		},
		"OracleTable": {
			"description": "Represents a single oracle table, or a single table column of a table that has multiple \"Roll\" or \"Result\" columns.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/OracleTableId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"dice": {
					"default": "1d100",
					"description": "The roll used to select a result on this table.",
					"$ref": "#/definitions/DiceNotation"
				},
				"_i18n": {
					"macro": true,
					"$ref": "#/definitions/I18nHints"
				},
				"icon": {
					"description": "An icon that represents this table.",
					"$ref": "#/definitions/SvgImageUrl"
				},
				"images": {
					"type": "array",
					"items": {
						"description": "Extra images associated with this table.",
						"$ref": "#/definitions/WebpImageUrl"
					}
				},
				"summary": {
					"description": "A brief summary of the oracle table's intended usage, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"replaces": {
					"description": "Indicates that this table replaces the identified table. References to the replaced table can be considered equivalent to this table.",
					"$ref": "#/definitions/OracleTableId"
				},
				"description": {
					"description": "A longer description of the oracle table's intended usage, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"match": {
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior.",
					"$ref": "#/definitions/OracleTableMatchBehavior"
				},
				"table": {
					"type": "array",
					"items": {
						"description": "An array of objects, each representing a single row of the table.",
						"$ref": "#/definitions/OracleTableRow"
					}
				},
				"rendering": {
					"description": "Describes how how to render this table, when presenting it as a standalone table.",
					"$ref": "#/definitions/OracleTableRendering"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"dice",
				"table"
			],
			"title": "OracleTable",
			"additionalProperties": false
		},
		"OracleTableColumn": {
			"examples": [
				{
					"label": "Roll",
					"content_type": "roll"
				},
				{
					"label": "Result",
					"content_type": "result"
				},
				{
					"label": "Summary",
					"content_type": "summary"
				}
			],
			"type": "object",
			"properties": {
				"label": {
					"description": "The column's header text.",
					"$ref": "#/definitions/Label"
				},
				"content_type": {
					"$ref": "#/definitions/OracleTableColumnContentKey"
				},
				"color": {
					"description": "The thematic color for this column.",
					"$ref": "#/definitions/CssColor"
				}
			},
			"required": [
				"label",
				"content_type"
			],
			"title": "OracleTableColumn",
			"additionalProperties": false
		},
		"OracleTableColumnContentKey": {
			"description": "The value(s) from each OracleTableRow that is rendered in this column.",
			"title": "OracleTableColumnContentKey",
			"anyOf": [
				{
					"description": "Column displays the roll range (`min` and `max`) of each OracleTableRow.",
					"const": "roll",
					"type": "string"
				},
				{
					"description": "Column displays the OracleTableRow's `result` key.",
					"const": "result",
					"type": "string"
				},
				{
					"description": "Column displays the OracleTableRow's `summary` key.",
					"const": "summary",
					"type": "string"
				},
				{
					"description": "Column displays the OracleTableRow's `description` key.",
					"const": "description",
					"type": "string"
				}
			]
		},
		"OracleTableRendering": {
			"description": "Describes the presentation of this table.",
			"default": {
				"style": "standalone",
				"columns": {
					"roll": {
						"label": "Roll",
						"content_type": "roll"
					},
					"result": {
						"label": "Result",
						"content_type": "result"
					}
				}
			},
			"tsType": "OracleTableRenderingStandalone | OracleTableRenderingColumn | OracleTableRenderingEmbedInRow",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `style` property as a discriminator.",
			"required": [
				"style"
			],
			"title": "OracleTableRendering",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleTableRenderingStandalone"
				},
				{
					"$ref": "#/definitions/OracleTableRenderingColumn"
				},
				{
					"$ref": "#/definitions/OracleTableRenderingEmbedInRow"
				}
			]
		},
		"OracleTableRenderingColumn": {
			"type": "object",
			"properties": {
				"style": {
					"description": "Render as a single column of a table.",
					"const": "column",
					"type": "string"
				}
			},
			"required": [
				"style"
			],
			"title": "OracleTableRenderingColumn",
			"additionalProperties": false
		},
		"OracleTableRenderingEmbedInRow": {
			"type": "object",
			"properties": {
				"style": {
					"description": "Render as a table, within a row in another table.",
					"const": "embed_in_row",
					"type": "string"
				}
			},
			"required": [
				"style"
			],
			"title": "OracleTableRenderingEmbedInRow",
			"additionalProperties": false
		},
		"OracleTableRenderingStandalone": {
			"type": "object",
			"properties": {
				"style": {
					"description": "Render as a standalone table.",
					"const": "standalone",
					"type": "string"
				},
				"columns": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/OracleTableColumn"
						}
					}
				}
			},
			"required": [
				"style",
				"columns"
			],
			"title": "OracleTableRenderingStandalone",
			"additionalProperties": false
		},
		"OracleTableRow": {
			"description": "Represents a row in an oracle table.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/OracleTableRowId",
					"description": "The unique Datasworn ID for this item."
				},
				"result": {
					"description": "The primary text content of this row.",
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"summary": {
					"description": "Optional secondary text content for this row. Generally, this is longer than `result`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "Optional tertiary text content for this row. Generally, this is longer than both `result` and `summary`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"rolls": {
					"description": "Further oracle rolls prompted by this table row.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableRoll"
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"embed_table": {
					"description": "Hints that the identified table should be rendered inside this table row.",
					"$ref": "#/definitions/OracleTableId"
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate"
				},
				"i18n": {
					"$ref": "#/definitions/I18nHints"
				},
				"min": {
					"default": null,
					"anyOf": [
						{
							"description": "Low end of the dice range for this table row.",
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"description": "Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				},
				"max": {
					"default": null,
					"anyOf": [
						{
							"description": "High end of the dice range for this table row.",
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"description": "High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				}
			},
			"required": [
				"id",
				"result",
				"min",
				"max"
			],
			"title": "OracleTableRow",
			"additionalProperties": false
		},
		"OracleTableStyle": {
			"title": "OracleTableStyle",
			"anyOf": [
				{
					"description": "Render as a standalone table.",
					"const": "standalone",
					"type": "string"
				},
				{
					"description": "Render as a table, within a row in another table.",
					"const": "embed_in_row",
					"type": "string"
				},
				{
					"description": "Render as a single column of a table.",
					"const": "column",
					"type": "string"
				}
			]
		},
		"ActionRollMethod": {
			"title": "ActionRollMethod",
			"anyOf": [
				{
					"description": "An automatic miss.",
					"const": "miss",
					"type": "string"
				},
				{
					"description": "An automatic weak hit.",
					"const": "weak_hit",
					"type": "string"
				},
				{
					"description": "An automatic strong hit.",
					"const": "strong_hit",
					"type": "string"
				},
				{
					"description": "The player chooses which roll option to use.",
					"const": "player_choice",
					"type": "string"
				},
				{
					"description": "Use the roll option with the best/highest value.",
					"const": "highest",
					"type": "string"
				},
				{
					"description": "Use the roll option with the worst/lowest value.",
					"const": "lowest",
					"type": "string"
				},
				{
					"description": "Use **every** roll option at once.",
					"const": "all",
					"type": "string"
				}
			]
		},
		"ActionRollOption": {
			"tsType": "RollOptionStat | RollOptionConditionMeter | RollOptionAssetControl | RollOptionAssetOption | RollOptionAttachedAssetControl | RollOptionAttachedAssetOption | RollOptionCustom",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `using` property as a discriminator.",
			"required": [
				"using"
			],
			"title": "ActionRollOption",
			"anyOf": [
				{
					"$ref": "#/definitions/RollOptionStat"
				},
				{
					"$ref": "#/definitions/RollOptionConditionMeter"
				},
				{
					"$ref": "#/definitions/RollOptionAssetControl"
				},
				{
					"$ref": "#/definitions/RollOptionAssetOption"
				},
				{
					"$ref": "#/definitions/RollOptionAttachedAssetControl"
				},
				{
					"$ref": "#/definitions/RollOptionAttachedAssetOption"
				},
				{
					"$ref": "#/definitions/RollOptionCustom"
				}
			]
		},
		"ActionRollUsing": {
			"title": "ActionRollUsing",
			"anyOf": [
				{
					"description": "Roll using a standard player character stat.",
					"const": "stat",
					"type": "string"
				},
				{
					"description": "Roll using the value of a standard player condition meter.",
					"const": "condition_meter",
					"type": "string"
				},
				{
					"description": "Roll using the value of an asset control.",
					"const": "asset_control",
					"type": "string"
				},
				{
					"description": "Roll using the value of an asset option.",
					"const": "asset_option",
					"type": "string"
				},
				{
					"description": "Roll using an integer value with customizable labels.",
					"const": "custom",
					"type": "string"
				},
				{
					"description": "Roll using the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.",
					"const": "attached_asset_control",
					"type": "string"
				},
				{
					"description": "Roll using the value of an attached asset option.",
					"const": "attached_asset_option",
					"type": "string"
				}
			]
		},
		"Move": {
			"title": "Move",
			"tsType": "MoveActionRoll | MoveNoRoll | MoveProgressRoll | MoveSpecialTrack",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.",
			"required": [
				"roll_type"
			],
			"anyOf": [
				{
					"$ref": "#/definitions/MoveActionRoll"
				},
				{
					"$ref": "#/definitions/MoveNoRoll"
				},
				{
					"$ref": "#/definitions/MoveProgressRoll"
				},
				{
					"$ref": "#/definitions/MoveSpecialTrack"
				}
			]
		},
		"MoveActionRoll": {
			"description": "A move that makes an action roll.",
			"title": "Move (action roll)",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"replaces": {
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move.",
					"$ref": "#/definitions/MoveId"
				},
				"text": {
					"description": "The complete rules text of the move.",
					"$ref": "#/definitions/MarkdownString"
				},
				"oracles": {
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableId"
					}
				},
				"roll_type": {
					"description": "A move that makes an action roll.",
					"const": "action_roll",
					"type": "string"
				},
				"trigger": {
					"title": "Trigger",
					"$ref": "#/definitions/TriggerActionRoll"
				},
				"outcomes": {
					"title": "MoveOutcomes",
					"$ref": "#/definitions/MoveOutcomes"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"text",
				"roll_type",
				"trigger",
				"outcomes"
			],
			"additionalProperties": false
		},
		"MoveActionRollEnhancement": {
			"type": "object",
			"properties": {
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"roll_type": {
					"description": "A move that makes an action roll.",
					"const": "action_roll",
					"type": "string"
				},
				"trigger": {
					"$ref": "#/definitions/TriggerActionRollEnhancement"
				}
			},
			"required": [
				"roll_type"
			],
			"title": "MoveActionRollEnhancement",
			"additionalProperties": false
		},
		"MoveCategory": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/MoveCategoryId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"color": {
					"description": "A thematic color associated with this collection.",
					"$ref": "#/definitions/CssColor"
				},
				"summary": {
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"images": {
					"type": "array",
					"items": {
						"description": "Extra images associated with this collection.",
						"$ref": "#/definitions/WebpImageUrl"
					}
				},
				"icon": {
					"description": "An SVG icon associated with this collection.",
					"$ref": "#/definitions/SvgImageUrl"
				},
				"enhances": {
					"$ref": "#/definitions/MoveCategoryId",
					"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
				},
				"replaces": {
					"$ref": "#/definitions/MoveCategoryId",
					"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
				},
				"contents": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Move"
						}
					}
				}
			},
			"required": [
				"id",
				"name",
				"source"
			],
			"title": "MoveCategory",
			"additionalProperties": false
		},
		"MoveEnhancement": {
			"tsType": "MoveActionRollEnhancement | MoveNoRollEnhancement | MoveProgressRollEnhancement | MoveSpecialTrackEnhancement",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.",
			"required": [
				"roll_type"
			],
			"title": "MoveEnhancement",
			"anyOf": [
				{
					"$ref": "#/definitions/MoveActionRollEnhancement"
				},
				{
					"$ref": "#/definitions/MoveNoRollEnhancement"
				},
				{
					"$ref": "#/definitions/MoveProgressRollEnhancement"
				},
				{
					"$ref": "#/definitions/MoveSpecialTrackEnhancement"
				}
			]
		},
		"MoveNoRoll": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"replaces": {
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move.",
					"$ref": "#/definitions/MoveId"
				},
				"text": {
					"description": "The complete rules text of the move.",
					"$ref": "#/definitions/MarkdownString"
				},
				"oracles": {
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableId"
					}
				},
				"roll_type": {
					"description": "A move that makes no action rolls or progress rolls.",
					"const": "no_roll",
					"type": "string"
				},
				"trigger": {
					"title": "Trigger",
					"$ref": "#/definitions/TriggerNoRoll"
				},
				"outcomes": {
					"title": "MoveOutcomes",
					"default": null,
					"type": "null"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"text",
				"roll_type",
				"trigger",
				"outcomes"
			],
			"title": "MoveNoRoll",
			"additionalProperties": false
		},
		"MoveNoRollEnhancement": {
			"type": "object",
			"properties": {
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"roll_type": {
					"description": "A move that makes no action rolls or progress rolls.",
					"const": "no_roll",
					"type": "string"
				},
				"trigger": {
					"$ref": "#/definitions/TriggerNoRollEnhancement"
				}
			},
			"required": [
				"roll_type"
			],
			"title": "MoveNoRollEnhancement",
			"additionalProperties": false
		},
		"MoveOutcome": {
			"type": "object",
			"properties": {
				"text": {
					"type": "string",
					"pattern": "On a \\*\\*(strong hit|weak hit|miss)\\*\\*",
					"$ref": "#/definitions/MarkdownString"
				}
			},
			"required": [
				"text"
			],
			"title": "MoveOutcome",
			"additionalProperties": false
		},
		"MoveOutcomeType": {
			"title": "MoveOutcomeType",
			"anyOf": [
				{
					"description": "The score doesn't beat either challenge die.",
					"const": "miss",
					"type": "string"
				},
				{
					"description": "The score is greater than one challenge die.",
					"const": "weak_hit",
					"type": "string"
				},
				{
					"description": "The score is greater than both challenge dice.",
					"const": "strong_hit",
					"type": "string"
				}
			]
		},
		"MoveOutcomes": {
			"description": "A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.",
			"type": "object",
			"properties": {
				"strong_hit": {
					"$ref": "#/definitions/MoveOutcome"
				},
				"weak_hit": {
					"$ref": "#/definitions/MoveOutcome"
				},
				"miss": {
					"$ref": "#/definitions/MoveOutcome"
				}
			},
			"required": [
				"strong_hit",
				"weak_hit",
				"miss"
			],
			"title": "MoveOutcomes",
			"additionalProperties": false
		},
		"MoveProgressRoll": {
			"title": "Progress Move",
			"description": "A progress move that rolls on a standard progress track type (defined by the move object).",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"replaces": {
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move.",
					"$ref": "#/definitions/MoveId"
				},
				"text": {
					"description": "The complete rules text of the move.",
					"$ref": "#/definitions/MarkdownString"
				},
				"oracles": {
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableId"
					}
				},
				"roll_type": {
					"description": "A progress move that rolls on a standard progress track type (defined by this move).",
					"const": "progress_roll",
					"type": "string"
				},
				"trigger": {
					"title": "Trigger",
					"$ref": "#/definitions/TriggerProgressRoll"
				},
				"outcomes": {
					"title": "MoveOutcomes",
					"$ref": "#/definitions/MoveOutcomes"
				},
				"tracks": {
					"description": "Describes the common features of progress tracks associated with this move.",
					"$ref": "#/definitions/ProgressTrackTypeInfo"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"text",
				"roll_type",
				"trigger",
				"outcomes",
				"tracks"
			],
			"additionalProperties": false
		},
		"MoveProgressRollEnhancement": {
			"type": "object",
			"properties": {
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"roll_type": {
					"description": "A progress move that rolls on a standard progress track type (defined by this move).",
					"const": "progress_roll",
					"type": "string"
				},
				"trigger": {
					"$ref": "#/definitions/TriggerProgressRollEnhancement"
				}
			},
			"required": [
				"roll_type"
			],
			"title": "MoveProgressRollEnhancement",
			"additionalProperties": false
		},
		"MoveRollType": {
			"title": "MoveRollType",
			"anyOf": [
				{
					"description": "A move that makes no action rolls or progress rolls.",
					"const": "no_roll",
					"type": "string"
				},
				{
					"description": "A move that makes an action roll.",
					"const": "action_roll",
					"type": "string"
				},
				{
					"description": "A progress move that rolls on a standard progress track type (defined by this move).",
					"const": "progress_roll",
					"type": "string"
				},
				{
					"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"const": "special_track",
					"type": "string"
				}
			]
		},
		"MoveSpecialTrack": {
			"title": "Progress Move (special track roll)",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"replaces": {
					"description": "Indicates that this move replaces the identified move. References to the replaced move can be considered equivalent to this move.",
					"$ref": "#/definitions/MoveId"
				},
				"text": {
					"description": "The complete rules text of the move.",
					"$ref": "#/definitions/MarkdownString"
				},
				"oracles": {
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableId"
					}
				},
				"roll_type": {
					"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"const": "special_track",
					"type": "string"
				},
				"trigger": {
					"title": "Trigger",
					"$ref": "#/definitions/TriggerSpecialTrack"
				},
				"outcomes": {
					"title": "MoveOutcomes",
					"$ref": "#/definitions/MoveOutcomes"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"text",
				"roll_type",
				"trigger",
				"outcomes"
			],
			"additionalProperties": false
		},
		"MoveSpecialTrackEnhancement": {
			"type": "object",
			"properties": {
				"enhances": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"roll_type": {
					"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"const": "special_track",
					"type": "string"
				},
				"trigger": {
					"$ref": "#/definitions/TriggerSpecialTrackEnhancement"
				}
			},
			"required": [
				"roll_type"
			],
			"title": "MoveSpecialTrackEnhancement",
			"additionalProperties": false
		},
		"ProgressRollMethod": {
			"title": "ProgressRollMethod",
			"anyOf": [
				{
					"description": "An automatic miss.",
					"const": "miss",
					"type": "string"
				},
				{
					"description": "An automatic weak hit.",
					"const": "weak_hit",
					"type": "string"
				},
				{
					"description": "An automatic strong hit.",
					"const": "strong_hit",
					"type": "string"
				},
				{
					"description": "Make a progress roll on a progress track associated with this move.",
					"const": "progress_roll",
					"type": "string"
				}
			]
		},
		"ProgressRollOption": {
			"type": "object",
			"properties": {
				"using": {
					"const": "progress_track",
					"type": "string"
				}
			},
			"required": [
				"using"
			],
			"title": "ProgressRollOption",
			"additionalProperties": false
		},
		"RollOptionAssetControl": {
			"type": "object",
			"properties": {
				"assets": {
					"default": null,
					"description": "Asset IDs (which may be wildcarded) that provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.",
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/AssetIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"control": {
					"description": "The key of the asset control field.",
					"examples": [
						"health",
						"integrity"
					],
					"$ref": "#/definitions/DictKey"
				},
				"using": {
					"description": "Roll using the value of an asset control.",
					"const": "asset_control",
					"type": "string"
				}
			},
			"required": [
				"assets",
				"control",
				"using"
			],
			"title": "RollOptionAssetControl",
			"additionalProperties": false
		},
		"RollOptionAssetOption": {
			"type": "object",
			"properties": {
				"assets": {
					"default": null,
					"description": "Asset IDs (which may be wildcarded) that provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.",
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/AssetIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"option": {
					"description": "The key of the asset option field.",
					"$ref": "#/definitions/DictKey"
				},
				"using": {
					"description": "Roll using the value of an asset option.",
					"const": "asset_option",
					"type": "string"
				}
			},
			"required": [
				"assets",
				"option",
				"using"
			],
			"title": "RollOptionAssetOption",
			"additionalProperties": false
		},
		"RollOptionAttachedAssetControl": {
			"type": "object",
			"properties": {
				"control": {
					"description": "The key of the asset control field.",
					"examples": [
						"health",
						"integrity"
					],
					"$ref": "#/definitions/DictKey"
				},
				"using": {
					"description": "Roll using the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.",
					"const": "attached_asset_control",
					"type": "string"
				}
			},
			"required": [
				"control",
				"using"
			],
			"title": "RollOptionAttachedAssetControl",
			"additionalProperties": false
		},
		"RollOptionAttachedAssetOption": {
			"type": "object",
			"properties": {
				"option": {
					"description": "The key of the asset option field.",
					"$ref": "#/definitions/DictKey"
				},
				"using": {
					"description": "Roll using the value of an attached asset option.",
					"const": "attached_asset_option",
					"type": "string"
				}
			},
			"required": [
				"option",
				"using"
			],
			"title": "RollOptionAttachedAssetOption",
			"additionalProperties": false
		},
		"RollOptionConditionMeter": {
			"type": "object",
			"properties": {
				"condition_meter": {
					"$ref": "#/definitions/ConditionMeterId"
				},
				"using": {
					"description": "Roll using the value of a standard player condition meter.",
					"const": "condition_meter",
					"type": "string"
				}
			},
			"required": [
				"condition_meter",
				"using"
			],
			"title": "RollOptionConditionMeter",
			"additionalProperties": false
		},
		"RollOptionCustom": {
			"type": "object",
			"properties": {
				"name": {
					"$ref": "#/definitions/Label"
				},
				"value": {
					"minimum": 0,
					"type": "integer"
				},
				"using": {
					"description": "Roll using an integer value with customizable labels.",
					"const": "custom",
					"type": "string"
				}
			},
			"required": [
				"name",
				"value",
				"using"
			],
			"title": "RollOptionCustom",
			"additionalProperties": false
		},
		"RollOptionStat": {
			"type": "object",
			"properties": {
				"stat": {
					"$ref": "#/definitions/StatId"
				},
				"using": {
					"description": "Roll using a standard player character stat.",
					"const": "stat",
					"type": "string"
				}
			},
			"required": [
				"stat",
				"using"
			],
			"title": "RollOptionStat",
			"additionalProperties": false
		},
		"SpecialTrackRollMethod": {
			"title": "SpecialTrackRollMethod",
			"anyOf": [
				{
					"description": "An automatic miss.",
					"const": "miss",
					"type": "string"
				},
				{
					"description": "An automatic weak hit.",
					"const": "weak_hit",
					"type": "string"
				},
				{
					"description": "An automatic strong hit.",
					"const": "strong_hit",
					"type": "string"
				},
				{
					"description": "The player chooses which roll option to use.",
					"const": "player_choice",
					"type": "string"
				},
				{
					"description": "Use the roll option with the best/highest value.",
					"const": "highest",
					"type": "string"
				},
				{
					"description": "Use the roll option with the worst/lowest value.",
					"const": "lowest",
					"type": "string"
				},
				{
					"description": "Use **every** roll option at once.",
					"const": "all",
					"type": "string"
				}
			]
		},
		"TriggerActionRoll": {
			"title": "TriggerActionRoll",
			"description": "Describes trigger conditions for a move that makes an action roll.",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/definitions/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerActionRollCondition"
					},
					"description": "Specific conditions that qualify for this trigger."
				}
			},
			"required": [
				"text",
				"conditions"
			],
			"additionalProperties": false
		},
		"TriggerActionRollCondition": {
			"title": "TriggerActionRollCondition",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string of any trigger text specific to this trigger condition.",
					"$ref": "#/definitions/MarkdownString"
				},
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"$ref": "#/definitions/ActionRollMethod"
				},
				"roll_options": {
					"description": "The options available when rolling with this trigger condition.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ActionRollOption"
					}
				}
			},
			"required": [
				"method",
				"roll_options"
			],
			"additionalProperties": false
		},
		"TriggerActionRollConditionEnhancement": {
			"title": "TriggerActionRollConditionEnhancement",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string of any trigger text specific to this trigger condition.",
					"$ref": "#/definitions/MarkdownString"
				},
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"default": null,
					"description": "A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.",
					"anyOf": [
						{
							"$ref": "#/definitions/ActionRollMethod"
						},
						{
							"type": "null"
						}
					]
				},
				"roll_options": {
					"default": null,
					"anyOf": [
						{
							"description": "The options available when rolling with this trigger condition.",
							"type": "array",
							"items": {
								"$ref": "#/definitions/ActionRollOption"
							}
						},
						{
							"type": "null"
						}
					]
				}
			},
			"required": [
				"method",
				"roll_options"
			],
			"additionalProperties": false
		},
		"TriggerActionRollEnhancement": {
			"title": "TriggerActionRollEnhancement",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerActionRollConditionEnhancement"
					}
				}
			},
			"required": [
				"conditions"
			],
			"additionalProperties": false
		},
		"TriggerBy": {
			"title": "TriggerBy",
			"description": "Information on who can trigger this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
			"type": "object",
			"properties": {
				"player": {
					"default": true,
					"description": "Can this trigger be activated by the player who owns this?",
					"type": "boolean"
				},
				"ally": {
					"default": false,
					"description": "Can this trigger be activated by one of the player's allies?",
					"type": "boolean"
				}
			},
			"required": [
				"player",
				"ally"
			],
			"additionalProperties": false
		},
		"TriggerNoRoll": {
			"title": "TriggerNoRoll",
			"description": "Describes trigger conditions for a move that makes no rolls.",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/definitions/MarkdownString"
				},
				"conditions": {
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/TriggerNoRollCondition"
							}
						},
						{
							"type": "null"
						}
					],
					"description": "Specific conditions that qualify for this trigger."
				}
			},
			"required": [
				"text",
				"conditions"
			],
			"additionalProperties": false
		},
		"TriggerNoRollCondition": {
			"title": "TriggerNoRollCondition",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string of any trigger text specific to this trigger condition.",
					"$ref": "#/definitions/MarkdownString"
				},
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"default": null,
					"type": "null"
				},
				"roll_options": {
					"description": "The options available when rolling with this trigger condition.",
					"default": null,
					"type": "null"
				}
			},
			"required": [
				"method",
				"roll_options"
			],
			"additionalProperties": false
		},
		"TriggerNoRollEnhancement": {
			"title": "TriggerNoRollEnhancement",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerNoRollCondition"
					}
				}
			},
			"required": [
				"conditions"
			],
			"additionalProperties": false
		},
		"TriggerProgressRoll": {
			"title": "TriggerProgressRoll",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/definitions/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerProgressRollCondition"
					},
					"description": "Specific conditions that qualify for this trigger."
				}
			},
			"required": [
				"text",
				"conditions"
			],
			"additionalProperties": false
		},
		"TriggerProgressRollCondition": {
			"title": "TriggerProgressRollCondition",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string of any trigger text specific to this trigger condition.",
					"$ref": "#/definitions/MarkdownString"
				},
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"default": "progress_roll",
					"$ref": "#/definitions/ProgressRollMethod"
				},
				"roll_options": {
					"description": "The options available when rolling with this trigger condition.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ProgressRollOption"
					}
				}
			},
			"required": [
				"method",
				"roll_options"
			],
			"additionalProperties": false
		},
		"TriggerProgressRollConditionEnhancement": {
			"title": "TriggerProgressRollConditionEnhancement",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string of any trigger text specific to this trigger condition.",
					"$ref": "#/definitions/MarkdownString"
				},
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"default": null,
					"description": "A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.",
					"anyOf": [
						{
							"default": "progress_roll",
							"$ref": "#/definitions/ProgressRollMethod"
						},
						{
							"type": "null"
						}
					]
				},
				"roll_options": {
					"default": null,
					"anyOf": [
						{
							"description": "The options available when rolling with this trigger condition.",
							"type": "array",
							"items": {
								"$ref": "#/definitions/ProgressRollOption"
							}
						},
						{
							"type": "null"
						}
					]
				}
			},
			"required": [
				"method",
				"roll_options"
			],
			"additionalProperties": false
		},
		"TriggerProgressRollEnhancement": {
			"title": "TriggerProgressRollEnhancement",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerProgressRollConditionEnhancement"
					}
				}
			},
			"required": [
				"conditions"
			],
			"additionalProperties": false
		},
		"TriggerSpecialTrack": {
			"title": "TriggerSpecialTrack",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/definitions/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerSpecialTrackCondition"
					},
					"description": "Specific conditions that qualify for this trigger."
				}
			},
			"required": [
				"text",
				"conditions"
			],
			"additionalProperties": false
		},
		"TriggerSpecialTrackCondition": {
			"title": "TriggerSpecialTrackCondition",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string of any trigger text specific to this trigger condition.",
					"$ref": "#/definitions/MarkdownString"
				},
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"$ref": "#/definitions/SpecialTrackRollMethod"
				},
				"roll_options": {
					"description": "The options available when rolling with this trigger condition.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerSpecialTrackConditionOption"
					}
				}
			},
			"required": [
				"method",
				"roll_options"
			],
			"additionalProperties": false
		},
		"TriggerSpecialTrackConditionEnhancement": {
			"title": "TriggerSpecialTrackConditionEnhancement",
			"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged).",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string of any trigger text specific to this trigger condition.",
					"$ref": "#/definitions/MarkdownString"
				},
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"default": null,
					"description": "A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.",
					"anyOf": [
						{
							"$ref": "#/definitions/SpecialTrackRollMethod"
						},
						{
							"type": "null"
						}
					]
				},
				"roll_options": {
					"default": null,
					"anyOf": [
						{
							"description": "The options available when rolling with this trigger condition.",
							"type": "array",
							"items": {
								"$ref": "#/definitions/TriggerSpecialTrackConditionOption"
							}
						},
						{
							"type": "null"
						}
					]
				}
			},
			"required": [
				"method",
				"roll_options"
			],
			"additionalProperties": false
		},
		"TriggerSpecialTrackConditionOption": {
			"title": "TriggerSpecialTrackConditionOption",
			"type": "object",
			"properties": {
				"using": {
					"$ref": "#/definitions/SpecialTrackType"
				}
			},
			"required": [
				"using"
			],
			"additionalProperties": false
		},
		"TriggerSpecialTrackEnhancement": {
			"title": "TriggerSpecialTrackEnhancement",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TriggerSpecialTrackConditionEnhancement"
					}
				}
			},
			"required": [
				"conditions"
			],
			"additionalProperties": false
		},
		"Asset": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/AssetId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"asset_type": {
					"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
					"examples": [
						"Combat Talent",
						"Command Vehicle",
						"Companion",
						"Deed",
						"Module",
						"Path",
						"Ritual",
						"Support Vehicle"
					],
					"$ref": "#/definitions/Label"
				},
				"icon": {
					"description": "This asset's icon.",
					"$ref": "#/definitions/SvgImageUrl"
				},
				"color": {
					"description": "A thematic color associated with this asset.",
					"$ref": "#/definitions/CssColor"
				},
				"options": {
					"description": "Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetOptionField"
						}
					}
				},
				"requirement": {
					"description": "Describes prerequisites for purchasing or using this asset.",
					"$ref": "#/definitions/MarkdownString"
				},
				"abilities": {
					"type": "array",
					"items": {
						"description": "Abilities provided by this asset. Most assets have 3.",
						"$ref": "#/definitions/AssetAbility"
					}
				},
				"controls": {
					"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetControlField"
						}
					}
				},
				"count_as_impact": {
					"default": false,
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"type": "boolean"
				},
				"attachments": {
					"$ref": "#/definitions/AssetAttachment"
				},
				"shared": {
					"default": false,
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
					"type": "boolean"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"asset_type",
				"abilities",
				"count_as_impact",
				"shared"
			],
			"title": "Asset",
			"additionalProperties": false
		},
		"AssetAbility": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/AssetAbilityId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"$ref": "#/definitions/Label"
				},
				"text": {
					"$ref": "#/definitions/MarkdownString"
				},
				"enabled": {
					"default": false,
					"description": "Is this asset ability enabled?",
					"type": "boolean"
				},
				"moves": {
					"description": "Unique moves added by this asset ability.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Move"
						}
					}
				},
				"options": {
					"description": "Fields that are expected to be set once and remain the same through the life of the asset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetAbilityOptionField"
						}
					}
				},
				"controls": {
					"description": "Fields whose values are expected to change over the life of the asset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetAbilityControlField"
						}
					}
				},
				"enhance_asset": {
					"description": "Changes made to the asset, when this ability is enabled.",
					"$ref": "#/definitions/AssetEnhancement"
				},
				"enhance_moves": {
					"description": "Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/MoveEnhancement"
					}
				}
			},
			"required": [
				"id",
				"text",
				"enabled"
			],
			"title": "AssetAbility",
			"additionalProperties": false
		},
		"AssetAbilityControlField": {
			"tsType": "ClockField | CounterField | AssetCheckboxField",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": [
				"field_type"
			],
			"title": "AssetAbilityControlField",
			"anyOf": [
				{
					"description": "A clock with 4, 6, 8, or 10 segments.",
					"$comment": "Semantics are similar to `<input type=\"number\">`, but rendered as a clock (a circle with equally sized wedges).",
					"title": "ClockField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetAbilityControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "The current number of filled clock segments.",
							"default": 0,
							"type": "integer"
						},
						"min": {
							"description": "The minimum number of filled clock segments. This is always 0.",
							"type": "integer"
						},
						"max": {
							"description": "The size of the clock -- in other words, the maximum number of filled clock segments.",
							"title": "ClockSize",
							"type": "integer"
						},
						"field_type": {
							"const": "clock",
							"type": "string"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"min",
						"max",
						"field_type"
					],
					"additionalProperties": false
				},
				{
					"description": "A counter that starts at zero, with an optional maximum value.",
					"$comment": "Semantics are similar to `<input type=\"number\">`.",
					"title": "CounterField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetAbilityControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "The current value of this input.",
							"default": 0,
							"type": "integer"
						},
						"min": {
							"description": "The (inclusive) minimum value.",
							"type": "integer"
						},
						"max": {
							"default": null,
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "null"
								}
							],
							"description": "The (inclusive) maximum value."
						},
						"field_type": {
							"const": "counter",
							"type": "string"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"min",
						"max",
						"field_type"
					],
					"additionalProperties": false
				},
				{
					"description": "Represents a checkbox.",
					"$comment": "Semantics are similar to the `<input type=\"checkbox\">` element.",
					"title": "AssetCheckboxField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetAbilityControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "Is the box checked?",
							"default": false,
							"type": "boolean"
						},
						"field_type": {
							"const": "checkbox",
							"type": "string"
						},
						"is_impact": {
							"default": false,
							"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
							"type": "boolean"
						},
						"disables_asset": {
							"default": false,
							"description": "Does this field disable the asset when its value is set to `true`?",
							"type": "boolean"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"field_type",
						"is_impact",
						"disables_asset"
					],
					"additionalProperties": false
				}
			]
		},
		"AssetAbilityOptionField": {
			"description": "Represents an input that accepts plain text.",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"title": "AssetAbilityOptionField",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/AssetAbilityOptionFieldId",
					"description": "The unique Datasworn ID for this item."
				},
				"label": {
					"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
					"$ref": "#/definitions/Label"
				},
				"value": {
					"description": "The content of this text input, or `null` if it's empty",
					"default": null,
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					]
				},
				"field_type": {
					"const": "text",
					"type": "string"
				}
			},
			"required": [
				"field_type"
			],
			"additionalProperties": false,
			"tsType": "TextField"
		},
		"AssetAttachment": {
			"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"type": "object",
			"properties": {
				"assets": {
					"description": "Asset IDs (which may be wildcards) that may be attached to this asset",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssetIdWildcard"
					}
				},
				"max": {
					"default": null,
					"description": "Null if there's no upper limit to the number of attached assets.",
					"anyOf": [
						{
							"minimum": 1,
							"type": "integer"
						},
						{
							"type": "null"
						}
					]
				}
			},
			"required": [
				"assets",
				"max"
			],
			"title": "AssetAttachment",
			"additionalProperties": false
		},
		"AssetConditionMeter": {
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/AssetControlFieldId",
					"description": "The unique Datasworn ID for this item."
				},
				"label": {
					"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
					"$ref": "#/definitions/Label"
				},
				"value": {
					"description": "The current value of this meter.",
					"type": "integer"
				},
				"min": {
					"description": "The minimum value of this meter.",
					"default": 0,
					"type": "integer"
				},
				"max": {
					"description": "The maximum value of this meter.",
					"type": "integer"
				},
				"field_type": {
					"const": "condition_meter",
					"type": "string"
				},
				"moves": {
					"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.",
					"releaseStage": "unstable",
					"type": "object",
					"properties": {
						"suffer": {
							"description": "The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option.",
							"type": "array",
							"items": {
								"examples": [
									"classic/moves/suffer/companion_endure_harm",
									"starforged/moves/suffer/companion_takes_a_hit",
									"starforged/moves/suffer/withstand_damage"
								],
								"$ref": "#/definitions/MoveIdWildcard"
							}
						},
						"recover": {
							"description": "The ID(s) of recovery moves associated with this meter.",
							"type": "array",
							"items": {
								"examples": [
									"classic/moves/adventure/heal",
									"classic/moves/adventure/make_camp",
									"classic/moves/relationship/sojourn",
									"starforged/moves/recover/heal",
									"starforged/moves/recover/repair"
								],
								"$ref": "#/definitions/MoveIdWildcard"
							}
						}
					},
					"additionalProperties": false
				},
				"controls": {
					"description": "Checkbox controls rendered as part of the condition meter.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetConditionMeterControlField"
						}
					}
				}
			},
			"required": [
				"id",
				"label",
				"value",
				"min",
				"max",
				"field_type"
			],
			"title": "AssetConditionMeter",
			"additionalProperties": false
		},
		"AssetConditionMeterControlField": {
			"description": "A checkbox control field, rendered as part of an asset condition meter.",
			"tsType": "AssetCheckboxField | AssetCardFlipField",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": [
				"field_type"
			],
			"title": "AssetConditionMeterControlField",
			"anyOf": [
				{
					"description": "Represents a checkbox.",
					"$comment": "Semantics are similar to the `<input type=\"checkbox\">` element.",
					"title": "AssetCheckboxField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetConditionMeterControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "Is the box checked?",
							"default": false,
							"type": "boolean"
						},
						"field_type": {
							"const": "checkbox",
							"type": "string"
						},
						"is_impact": {
							"default": false,
							"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
							"type": "boolean"
						},
						"disables_asset": {
							"default": false,
							"description": "Does this field disable the asset when its value is set to `true`?",
							"type": "boolean"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"field_type",
						"is_impact",
						"disables_asset"
					],
					"additionalProperties": false
				},
				{
					"description": "When its value is set to `true` it means that the card is flipped over. Some assets use this to represent a 'broken' state (e.g. Starforged Module assets).",
					"title": "AssetCardFlipField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetConditionMeterControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "Is the card flipped over?",
							"default": false,
							"type": "boolean"
						},
						"field_type": {
							"const": "card_flip",
							"type": "string"
						},
						"is_impact": {
							"default": false,
							"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
							"type": "boolean"
						},
						"disables_asset": {
							"default": false,
							"description": "Does this field disable the asset when its value is set to `true`?",
							"type": "boolean"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"field_type",
						"is_impact",
						"disables_asset"
					],
					"additionalProperties": false
				}
			]
		},
		"AssetConditionMeterEnhancement": {
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".",
			"type": "object",
			"properties": {
				"max": {
					"description": "The maximum value of this meter.",
					"type": "integer"
				},
				"field_type": {
					"const": "condition_meter",
					"type": "string"
				}
			},
			"required": [
				"max",
				"field_type"
			],
			"title": "AssetConditionMeterEnhancement",
			"additionalProperties": false
		},
		"AssetControlField": {
			"tsType": "AssetConditionMeter | SelectEnhancementField | AssetCheckboxField | AssetCardFlipField",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": [
				"field_type"
			],
			"title": "AssetControlField",
			"anyOf": [
				{
					"$ref": "#/definitions/AssetConditionMeter"
				},
				{
					"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles).",
					"$comment": "Semantics are similar to the HTML `<select>` element",
					"title": "SelectEnhancementField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "The current value of this input.",
							"default": null,
							"anyOf": [
								{
									"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected.",
									"default": null,
									"$ref": "#/definitions/DictKey"
								},
								{
									"type": "null"
								}
							]
						},
						"choices": {
							"type": "object",
							"patternProperties": {
								".*": {
									"type": "object",
									"tsType": "SelectEnhancementOption | SelectEnhancementOptionGroup",
									"allOf": [
										{
											"if": {
												"properties": {
													"option_type": {
														"const": "option",
														"type": "string"
													}
												}
											},
											"then": {
												"description": "Represents an option in a list of choices.",
												"$comment": "Semantics are similar to the HTML `<option>` element.",
												"title": "SelectEnhancementOption",
												"type": "object",
												"properties": {
													"option_type": {
														"const": "option",
														"type": "string"
													},
													"selected": {
														"description": "Is this option currently selected?",
														"type": "boolean"
													},
													"label": {
														"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
														"$ref": "#/definitions/Label"
													},
													"value": {
														"description": "The current value of this input.",
														"type": "object",
														"properties": {
															"enhance_asset": {
																"$ref": "#/definitions/AssetEnhancement"
															},
															"enhance_moves": {
																"type": "array",
																"items": {
																	"$ref": "#/definitions/MoveEnhancement"
																}
															}
														}
													}
												},
												"required": [
													"option_type",
													"label",
													"value"
												],
												"additionalProperties": false
											}
										},
										{
											"if": {
												"properties": {
													"option_type": {
														"const": "option_group",
														"type": "string"
													}
												}
											},
											"then": {
												"description": "Represents a grouping of options in a list of choices.",
												"$comment": "Semantics are similar to the HTML `<optgroup>` element.",
												"title": "SelectEnhancementOptionGroup",
												"type": "object",
												"properties": {
													"name": {
														"description": "A label for this option group.",
														"$ref": "#/definitions/Label"
													},
													"option_type": {
														"const": "option_group",
														"type": "string"
													},
													"choices": {
														"$comment": "Deserialize as a dictionary object.",
														"type": "object",
														"patternProperties": {
															"^([a-z][a-z_]*)$": {
																"description": "Represents an option in a list of choices.",
																"$comment": "Semantics are similar to the HTML `<option>` element.",
																"title": "SelectEnhancementOption",
																"type": "object",
																"properties": {
																	"option_type": {
																		"const": "option",
																		"type": "string"
																	},
																	"selected": {
																		"description": "Is this option currently selected?",
																		"type": "boolean"
																	},
																	"label": {
																		"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
																		"$ref": "#/definitions/Label"
																	},
																	"value": {
																		"description": "The current value of this input.",
																		"type": "object",
																		"properties": {
																			"enhance_asset": {
																				"$ref": "#/definitions/AssetEnhancement"
																			},
																			"enhance_moves": {
																				"type": "array",
																				"items": {
																					"$ref": "#/definitions/MoveEnhancement"
																				}
																			}
																		}
																	}
																},
																"required": [
																	"option_type",
																	"label",
																	"value"
																]
															}
														}
													}
												},
												"required": [
													"name",
													"option_type",
													"choices"
												],
												"additionalProperties": false
											}
										}
									],
									"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `option_type` property as a discriminator.",
									"required": [
										"option_type"
									],
									"additionalProperties": true,
									"properties": {
										"option_type": {
											"enum": [
												"option",
												"option_group"
											]
										}
									}
								}
							}
						},
						"field_type": {
							"const": "select_enhancement",
							"type": "string"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"choices",
						"field_type"
					],
					"additionalProperties": false
				},
				{
					"description": "Represents a checkbox.",
					"$comment": "Semantics are similar to the `<input type=\"checkbox\">` element.",
					"title": "AssetCheckboxField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "Is the box checked?",
							"default": false,
							"type": "boolean"
						},
						"field_type": {
							"const": "checkbox",
							"type": "string"
						},
						"is_impact": {
							"default": false,
							"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
							"type": "boolean"
						},
						"disables_asset": {
							"default": false,
							"description": "Does this field disable the asset when its value is set to `true`?",
							"type": "boolean"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"field_type",
						"is_impact",
						"disables_asset"
					],
					"additionalProperties": false
				},
				{
					"description": "When its value is set to `true` it means that the card is flipped over. Some assets use this to represent a 'broken' state (e.g. Starforged Module assets).",
					"title": "AssetCardFlipField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetControlFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "Is the card flipped over?",
							"default": false,
							"type": "boolean"
						},
						"field_type": {
							"const": "card_flip",
							"type": "string"
						},
						"is_impact": {
							"default": false,
							"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
							"type": "boolean"
						},
						"disables_asset": {
							"default": false,
							"description": "Does this field disable the asset when its value is set to `true`?",
							"type": "boolean"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"field_type",
						"is_impact",
						"disables_asset"
					],
					"additionalProperties": false
				}
			]
		},
		"AssetControlFieldEnhancement": {
			"$ref": "#/definitions/AssetConditionMeterEnhancement",
			"tsType": "AssetConditionMeterEnhancement",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": [
				"field_type"
			],
			"title": "AssetControlFieldEnhancement"
		},
		"AssetEnhancement": {
			"type": "object",
			"properties": {
				"controls": {
					"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetControlFieldEnhancement"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"count_as_impact": {
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"type": "boolean"
				},
				"attachments": {
					"$ref": "#/definitions/AssetAttachment"
				},
				"shared": {
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
					"type": "boolean"
				}
			},
			"description": "Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.",
			"title": "AssetEnhancement",
			"additionalProperties": false
		},
		"AssetOptionField": {
			"tsType": "SelectStatField | SelectEnhancementField | TextField",
			"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": [
				"field_type"
			],
			"title": "AssetOptionField",
			"anyOf": [
				{
					"description": "Represents a list of mutually exclusive choices.",
					"$comment": "Semantics are similar to the HTML `<select>` element",
					"title": "SelectStatField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetOptionFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "The current value of this input.",
							"default": null,
							"anyOf": [
								{
									"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected.",
									"default": null,
									"$ref": "#/definitions/DictKey"
								},
								{
									"type": "null"
								}
							]
						},
						"choices": {
							"type": "object",
							"patternProperties": {
								".*": {
									"type": "object",
									"tsType": "SelectStatOption | SelectStatOptionGroup",
									"allOf": [
										{
											"if": {
												"properties": {
													"option_type": {
														"const": "option",
														"type": "string"
													}
												}
											},
											"then": {
												"description": "Represents an option in a list of choices.",
												"$comment": "Semantics are similar to the HTML `<option>` element.",
												"title": "SelectStatOption",
												"type": "object",
												"properties": {
													"option_type": {
														"const": "option",
														"type": "string"
													},
													"selected": {
														"description": "Is this option currently selected?",
														"type": "boolean"
													},
													"label": {
														"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
														"$ref": "#/definitions/Label"
													},
													"value": {
														"description": "The current value of this input.",
														"$ref": "#/definitions/StatId"
													}
												},
												"required": [
													"option_type",
													"label",
													"value"
												],
												"additionalProperties": false
											}
										},
										{
											"if": {
												"properties": {
													"option_type": {
														"const": "option_group",
														"type": "string"
													}
												}
											},
											"then": {
												"description": "Represents a grouping of options in a list of choices.",
												"$comment": "Semantics are similar to the HTML `<optgroup>` element.",
												"title": "SelectStatOptionGroup",
												"type": "object",
												"properties": {
													"name": {
														"description": "A label for this option group.",
														"$ref": "#/definitions/Label"
													},
													"option_type": {
														"const": "option_group",
														"type": "string"
													},
													"choices": {
														"$comment": "Deserialize as a dictionary object.",
														"type": "object",
														"patternProperties": {
															"^([a-z][a-z_]*)$": {
																"description": "Represents an option in a list of choices.",
																"$comment": "Semantics are similar to the HTML `<option>` element.",
																"title": "SelectStatOption",
																"type": "object",
																"properties": {
																	"option_type": {
																		"const": "option",
																		"type": "string"
																	},
																	"selected": {
																		"description": "Is this option currently selected?",
																		"type": "boolean"
																	},
																	"label": {
																		"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
																		"$ref": "#/definitions/Label"
																	},
																	"value": {
																		"description": "The current value of this input.",
																		"$ref": "#/definitions/StatId"
																	}
																},
																"required": [
																	"option_type",
																	"label",
																	"value"
																]
															}
														}
													}
												},
												"required": [
													"name",
													"option_type",
													"choices"
												],
												"additionalProperties": false
											}
										}
									],
									"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `option_type` property as a discriminator.",
									"required": [
										"option_type"
									],
									"additionalProperties": true,
									"properties": {
										"option_type": {
											"enum": [
												"option",
												"option_group"
											]
										}
									}
								}
							}
						},
						"field_type": {
							"const": "select_stat",
							"type": "string"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"choices",
						"field_type"
					],
					"additionalProperties": false
				},
				{
					"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles).",
					"$comment": "Semantics are similar to the HTML `<select>` element",
					"title": "SelectEnhancementField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetOptionFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "The current value of this input.",
							"default": null,
							"anyOf": [
								{
									"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected.",
									"default": null,
									"$ref": "#/definitions/DictKey"
								},
								{
									"type": "null"
								}
							]
						},
						"choices": {
							"type": "object",
							"patternProperties": {
								".*": {
									"type": "object",
									"tsType": "SelectEnhancementOption | SelectEnhancementOptionGroup",
									"allOf": [
										{
											"if": {
												"properties": {
													"option_type": {
														"const": "option",
														"type": "string"
													}
												}
											},
											"then": {
												"description": "Represents an option in a list of choices.",
												"$comment": "Semantics are similar to the HTML `<option>` element.",
												"title": "SelectEnhancementOption",
												"type": "object",
												"properties": {
													"option_type": {
														"const": "option",
														"type": "string"
													},
													"selected": {
														"description": "Is this option currently selected?",
														"type": "boolean"
													},
													"label": {
														"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
														"$ref": "#/definitions/Label"
													},
													"value": {
														"description": "The current value of this input.",
														"type": "object",
														"properties": {
															"enhance_asset": {
																"$ref": "#/definitions/AssetEnhancement"
															},
															"enhance_moves": {
																"type": "array",
																"items": {
																	"$ref": "#/definitions/MoveEnhancement"
																}
															}
														}
													}
												},
												"required": [
													"option_type",
													"label",
													"value"
												],
												"additionalProperties": false
											}
										},
										{
											"if": {
												"properties": {
													"option_type": {
														"const": "option_group",
														"type": "string"
													}
												}
											},
											"then": {
												"description": "Represents a grouping of options in a list of choices.",
												"$comment": "Semantics are similar to the HTML `<optgroup>` element.",
												"title": "SelectEnhancementOptionGroup",
												"type": "object",
												"properties": {
													"name": {
														"description": "A label for this option group.",
														"$ref": "#/definitions/Label"
													},
													"option_type": {
														"const": "option_group",
														"type": "string"
													},
													"choices": {
														"$comment": "Deserialize as a dictionary object.",
														"type": "object",
														"patternProperties": {
															"^([a-z][a-z_]*)$": {
																"description": "Represents an option in a list of choices.",
																"$comment": "Semantics are similar to the HTML `<option>` element.",
																"title": "SelectEnhancementOption",
																"type": "object",
																"properties": {
																	"option_type": {
																		"const": "option",
																		"type": "string"
																	},
																	"selected": {
																		"description": "Is this option currently selected?",
																		"type": "boolean"
																	},
																	"label": {
																		"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
																		"$ref": "#/definitions/Label"
																	},
																	"value": {
																		"description": "The current value of this input.",
																		"type": "object",
																		"properties": {
																			"enhance_asset": {
																				"$ref": "#/definitions/AssetEnhancement"
																			},
																			"enhance_moves": {
																				"type": "array",
																				"items": {
																					"$ref": "#/definitions/MoveEnhancement"
																				}
																			}
																		}
																	}
																},
																"required": [
																	"option_type",
																	"label",
																	"value"
																]
															}
														}
													}
												},
												"required": [
													"name",
													"option_type",
													"choices"
												],
												"additionalProperties": false
											}
										}
									],
									"$comment": "Deserialize as a discriminated union/polymorphic object type, using the `option_type` property as a discriminator.",
									"required": [
										"option_type"
									],
									"additionalProperties": true,
									"properties": {
										"option_type": {
											"enum": [
												"option",
												"option_group"
											]
										}
									}
								}
							}
						},
						"field_type": {
							"const": "select_enhancement",
							"type": "string"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"choices",
						"field_type"
					],
					"additionalProperties": false
				},
				{
					"description": "Represents an input that accepts plain text.",
					"$comment": "Semantics are similar to the HTML `<input type=\"text\">` element.",
					"title": "TextField",
					"type": "object",
					"properties": {
						"id": {
							"$ref": "#/definitions/AssetOptionFieldId",
							"description": "The unique Datasworn ID for this item."
						},
						"label": {
							"description": "A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
							"$ref": "#/definitions/Label"
						},
						"value": {
							"description": "The content of this text input, or `null` if it's empty",
							"default": null,
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							]
						},
						"field_type": {
							"const": "text",
							"type": "string"
						}
					},
					"required": [
						"id",
						"label",
						"value",
						"field_type"
					],
					"additionalProperties": false
				}
			]
		},
		"AssetType": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/AssetTypeId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"color": {
					"description": "A thematic color associated with this collection.",
					"$ref": "#/definitions/CssColor"
				},
				"summary": {
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"images": {
					"type": "array",
					"items": {
						"description": "Extra images associated with this collection.",
						"$ref": "#/definitions/WebpImageUrl"
					}
				},
				"icon": {
					"description": "An SVG icon associated with this collection.",
					"$ref": "#/definitions/SvgImageUrl"
				},
				"enhances": {
					"$ref": "#/definitions/AssetTypeId",
					"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
				},
				"replaces": {
					"$ref": "#/definitions/AssetTypeId",
					"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
				},
				"contents": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Asset"
						}
					}
				}
			},
			"required": [
				"id",
				"name",
				"source"
			],
			"title": "AssetType",
			"additionalProperties": false
		},
		"Truth": {
			"description": "A setting truth category.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/TruthId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"options": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TruthOption"
					}
				},
				"your_character": {
					"$ref": "#/definitions/MarkdownString"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"options"
			],
			"title": "Truth",
			"additionalProperties": false
		},
		"TruthOption": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/TruthOptionId",
					"description": "The unique Datasworn ID for this item."
				},
				"min": {
					"type": "integer"
				},
				"max": {
					"type": "integer"
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/definitions/MarkdownString"
				},
				"table": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TruthOptionTableRow"
					}
				}
			},
			"required": [
				"id",
				"description",
				"quest_starter"
			],
			"title": "TruthOption",
			"additionalProperties": false
		},
		"TruthOptionTableRow": {
			"description": "Represents a row in an oracle table.",
			"type": "object",
			"properties": {
				"result": {
					"description": "The primary text content of this row.",
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"summary": {
					"description": "Optional secondary text content for this row. Generally, this is longer than `result`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "Optional tertiary text content for this row. Generally, this is longer than both `result` and `summary`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"rolls": {
					"description": "Further oracle rolls prompted by this table row.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableRoll"
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"embed_table": {
					"description": "Hints that the identified table should be rendered inside this table row.",
					"$ref": "#/definitions/OracleTableId"
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate"
				},
				"i18n": {
					"$ref": "#/definitions/I18nHints"
				},
				"min": {
					"default": null,
					"anyOf": [
						{
							"description": "Low end of the dice range for this table row.",
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"description": "Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				},
				"max": {
					"default": null,
					"anyOf": [
						{
							"description": "High end of the dice range for this table row.",
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"description": "High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				}
			},
			"required": [
				"result",
				"min",
				"max"
			],
			"title": "TruthOptionTableRow",
			"additionalProperties": false
		},
		"Atlas": {
			"releaseStage": "experimental",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/AtlasId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"color": {
					"description": "A thematic color associated with this collection.",
					"$ref": "#/definitions/CssColor"
				},
				"summary": {
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead.",
					"$ref": "#/definitions/MarkdownString"
				},
				"images": {
					"type": "array",
					"items": {
						"description": "Extra images associated with this collection.",
						"$ref": "#/definitions/WebpImageUrl"
					}
				},
				"icon": {
					"description": "An SVG icon associated with this collection.",
					"$ref": "#/definitions/SvgImageUrl"
				},
				"enhances": {
					"$ref": "#/definitions/AtlasId",
					"description": "This collection's content enhances the identified collection, rather than being a standalone collection of its own."
				},
				"replaces": {
					"$ref": "#/definitions/AtlasId",
					"description": "This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection."
				},
				"contents": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AtlasEntry"
						}
					}
				},
				"collections": {
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Atlas"
						}
					}
				}
			},
			"required": [
				"id",
				"name",
				"source"
			],
			"title": "Atlas",
			"additionalProperties": false
		},
		"AtlasEntry": {
			"description": "An atlas entry, like the Ironlands region entries found in classic Ironsworn.",
			"title": "Atlas entry",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/AtlasEntryId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/definitions/MarkdownString"
				},
				"your_truth": {
					"$ref": "#/definitions/MarkdownString"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"features",
				"description",
				"quest_starter"
			],
			"additionalProperties": false
		},
		"ConditionMeterId": {
			"examples": [
				"health",
				"spirit",
				"supply"
			],
			"description": "A basic, rollable player character resource.",
			"$ref": "#/definitions/DictKey",
			"title": "ConditionMeterId"
		},
		"StatId": {
			"examples": [
				"edge",
				"heart",
				"iron",
				"shadow",
				"wits"
			],
			"description": "A basic player character stat.",
			"$ref": "#/definitions/DictKey",
			"title": "StatId"
		},
		"Rarity": {
			"description": "A rarity, as described in Ironsworn: Delve.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/RarityId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"asset": {
					"description": "The asset augmented by this rarity.",
					"$ref": "#/definitions/AssetId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"xp_cost": {
					"minimum": 3,
					"maximum": 5,
					"default": 3,
					"description": "From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.",
					"type": "integer"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"asset",
				"xp_cost",
				"description"
			],
			"title": "Rarity",
			"additionalProperties": false
		},
		"DelveSite": {
			"description": "A delve site with a theme, domain, and denizens.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/DelveSiteId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"rank": {
					"$ref": "#/definitions/ChallengeRank"
				},
				"region": {
					"description": "The ID of an atlas entry representing the region in which this delve site is located.",
					"$ref": "#/definitions/AtlasEntryId"
				},
				"theme": {
					"$ref": "#/definitions/DelveSiteThemeId"
				},
				"domain": {
					"$ref": "#/definitions/DelveSiteDomainId"
				},
				"extra_card": {
					"description": "An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve.",
					"anyOf": [
						{
							"$ref": "#/definitions/DelveSiteThemeId"
						},
						{
							"$ref": "#/definitions/DelveSiteDomainId"
						}
					]
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"denizens": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelveSiteDenizen"
					}
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"rank",
				"theme",
				"domain",
				"description",
				"denizens"
			],
			"title": "DelveSite",
			"additionalProperties": false
		},
		"DelveSiteDenizen": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/DelveSiteDenizenId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"$ref": "#/definitions/Label"
				},
				"min": {
					"type": "integer"
				},
				"max": {
					"type": "integer"
				},
				"npc": {
					"description": "The ID of the relevant NPC entry, if one is specified.",
					"$ref": "#/definitions/NpcId"
				},
				"frequency": {
					"$ref": "#/definitions/DelveSiteDenizenFrequency"
				}
			},
			"required": [
				"id",
				"min",
				"max",
				"frequency"
			],
			"title": "DelveSiteDenizen",
			"additionalProperties": false
		},
		"DelveSiteDenizenFrequency": {
			"title": "DelveSiteDenizenFrequency",
			"anyOf": [
				{
					"const": "very_common",
					"type": "string"
				},
				{
					"const": "common",
					"type": "string"
				},
				{
					"const": "uncommon",
					"type": "string"
				},
				{
					"const": "rare",
					"type": "string"
				},
				{
					"const": "unforeseen",
					"type": "string"
				}
			]
		},
		"DelveSiteDomain": {
			"description": "A delve site Domain card.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/DelveSiteDomainId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"name_oracle": {
					"description": "An oracle table ID containing place name elements. For examples, see oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in oracle collection ID `delve/collections/oracles/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (ID: delve/oracles/site_name/format) to create random names for delve sites.",
					"$ref": "#/definitions/OracleTableId"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelveSiteDomainFeatureRow"
					}
				},
				"dangers": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelveSiteDomainDangerRow"
					}
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"summary",
				"features",
				"dangers"
			],
			"title": "DelveSiteDomain",
			"additionalProperties": false
		},
		"DelveSiteDomainDangerRow": {
			"description": "Represents a single Danger entry from a delve site Domain card.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/DomainDangerRowId",
					"description": "The unique Datasworn ID for this item."
				},
				"result": {
					"description": "The primary text content of this row.",
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"summary": {
					"description": "Optional secondary text content for this row. Generally, this is longer than `result`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "Optional tertiary text content for this row. Generally, this is longer than both `result` and `summary`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"rolls": {
					"description": "Further oracle rolls prompted by this table row.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableRoll"
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"embed_table": {
					"description": "Hints that the identified table should be rendered inside this table row.",
					"$ref": "#/definitions/OracleTableId"
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate"
				},
				"i18n": {
					"$ref": "#/definitions/I18nHints"
				},
				"min": {
					"description": "Low end of the dice range for this table row.",
					"type": "integer"
				},
				"max": {
					"description": "High end of the dice range for this table row.",
					"type": "integer"
				}
			},
			"required": [
				"id",
				"result",
				"min",
				"max"
			],
			"title": "DelveSiteDomainDangerRow",
			"additionalProperties": false
		},
		"DelveSiteDomainFeatureRow": {
			"description": "Represents a single Feature entry from a delve site Domain card.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/DomainFeatureRowId",
					"description": "The unique Datasworn ID for this item."
				},
				"result": {
					"description": "The primary text content of this row.",
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"summary": {
					"description": "Optional secondary text content for this row. Generally, this is longer than `result`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "Optional tertiary text content for this row. Generally, this is longer than both `result` and `summary`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"rolls": {
					"description": "Further oracle rolls prompted by this table row.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableRoll"
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"embed_table": {
					"description": "Hints that the identified table should be rendered inside this table row.",
					"$ref": "#/definitions/OracleTableId"
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate"
				},
				"i18n": {
					"$ref": "#/definitions/I18nHints"
				},
				"min": {
					"description": "Low end of the dice range for this table row.",
					"type": "integer"
				},
				"max": {
					"description": "High end of the dice range for this table row.",
					"type": "integer"
				}
			},
			"required": [
				"id",
				"result",
				"min",
				"max"
			],
			"title": "DelveSiteDomainFeatureRow",
			"additionalProperties": false
		},
		"DelveSiteTheme": {
			"description": "A delve site theme card.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/DelveSiteThemeId",
					"description": "The unique Datasworn ID for this item."
				},
				"name": {
					"description": "The primary name/label for this item.",
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"description": "The name of this item as it appears on the page in the book, if it's different from `name`.",
					"$ref": "#/definitions/Label"
				},
				"source": {
					"description": "Attribution for the original source (such as a book or website) of this item, including the author and licensing information.",
					"$ref": "#/definitions/Source"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelveSiteThemeFeatureRow"
					}
				},
				"dangers": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelveSiteThemeDangerRow"
					}
				}
			},
			"required": [
				"id",
				"name",
				"source",
				"summary",
				"features",
				"dangers"
			],
			"title": "DelveSiteTheme",
			"additionalProperties": false
		},
		"DelveSiteThemeDangerRow": {
			"description": "Represents a single Danger entry from a delve site Theme card.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/ThemeDangerRowId",
					"description": "The unique Datasworn ID for this item."
				},
				"result": {
					"description": "The primary text content of this row.",
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"summary": {
					"description": "Optional secondary text content for this row. Generally, this is longer than `result`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "Optional tertiary text content for this row. Generally, this is longer than both `result` and `summary`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"rolls": {
					"description": "Further oracle rolls prompted by this table row.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableRoll"
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"embed_table": {
					"description": "Hints that the identified table should be rendered inside this table row.",
					"$ref": "#/definitions/OracleTableId"
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate"
				},
				"i18n": {
					"$ref": "#/definitions/I18nHints"
				},
				"min": {
					"description": "Low end of the dice range for this table row.",
					"type": "integer"
				},
				"max": {
					"description": "High end of the dice range for this table row.",
					"type": "integer"
				}
			},
			"required": [
				"id",
				"result",
				"min",
				"max"
			],
			"title": "DelveSiteThemeDangerRow",
			"additionalProperties": false
		},
		"DelveSiteThemeFeatureRow": {
			"description": "Represents a single Feature entry from a delve site Theme card.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/ThemeFeatureRowId",
					"description": "The unique Datasworn ID for this item."
				},
				"result": {
					"description": "The primary text content of this row.",
					"$ref": "#/definitions/MarkdownString"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"summary": {
					"description": "Optional secondary text content for this row. Generally, this is longer than `result`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"description": "Optional tertiary text content for this row. Generally, this is longer than both `result` and `summary`.",
					"$ref": "#/definitions/MarkdownString"
				},
				"rolls": {
					"description": "Further oracle rolls prompted by this table row.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleTableRoll"
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"embed_table": {
					"description": "Hints that the identified table should be rendered inside this table row.",
					"$ref": "#/definitions/OracleTableId"
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate"
				},
				"i18n": {
					"$ref": "#/definitions/I18nHints"
				},
				"min": {
					"description": "Low end of the dice range for this table row.",
					"type": "integer"
				},
				"max": {
					"description": "High end of the dice range for this table row.",
					"type": "integer"
				}
			},
			"required": [
				"id",
				"result",
				"min",
				"max"
			],
			"title": "DelveSiteThemeFeatureRow",
			"additionalProperties": false
		},
		"Ruleset": {
			"description": "A standalone Datasworn package that describes its own ruleset.",
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/definitions/RulesetId"
				},
				"package_type": {
					"const": "ruleset",
					"type": "string"
				},
				"rules": {
					"$ref": "#/definitions/Rules"
				},
				"datasworn_version": {
					"$ref": "#/definitions/SemanticVersion"
				},
				"oracles": {
					"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/OracleCollection"
						}
					}
				},
				"moves": {
					"description": "A dictionary object containing move categories, which contain moves.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/MoveCategory"
						}
					}
				},
				"assets": {
					"description": "A dictionary object containing asset types, which contain assets.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetType"
						}
					}
				},
				"atlas": {
					"description": "A dictionary object containing atlas collections, which contain atlas entries.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Atlas"
						}
					}
				},
				"npcs": {
					"description": "A dictionary object containing NPC collections, which contain NPCs.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/NpcCollection"
						}
					}
				},
				"truths": {
					"description": "A dictionary object of truth categories.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Truth"
						}
					}
				},
				"rarities": {
					"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Rarity"
						}
					}
				},
				"delve_sites": {
					"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/DelveSite"
						}
					}
				},
				"site_themes": {
					"description": "A dictionary object containing delve site themes.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/DelveSiteTheme"
						}
					}
				},
				"site_domains": {
					"description": "A dictionary object containing delve site domains.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/DelveSiteDomain"
						}
					}
				}
			},
			"required": [
				"id",
				"package_type",
				"rules",
				"datasworn_version",
				"oracles",
				"moves",
				"assets"
			],
			"title": "Ruleset",
			"additionalProperties": false
		},
		"Expansion": {
			"description": "A Datasworn package that relies on an external package to provide its ruleset.",
			"type": "object",
			"properties": {
				"oracles": {
					"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/OracleCollection"
						}
					}
				},
				"moves": {
					"description": "A dictionary object containing move categories, which contain moves.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/MoveCategory"
						}
					}
				},
				"assets": {
					"description": "A dictionary object containing asset types, which contain assets.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/AssetType"
						}
					}
				},
				"atlas": {
					"description": "A dictionary object containing atlas collections, which contain atlas entries.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Atlas"
						}
					}
				},
				"npcs": {
					"description": "A dictionary object containing NPC collections, which contain NPCs.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/NpcCollection"
						}
					}
				},
				"truths": {
					"description": "A dictionary object of truth categories.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Truth"
						}
					}
				},
				"rarities": {
					"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/Rarity"
						}
					}
				},
				"delve_sites": {
					"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/DelveSite"
						}
					}
				},
				"site_themes": {
					"description": "A dictionary object containing delve site themes.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/DelveSiteTheme"
						}
					}
				},
				"site_domains": {
					"description": "A dictionary object containing delve site domains.",
					"type": "object",
					"patternProperties": {
						".*": {
							"$ref": "#/definitions/DelveSiteDomain"
						}
					}
				},
				"id": {
					"$ref": "#/definitions/ExpansionId"
				},
				"datasworn_version": {
					"$ref": "#/definitions/SemanticVersion"
				},
				"package_type": {
					"const": "expansion",
					"type": "string"
				},
				"ruleset": {
					"$ref": "#/definitions/RulesetId"
				},
				"rules": {
					"$ref": "#/definitions/RulesExpansion"
				}
			},
			"required": [
				"id",
				"datasworn_version",
				"package_type",
				"ruleset"
			],
			"title": "Expansion",
			"additionalProperties": false
		}
	}
}