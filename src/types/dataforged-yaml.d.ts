/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Schema definitions used for Datasworn and Dataforged (v2+).
 */
export type YamlRoot = Datasworn | Dataforged;
/**
 * This interface was referenced by `AssetCollections`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type AssetCollection = AssetCollection1 &
  CategoryMetadata & {
    assets: {
      [k: string]: Asset;
    };
    /**
     * A player-facing markdown description of the item, consisting of one or more paragraphs.
     */
    description: string;
    source?: Source;
    title: Title;
    [k: string]: unknown;
  };
export type AssetCollection1 = CategoryMetadata & {
  assets: {
    [k: string]: Asset;
  };
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description: string;
  source?: Source;
  title: Title;
  [k: string]: unknown;
};
/**
 * A unique, human-readable ID.
 */
export type ID = string;
/**
 * The URI pointing to the license which this item's *text* content falls under. If this is null, no license is specified -- use with caution.
 */
export type License = string | null;
export type Tags = string[];
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type Attribute =
  | AttributePlayerStat
  | AttributePlayerConditionMeter
  | AttributeText
  | AttributeImpact
  | AttributeConditionMeter;
/**
 * An attribute with predefined options to pick a standard player character stat. Recommended HTML element: <select>
 */
export type AttributePlayerStat = AttributeBase & {
  attribute_type: "player_stat";
  position: string;
  value: null | PlayerStatID;
  options: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
     */
    [k: string]: {
      /**
       * A localizable string of plain text used to provide a player-facing label for this element.
       */
      label?: string;
      value?: PlayerStatID;
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
export type AttributeID = {
  [k: string]: unknown;
};
export type AttributeID1 = string;
export type InputPosition =
  | "card-top"
  | "card-back"
  | "card-bottom"
  | "ability-1-right"
  | "ability-2-right"
  | "ability-3-right"
  | "ability-1-bottom"
  | "ability-2-bottom"
  | "ability-3-bottom";
export type AttributeNumericType = "condition_meter" | "clock" | "counter";
/**
 * A standard player character stat.
 */
export type PlayerStatID =
  | "player/stats/edge"
  | "player/stats/heart"
  | "player/stats/iron"
  | "player/stats/shadow"
  | "player/stats/wits";
/**
 * A select element with predefined options to pick a standard player character condition meter.
 */
export type AttributePlayerConditionMeter = AttributeBase & {
  attribute_type: "player_condition_meter";
  position: string;
  /**
   * The current value of this attribute. In Dataforged/Datasworn's data, this will almost always be `null`, but other values are provided to ensure that types generated from the schema can be used at run-time or for static typing.
   */
  value: null | PlayerConditionMeterID;
  options: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
     */
    [k: string]: {
      /**
       * A localizable string of plain text used to provide a player-facing label for this element.
       */
      label?: string;
      value?: PlayerConditionMeterID;
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * A standard player character condition meter.
 */
export type PlayerConditionMeterID =
  | "player/condition_meters/health"
  | "player/condition_meters/spirit"
  | "player/condition_meters/supply";
/**
 * A text attribute that accepts a user-provided string value. Recommended HTML element: <input type='text'>
 */
export type AttributeText = AttributeBase & {
  attribute_type: "text";
  position: string;
  value: null | string;
  [k: string]: unknown;
};
export type AttributeImpact = AttributeBase & {
  attribute_type: "impact";
  [k: string]: unknown;
};
export type AttributeConditionMeter = AttributeNumericBase & {
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  label: string;
  position: "card-bottom";
  attribute_type: "condition_meter";
  value: number;
  max: number;
  min: 0;
  [k: string]: unknown;
};
/**
 * Schema from which other numeric attributes are derived. Shouldn't be used directly.
 */
export type AttributeNumericBase = AttributeBase & {
  attribute_type: AttributeNumericType;
  min: number;
  max: number | null;
  value: number | null;
  [k: string]: unknown;
};
/**
 * Describes an asset ability.
 */
export type AssetAbility = AssetAbilityBase & {
  alter_moves?: MoveExtension[];
  extend_abilities?: AssetAbilityExtension[];
  /**
   * The rules text for this asset ability.
   */
  text: string;
  [k: string]: unknown;
};
export type AttributeCounter = AttributeNumericBase & {
  attribute_type?: "counter";
  min?: number;
  max?: null | number;
  value?: number;
  [k: string]: unknown;
};
export type AttributeClock = AttributeNumericBase & {
  attribute_type: "clock";
  min: 0;
  value: number;
  max: ClockSegments;
  [k: string]: unknown;
};
export type ClockSegments = number;
export type MoveTriggerOption = MoveTriggerOptionAction[] | MoveTriggerOptionProgress[];
export type MoveTriggerOptionAction = MoveTriggerOption & {
  using?: (PlayerStatID | PlayerConditionMeterID | ConditionMeterAlias | (AttributeID & AttributeID1))[];
  roll_type?: "action_roll";
  [k: string]: unknown;
};
/**
 * Names of non-player condition meters (for e.g. companions and vehicles) that are referenced by moves and other assets.
 * If an asset condition meter can be used in this manner, the alias is included in its Aliases array.
 */
export type ConditionMeterAlias =
  | "companion_health"
  | "vehicle_integrity"
  | "command_vehicle_integrity"
  | "support_vehicle_integrity"
  | "incidental_vehicle_integrity"
  | "attached_asset_meter";
export type MoveTriggerOptionProgress = MoveTriggerOption & {
  using?: ProgressTrackType[];
  roll_type?: "progress_roll";
  [k: string]: unknown;
};
export type ProgressTrackType = ProgressTrackStarforgedType | ProgressTrackClassicType;
export type ProgressTrackStarforgedType =
  | "discoveries_legacy"
  | "bonds_legacy"
  | "quests_legacy"
  | "vow"
  | "combat"
  | "expedition"
  | "connection"
  | "scene_challenge";
export type ProgressTrackClassicType = "vow" | "combat" | "journey" | "bonds" | "delve" | "scene_challenge";
export type MoveOutcomeWithMatch = MoveOutcome & {
  match?: MoveOutcome;
  [k: string]: unknown;
};
/**
 * A unique, human-readable ID.
 */
export type OracleTableID = string;
/**
 * A unique, human-readable ID.
 */
export type IronlandsRegionID = string;
/**
 * A unique, human-readable ID.
 */
export type AssetID = string;
/**
 * A unique, human-readable ID.
 */
export type DelveSiteDomainID = string;
/**
 * The ID of the affected moves. Use 'null' if it can apply to any move.
 */
export type _Moves = MoveID[] | null;
export type MoveID = string | string;
export type AssetAbilityID = string;
export type MoveExtension = MoveExtensionBase & {
  _moves: _Moves;
  [k: string]: unknown;
};
/**
 * Describes an upgrade to another asset ability. If a given property is omitted, assume it's the same as the original ability.
 */
export type AssetAbilityExtension = AssetAbilityBase & {
  /**
   * The ID of the asset ability to be extended.
   */
  _ability: string;
  [k: string]: unknown;
};
/**
 * A hexadecimal color associated with this item, for use as e.g. an accent color when rendering it.
 */
export type Color = string;
export type OracleTableRenderMetadata = RenderMetadata & {
  columns?: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
  /**
   * If this oracle's `Table` should be rendered as a column of another table, it's indicated here.
   *
   * If `undefined`, this table is rendered as a standalone table.
   *
   * If this is set (and the rendering such 'embedded' columns is desired), then `Display.Table` may be safely ignored.
   */
  column_of?: string;
  /**
   * This table is displayed as embedded in a row of another table.
   */
  embed_in?: string;
  source?: Source;
};
/**
 * The URI of an SVG vector icon.
 */
export type Icon = string;
/**
 * The URI of a WEBP image.
 */
export type Image = string;
export type OracleTableRow = {
  _id?: ID;
  /**
   * The low end of the dice range for this table row.
   */
  floor?: {
    [k: string]: unknown;
  };
  /**
   * The high end of the dice range for this table row.
   */
  ceiling: {
    [k: string]: unknown;
  };
  /**
   * A localizable string formatted in markdown. This usually represents a direct excerpt from the source material.
   */
  result: string;
  /**
   * A secondary markdown string that must be presented to the user for the implementation to be complete, but may benefit from progressive disclosure (such as a collapsible element, popover/tooltip, etc).
   *
   * `null` is used in cases where an 'empty' `OracleTableRow.summary` exists (example: Starship Type, p. 326). In the book, these table cells are rendered with the text `--` (and this is the recommended placeholder for tabular display). For display as a single result (e.g. VTT roll output), however, `null` values can be safely omitted.
   */
  summary?: string | null;
  /**
   * TODO
   */
  template?: {
    /**
     * A localizable markdown string template where variables are provided by rolling an oracle table.
     */
    result?: string;
    /**
     * A localizable markdown string template where variables are provided by rolling an oracle table.
     */
    summary?: string;
    /**
     * A localizable markdown string template where variables are provided by rolling an oracle table.
     */
    description?: string;
    [k: string]: unknown;
  };
  rolls?: OracleTableRoll[];
  suggestions?: Suggestions;
  render?: RenderMetadata;
} & OracleTableRow1;
export type OracleTableRow1 =
  | {
      /**
       * The high end of the dice range for this table row.
       */
      floor?: number;
      /**
       * The low end of the dice range for this table row.
       */
      ceiling?: number;
      [k: string]: unknown;
    }
  | {
      floor?: null;
      ceiling?: null;
      [k: string]: unknown;
    };
/**
 * This interface was referenced by `WorldTruthsClassic`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type WorldTruthClassic = SettingTruth & {
  /**
   * @minItems 3
   * @maxItems 3
   */
  options?: [
    {
      /**
       * A player-facing markdown description of the item, consisting of one or more paragraphs.
       */
      description: string;
      /**
       * A localizable markdown string describing the quest starter associated with this item.
       */
      quest_starter: string;
      [k: string]: unknown;
    },
    {
      /**
       * A player-facing markdown description of the item, consisting of one or more paragraphs.
       */
      description: string;
      /**
       * A localizable markdown string describing the quest starter associated with this item.
       */
      quest_starter: string;
      [k: string]: unknown;
    },
    {
      /**
       * A player-facing markdown description of the item, consisting of one or more paragraphs.
       */
      description: string;
      /**
       * A localizable markdown string describing the quest starter associated with this item.
       */
      quest_starter: string;
      [k: string]: unknown;
    }
  ];
  [k: string]: unknown;
};
/**
 * This interface was referenced by `EncountersStarforged`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type EncounterStarforged = RegionEntry & {
  nature?: EncounterTypeStarforged;
  variants?: EncounterVariantsStarforged;
  [k: string]: unknown;
};
/**
 * Schema common to Encounter entries in *Ironsworn* and *Ironsworn: Starforged*.
 */
export type RegionEntry = RegionEntry1 & {
  _id?: ID;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name?: string;
  source?: Source;
  tags?: Tags;
  /**
   * A player-facing markdown summary of the item. Summary is shorter than {@link HasDescription| Description}, when they're both present.
   */
  summary: string;
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description: string;
  features: string[];
  /**
   * A localizable markdown string describing the quest starter associated with this item.
   */
  quest_starter: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Regions`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type RegionEntry1 = EncounterStub & {
  drives: string[];
  tactics: string[];
  [k: string]: unknown;
};
/**
 * A numeric challenge rank: 1 = troublesome; 2 = dangerous; 3 = formidable; 4 = extreme; 5 = epic.
 */
export type ChallengeRank = 1 | 2 | 3 | 4 | 5;
export type EncounterTypeStarforged = string;
/**
 * This interface was referenced by `EncounterVariantsStarforged`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type EncounterVariantStarforged = RegionEntry1 & {
  nature?: EncounterTypeStarforged;
  [k: string]: unknown;
};
/**
 * A unique, human-readable ID.
 */
export type RarityID = string;
/**
 * This interface was referenced by `DelveSiteDomains`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type DelveSiteDomain = DelveCardBase & {
  card_type?: "domain";
  features?:
    | []
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        },
        {
          floor?: 57;
          ceiling?: 64;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        },
        {
          floor?: 57;
          ceiling?: 64;
          [k: string]: unknown;
        },
        {
          floor?: 65;
          ceiling?: 68;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        },
        {
          floor?: 57;
          ceiling?: 64;
          [k: string]: unknown;
        },
        {
          floor?: 65;
          ceiling?: 68;
          [k: string]: unknown;
        },
        {
          floor?: 69;
          ceiling?: 72;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        },
        {
          floor?: 57;
          ceiling?: 64;
          [k: string]: unknown;
        },
        {
          floor?: 65;
          ceiling?: 68;
          [k: string]: unknown;
        },
        {
          floor?: 69;
          ceiling?: 72;
          [k: string]: unknown;
        },
        {
          floor?: 73;
          ceiling?: 76;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        },
        {
          floor?: 57;
          ceiling?: 64;
          [k: string]: unknown;
        },
        {
          floor?: 65;
          ceiling?: 68;
          [k: string]: unknown;
        },
        {
          floor?: 69;
          ceiling?: 72;
          [k: string]: unknown;
        },
        {
          floor?: 73;
          ceiling?: 76;
          [k: string]: unknown;
        },
        {
          floor?: 77;
          ceiling?: 80;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        },
        {
          floor?: 57;
          ceiling?: 64;
          [k: string]: unknown;
        },
        {
          floor?: 65;
          ceiling?: 68;
          [k: string]: unknown;
        },
        {
          floor?: 69;
          ceiling?: 72;
          [k: string]: unknown;
        },
        {
          floor?: 73;
          ceiling?: 76;
          [k: string]: unknown;
        },
        {
          floor?: 77;
          ceiling?: 80;
          [k: string]: unknown;
        },
        {
          floor?: 81;
          ceiling?: 84;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 21;
          ceiling?: 43;
          [k: string]: unknown;
        },
        {
          floor?: 44;
          ceiling?: 56;
          [k: string]: unknown;
        },
        {
          floor?: 57;
          ceiling?: 64;
          [k: string]: unknown;
        },
        {
          floor?: 65;
          ceiling?: 68;
          [k: string]: unknown;
        },
        {
          floor?: 69;
          ceiling?: 72;
          [k: string]: unknown;
        },
        {
          floor?: 73;
          ceiling?: 76;
          [k: string]: unknown;
        },
        {
          floor?: 77;
          ceiling?: 80;
          [k: string]: unknown;
        },
        {
          floor?: 81;
          ceiling?: 84;
          [k: string]: unknown;
        },
        {
          floor?: 85;
          ceiling?: 88;
          [k: string]: unknown;
        }
      ];
  dangers?:
    | []
    | [
        {
          floor?: 31;
          ceiling?: 33;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 31;
          ceiling?: 33;
          [k: string]: unknown;
        },
        {
          floor?: 34;
          ceiling?: 36;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 31;
          ceiling?: 33;
          [k: string]: unknown;
        },
        {
          floor?: 34;
          ceiling?: 36;
          [k: string]: unknown;
        },
        {
          floor?: 37;
          ceiling?: 39;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 31;
          ceiling?: 33;
          [k: string]: unknown;
        },
        {
          floor?: 34;
          ceiling?: 36;
          [k: string]: unknown;
        },
        {
          floor?: 37;
          ceiling?: 39;
          [k: string]: unknown;
        },
        {
          floor?: 40;
          ceiling?: 42;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 31;
          ceiling?: 33;
          [k: string]: unknown;
        },
        {
          floor?: 34;
          ceiling?: 36;
          [k: string]: unknown;
        },
        {
          floor?: 37;
          ceiling?: 39;
          [k: string]: unknown;
        },
        {
          floor?: 40;
          ceiling?: 42;
          [k: string]: unknown;
        },
        {
          floor?: 43;
          ceiling?: 45;
          [k: string]: unknown;
        }
      ];
  [k: string]: unknown;
};
export type DelveCardType = "theme" | "domain";
/**
 * This interface was referenced by `DelveSiteThemes`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type DelveSiteTheme = DelveCardBase & {
  card_type?: "theme";
  features?:
    | []
    | [
        {
          floor?: 1;
          ceiling?: 4;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 4;
          [k: string]: unknown;
        },
        {
          floor?: 5;
          ceiling?: 8;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 4;
          [k: string]: unknown;
        },
        {
          floor?: 5;
          ceiling?: 8;
          [k: string]: unknown;
        },
        {
          floor?: 9;
          ceiling?: 12;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 4;
          [k: string]: unknown;
        },
        {
          floor?: 5;
          ceiling?: 8;
          [k: string]: unknown;
        },
        {
          floor?: 9;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 16;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 4;
          [k: string]: unknown;
        },
        {
          floor?: 5;
          ceiling?: 8;
          [k: string]: unknown;
        },
        {
          floor?: 9;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 20;
          [k: string]: unknown;
        }
      ];
  dangers?:
    | []
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 18;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 18;
          [k: string]: unknown;
        },
        {
          floor?: 19;
          ceiling?: 20;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 18;
          [k: string]: unknown;
        },
        {
          floor?: 19;
          ceiling?: 20;
          [k: string]: unknown;
        },
        {
          floor?: 21;
          ceiling?: 22;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 18;
          [k: string]: unknown;
        },
        {
          floor?: 19;
          ceiling?: 20;
          [k: string]: unknown;
        },
        {
          floor?: 21;
          ceiling?: 22;
          [k: string]: unknown;
        },
        {
          floor?: 23;
          ceiling?: 24;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 18;
          [k: string]: unknown;
        },
        {
          floor?: 19;
          ceiling?: 20;
          [k: string]: unknown;
        },
        {
          floor?: 21;
          ceiling?: 22;
          [k: string]: unknown;
        },
        {
          floor?: 23;
          ceiling?: 24;
          [k: string]: unknown;
        },
        {
          floor?: 25;
          ceiling?: 26;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 18;
          [k: string]: unknown;
        },
        {
          floor?: 19;
          ceiling?: 20;
          [k: string]: unknown;
        },
        {
          floor?: 21;
          ceiling?: 22;
          [k: string]: unknown;
        },
        {
          floor?: 23;
          ceiling?: 24;
          [k: string]: unknown;
        },
        {
          floor?: 25;
          ceiling?: 26;
          [k: string]: unknown;
        },
        {
          floor?: 27;
          ceiling?: 28;
          [k: string]: unknown;
        }
      ]
    | [
        {
          floor?: 1;
          ceiling?: 5;
          [k: string]: unknown;
        },
        {
          floor?: 6;
          ceiling?: 10;
          [k: string]: unknown;
        },
        {
          floor?: 11;
          ceiling?: 12;
          [k: string]: unknown;
        },
        {
          floor?: 13;
          ceiling?: 14;
          [k: string]: unknown;
        },
        {
          floor?: 15;
          ceiling?: 16;
          [k: string]: unknown;
        },
        {
          floor?: 17;
          ceiling?: 18;
          [k: string]: unknown;
        },
        {
          floor?: 19;
          ceiling?: 20;
          [k: string]: unknown;
        },
        {
          floor?: 21;
          ceiling?: 22;
          [k: string]: unknown;
        },
        {
          floor?: 23;
          ceiling?: 24;
          [k: string]: unknown;
        },
        {
          floor?: 25;
          ceiling?: 26;
          [k: string]: unknown;
        },
        {
          floor?: 27;
          ceiling?: 28;
          [k: string]: unknown;
        },
        {
          floor?: 29;
          ceiling?: 30;
          [k: string]: unknown;
        }
      ];
  [k: string]: unknown;
};
export type DelveSiteDenizen = OracleRowLike & {
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name?: string;
  rarity: DelveSiteDenizenRarity;
  encounter: EncounterClassicID | null;
  [k: string]: unknown;
};
export type DelveSiteDenizenRarity = "very_common" | "common" | "uncommon" | "rare" | "unforeseen";
/**
 * A unique, human-readable ID.
 */
export type EncounterClassicID = string;
/**
 * This interface was referenced by `SettingTruthsStarforged`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export type SettingTruthStarforged = SettingTruth & {
  options?: OracleTableRow1[];
  [k: string]: unknown;
};

export interface Datasworn {
  _game: "classic";
  [k: string]: NamespaceStarforged;
}
/**
 * This interface was referenced by `Datasworn`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z0-9][a-z0-9_]*[a-z0-9]$".
 *
 * This interface was referenced by `Dataforged`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z0-9][a-z0-9_]*[a-z0-9]$".
 */
export interface NamespaceStarforged {
  assets?: AssetCollections;
  moves?: MoveCollections;
  oracles?: OracleCollections;
  _game?: "starforged";
  world_truths?: WorldTruthsClassic;
  encounters?: EncountersStarforged;
  regions?: Regions;
  rarities?: Rarities;
  site_domains?: DelveSiteDomains;
  site_themes?: DelveSiteThemes;
  delve_sites?: DelveSites;
  setting_truths?: SettingTruthsStarforged;
}
export interface AssetCollections {
  [k: string]: AssetCollection;
}
export interface CategoryMetadata {
  _id?: ID;
  title: Title;
  source: Source;
  /**
   * A player-facing markdown summary of the item. Summary is shorter than {@link HasDescription| Description}, when they're both present.
   */
  summary?: string;
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description?: string;
  tags?: Tags;
  [k: string]: unknown;
}
export interface Title {
  _id?: ID;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  canonical: string;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  short?: string;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  standard?: string;
}
/**
 * Information on this item's source. For 'canonical' content, this is usually a book with a page number, but it might also be a link to a web site.
 */
export interface Source {
  /**
   * The title of the source.
   *
   * For 'canonical' content, use one of the enumerated `SourceTitle` strings.
   *
   * For 3rd-party content (including homebrew) that's been released as part of a titled document, use the title of that document (e.g. "Steelforged", "Ironsmith").
   *
   * If the source has no particular title (for instance, it's a single custom element in a VTT implementation), use "Custom".
   */
  title: string;
  /**
   * The author(s) of this item. For 'canonical' content, this one's usually pretty obvious 😉 However, it's included so that homebrew content can use the same interface/schema.
   */
  authors: string[];
  /**
   * The page on which the item appears most prominently in the source material (if it's in a format that uses page numbers).
   */
  page?: number;
  /**
   * The URI where the source material is available.
   */
  uri: string;
  /**
   * The date when the source document's content was last updated.
   */
  date: string;
  license: License;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface Asset {
  /**
   * A unique, human-readable ID.
   */
  _id?: string;
  attributes?: {
    [k: string]: Attribute;
  };
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name: string;
  abilities: [] | [AssetAbility] | [AssetAbility, AssetAbility] | [AssetAbility, AssetAbility, AssetAbility];
  /**
   * A localizable string formatted in markdown. This usually represents a direct excerpt from the source material.
   */
  requirement?: string;
  source?: Source;
  /**
   * Details on what attachments (other assets) are accepted by this asset.
   */
  attachments?: {
    [k: string]: unknown;
  };
  tags?: string[];
  /**
   * Information on the asset's usage, such as whether its abilities are shared amongst the player characters.
   */
  usage?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface AttributeBase {
  /**
   * A unique, human-readable ID.
   */
  _id?: AttributeID & AttributeID1;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  label: string;
  position: InputPosition;
  attribute_type: AttributeNumericType | ("player_stat" | "player_condition_meter" | "impact" | "text");
  [k: string]: unknown;
}
export interface AssetAbilityBase {
  /**
   * Ironsworn companion assets provide names for their abilities. Starforged asset abilities do not have names.
   */
  name?: string;
  /**
   * The rules text for this asset ability.
   */
  text?: string;
  /**
   * Details on what attachments (other assets) are accepted by this asset.
   */
  attachments?: {
    [k: string]: unknown;
  };
  attributes?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
     */
    [k: string]:
      | AttributeNumericOverride
      | (AttributeConditionMeter | AttributeCounter | AttributeText | AttributeClock);
  };
  /**
   * Unique, self-contained moves added by this asset ability.
   */
  moves?: {
    [k: string]: Move;
  };
  alter_moves?: MoveExtensionBase[];
  alter_player?: PlayerExtension;
  _id?: AssetAbilityID;
  /**
   * Whether the asset ability is enabled or not. In most cases, the first asset ability defaults to 'true' and the others to 'false'. If none of an asset's abilities are set to 'true', the player can pick which the ability they start with when purchasing the asset.
   */
  enabled?: boolean;
  [k: string]: unknown;
}
/**
 * Adjusts an existing numeric input, usually a condition meter
 */
export interface AttributeNumericOverride {
  _extends: AttributeID & AttributeID1;
  min?: number;
  max?: number;
  value?: number;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 *
 * This interface was referenced by `Moves`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface Move {
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name: string;
  trigger: MoveTrigger;
  attributes?: {
    [k: string]: CustomStat;
  };
  outcomes?: MoveOutcomes;
  /**
   * A localizable string formatted in markdown. This usually represents a direct excerpt from the source material.
   */
  text: string;
  suggestions?: Suggestions;
  /**
   * A unique, human-readable ID.
   */
  asset?: string;
  /**
   * Whether or not the move is a Progress Move. Progress moves roll two challenge dice against a progress score.
   */
  progress_move?: boolean;
  /**
   * The ID of the move that this move is a variant of, if any.
   */
  variant_of?: string;
  /**
   * The ID of any oracles directly referenced by the move, or vice versa.
   */
  oracles?: OracleTableID[];
  /**
   * Whether or not the source material presents this rules item as optional.
   */
  optional?: boolean;
  /**
   * Arbitrary strings tags that describe optional metadata that doesn't fit in other properties.
   */
  tags?: string[];
  /**
   * The ID of the move's category.
   */
  category?: string;
  source?: Source;
}
export interface MoveTrigger {
  options?: MoveTriggerOption[];
  /**
   * A markdown string containing the primary trigger text for this move.
   *
   * Secondary triggers (for specific stats or uses of an asset ability) are described in `Options`.
   */
  text?: string;
  /**
   * Information on who can trigger this item. Usually this is just the player, but some asset abilities can trigger from an Ally's move.
   */
  by?: {
    player?: boolean;
    ally?: boolean;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface CustomStat {
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  label: string;
  options: CustomStatOptions;
}
export interface CustomStatOptions {
  [k: string]: CustomStatOption;
}
/**
 * This interface was referenced by `CustomStatOptions`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface CustomStatOption {
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  label: string;
  /**
   * The numeric value to be used as +stat when making an Action Roll.
   */
  value: number;
}
export interface MoveOutcomes {
  miss?: MoveOutcomeWithMatch;
  weak_hit?: MoveOutcome;
  strong_hit?: MoveOutcomeWithMatch;
  [k: string]: unknown;
}
export interface MoveOutcome {
  /**
   * A localizable string formatted in markdown. This usually represents a direct excerpt from the source material.
   */
  text?: string;
  [k: string]: unknown;
}
/**
 * "Non-canonical" suggestions of related items. They might be convenient to present to the user, but in most implementations rolling them automatically is not recommended.
 */
export interface Suggestions {
  rolls?: OracleTableID[];
  regions?: IronlandsRegionID[];
  assets?: AssetID[];
  site_themes?: DelveSiteThemeID[];
  site_domains?: DelveSiteDomainID[];
}
export interface DelveSiteThemeID {
  [k: string]: unknown;
}
/**
 * Describes changes made to moves by asset abilities.
 */
export interface MoveExtensionBase {
  _moves?: _Moves;
  trigger?: MoveTrigger;
  [k: string]: unknown;
}
/**
 * Alters an attribute intrinsic to the player, such as a stat or condition meter.
 */
export interface PlayerExtension {
  [k: string]: unknown;
}
export interface MoveCollections {
  [k: string]: MoveCollection;
}
/**
 * This interface was referenced by `MoveCollections`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface MoveCollection {
  title?: Title;
  color?: Color;
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description?: string;
  source?: Source;
  moves?: Moves;
  [k: string]: unknown;
}
export interface Moves {
  [k: string]: Move;
}
export interface OracleCollections {
  [k: string]: OracleCollection;
}
/**
 * Represents an oracle set: a grouping that can contain both {@link OracleTable}s and other instances of {@link OracleCollection}, but doesn't have its own `Table` key.
 *
 * See {@link Oracle} if you need to type both {@link OracleTable} and {@link OracleCollection} to crawl the oracle hierarchy in search of a specific `_id`.
 *
 * This interface was referenced by `OracleCollections`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface OracleCollection {
  title?: Title;
  source?: Source;
  /**
   * A player-facing markdown summary of the item. Summary is shorter than {@link HasDescription| Description}, when they're both present.
   */
  summary?: string;
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description?: string;
  _id?: unknown;
  collections?: OracleCollections1;
  contents?: OracleTables;
  /**
   * A list of sample names for this oracle set. Only used by Planets.
   */
  sample_names?: string[];
  content?: unknown;
  match?: OracleMatchBehaviour;
  requires?: OracleRequirements;
  render?: OracleTableRenderMetadata;
  table: OracleTableRow[];
}
export interface OracleCollections1 {
  [k: string]: OracleCollection;
}
export interface OracleTables {
  [k: string]: OracleCollection;
}
export interface OracleMatchBehaviour {
  _id?: ID;
  /**
   * A localizable string formatted in markdown. This usually represents a direct excerpt from the source material.
   */
  text: string;
}
export interface OracleRequirements {
  [k: string]: unknown;
}
/**
 * Contains data relevant to rendering the item.
 */
export interface RenderMetadata {
  icon?: Icon;
  images?: Image[];
  color?: Color;
  [k: string]: unknown;
}
/**
 * Parameters for an oracle table roll.
 */
export interface OracleTableRoll {
  table: OracleTableID;
  /**
   * The number of times to roll
   */
  times?: number;
  /**
   * TODO
   */
  allow_duplicates?: boolean;
  /**
   * TODO
   */
  make_it_worse?: boolean;
  [k: string]: unknown;
}
export interface WorldTruthsClassic {
  [k: string]: WorldTruthClassic;
}
export interface SettingTruth {
  _id?: ID;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name: string;
  source: Source;
  [k: string]: unknown;
}
export interface EncountersStarforged {
  [k: string]: EncounterStarforged;
}
export interface EncounterStub {
  rank: ChallengeRank;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name: string;
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description: string;
  nature: string;
  [k: string]: unknown;
}
export interface EncounterVariantsStarforged {
  [k: string]: EncounterVariantStarforged;
}
export interface Regions {
  [k: string]: RegionEntry1;
}
export interface Rarities {
  [k: string]: Rarity;
}
/**
 * This interface was referenced by `Rarities`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface Rarity {
  _id?: RarityID;
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name: string;
  icon?: Icon;
  asset: AssetID;
  source: Source;
  xp_cost: number;
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description: string;
}
export interface DelveSiteDomains {
  [k: string]: DelveSiteDomain;
}
/**
 * Schema shared by delve site themes and delve site domains.
 */
export interface DelveCardBase {
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name?: string;
  card_type?: DelveCardType;
  /**
   * A player-facing markdown summary of the item. Summary is shorter than {@link HasDescription| Description}, when they're both present.
   */
  summary?: string;
  /**
   * A player-facing markdown description of the item, consisting of one or more paragraphs.
   */
  description?: string;
  source?: Source;
  features?: OracleTableRow1[];
  dangers?: OracleTableRow1[];
}
export interface DelveSiteThemes {
  [k: string]: DelveSiteTheme;
}
export interface DelveSites {
  [k: string]: DelveSite;
}
/**
 * This interface was referenced by `DelveSites`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z_]*[a-z]$".
 */
export interface DelveSite {
  /**
   * A localizable string of plain text used to provide a player-facing label for this element.
   */
  name: string;
  source: Source;
  rank: ChallengeRank;
  theme: DelveSiteThemeID;
  domain: DelveSiteDomainID;
  denizens: (
    | (DelveSiteDenizen[] & [])
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 76;
          ceiling?: 81;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 76;
          ceiling?: 81;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 82;
          ceiling?: 87;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 76;
          ceiling?: 81;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 82;
          ceiling?: 87;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 88;
          ceiling?: 93;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 76;
          ceiling?: 81;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 82;
          ceiling?: 87;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 88;
          ceiling?: 93;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 94;
          ceiling?: 95;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 76;
          ceiling?: 81;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 82;
          ceiling?: 87;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 88;
          ceiling?: 93;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 94;
          ceiling?: 95;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 96;
          ceiling?: 97;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 76;
          ceiling?: 81;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 82;
          ceiling?: 87;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 88;
          ceiling?: 93;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 94;
          ceiling?: 95;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 96;
          ceiling?: 97;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 98;
          ceiling?: 99;
          [k: string]: unknown;
        }
      ]
    | [
        {
          rarity?: "very_common";
          floor?: 1;
          ceiling?: 27;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 28;
          ceiling?: 41;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 42;
          ceiling?: 55;
          [k: string]: unknown;
        },
        {
          rarity?: "common";
          floor?: 56;
          ceiling?: 69;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 70;
          ceiling?: 75;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 76;
          ceiling?: 81;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 82;
          ceiling?: 87;
          [k: string]: unknown;
        },
        {
          rarity?: "uncommon";
          floor?: 88;
          ceiling?: 93;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 94;
          ceiling?: 95;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 96;
          ceiling?: 97;
          [k: string]: unknown;
        },
        {
          rarity?: "rare";
          floor?: 98;
          ceiling?: 99;
          [k: string]: unknown;
        },
        {
          rarity?: "unforeseen";
          floor?: 100;
          ceiling?: 100;
          [k: string]: unknown;
        }
      ]
  ) &
    unknown[];
  [k: string]: unknown;
}
export interface OracleRowLike {
  /**
   * The high end of the dice range for this table row.
   */
  floor?: number;
  /**
   * The low end of the dice range for this table row.
   */
  ceiling: number;
  [k: string]: unknown;
}
export interface SettingTruthsStarforged {
  [k: string]: SettingTruthStarforged;
}
export interface Dataforged {
  _game: "starforged";
  [k: string]: NamespaceStarforged;
}
