/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetAbilityControlFieldId".
 */
export type AssetAbilityControlFieldId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetAbilityId".
 */
export type AssetAbilityId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetAbilityOptionFieldId".
 */
export type AssetAbilityOptionFieldId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetConditionMeterControlFieldId".
 */
export type AssetConditionMeterControlFieldId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetControlFieldId".
 */
export type AssetControlFieldId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetControlFieldIdWildcard".
 */
export type AssetControlFieldIdWildcard = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetId".
 */
export type AssetId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetIdWildcard".
 */
export type AssetIdWildcard = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetOptionFieldId".
 */
export type AssetOptionFieldId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetOptionFieldIdWildcard".
 */
export type AssetOptionFieldIdWildcard = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetTypeId".
 */
export type AssetTypeId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AtlasEntryId".
 */
export type AtlasEntryId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AtlasEntryIdWildcard".
 */
export type AtlasEntryIdWildcard = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AtlasId".
 */
export type AtlasId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AtlasIdWildcard".
 */
export type AtlasIdWildcard = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ConditionMeterRuleId".
 */
export type ConditionMeterRuleId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteDenizenId".
 */
export type DelveSiteDenizenId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteDomainId".
 */
export type DelveSiteDomainId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteId".
 */
export type DelveSiteId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteThemeId".
 */
export type DelveSiteThemeId = string;
/**
 * A key used in a Datasworn dictionary object.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DictKey".
 */
export type DictKey = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DomainDangerRowId".
 */
export type DomainDangerRowId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DomainFeatureRowId".
 */
export type DomainFeatureRowId = string;
/**
 * The ID of a Datasworn package that enhances another Datasworn package, and relies on another package to provide its ruleset.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ExpansionId".
 */
export type ExpansionId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ImpactRuleCollectionId".
 */
export type ImpactRuleCollectionId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ImpactRuleId".
 */
export type ImpactRuleId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveCategoryId".
 */
export type MoveCategoryId = string;
/**
 * A move ID, for a standard move or a unique asset move
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveId".
 */
export type MoveId = StandardMoveId | AssetMoveId;
/**
 * A move ID for a standard move.
 */
export type StandardMoveId = string;
/**
 * A move ID for an asset move.
 */
export type AssetMoveId = string;
/**
 * A move ID with wildcards.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveIdWildcard".
 */
export type MoveIdWildcard = StandardMoveIdWithWildcard | AssetMoveIdWithWildcard;
export type StandardMoveIdWithWildcard = string;
export type AssetMoveIdWithWildcard = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "NpcCollectionId".
 */
export type NpcCollectionId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "NpcId".
 */
export type NpcId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "NpcIdWildcard".
 */
export type NpcIdWildcard = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "NpcVariantId".
 */
export type NpcVariantId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleCollectionId".
 */
export type OracleCollectionId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableId".
 */
export type OracleTableId = string;
/**
 * Oracle table wildcards can also use '**' to represent any number of collection levels in the oracle tree.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableIdWildcard".
 */
export type OracleTableIdWildcard = string;
/**
 * Normally, rows will end with two numbers separated by a dash, indicating their dice range.
 *
 * Rows with a single number represent unrollable rows that are sometimes included for rendering purposes; in this case, the number represents the row's index.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRowId".
 */
export type OracleTableRowId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RarityId".
 */
export type RarityId = string;
/**
 * The ID of standalone Datasworn package that describes its own ruleset.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RulesetId".
 */
export type RulesetId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "SpecialTrackRuleId".
 */
export type SpecialTrackRuleId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "StatRuleId".
 */
export type StatRuleId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ThemeDangerRowId".
 */
export type ThemeDangerRowId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ThemeFeatureRowId".
 */
export type ThemeFeatureRowId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TruthId".
 */
export type TruthId = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TruthOptionId".
 */
export type TruthOptionId = string;
/**
 * A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "CssColor".
 */
export type CssColor = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "SemanticVersion".
 */
export type SemanticVersion = string;
/**
 * The title of the source document.
 */
export type Title = string;
/**
 * An optional email contact for the author
 */
export type Email = string;
/**
 * An absolute URL pointing to the location where this element's license can be found.
 *
 * A `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Datasworn's build process skips unlicensed content by default.
 */
export type License = string | null;
/**
 * A relative URL pointing to a vector image in the SVG format.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "SvgImageUrl".
 */
export type SvgImageUrl = string;
/**
 * A relative URL pointing to a raster image in the WEBP format.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "WebpImageUrl".
 */
export type WebpImageUrl = string;
/**
 *   * common_noun: A common noun.
 *   * proper_noun: A proper noun.
 *   * adjunct_common_noun: A common noun used as an adjective, to modify another noun.
 *   * adjunct_proper_noun: A proper noun used as an adjective, to modify another noun.
 *   * verb: A verb in present tense
 *   * gerund: Gerund or present participle of a verb, e.g. "going", "seeing", "waving"
 *   * adjective: An adjective.
 *   * attributive_verb: A verb used as an adjective, to modify a noun.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "PartOfSpeech".
 */
export type PartOfSpeech =
  | "common_noun"
  | "proper_noun"
  | "adjunct_common_noun"
  | "adjunct_proper_noun"
  | "verb"
  | "gerund"
  | "adjective"
  | "attributive_verb";
/**
 * A localized plain text name or label.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Label".
 */
export type Label = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MarkdownString".
 */
export type MarkdownString = string;
/**
 * A rich text string in Markdown with replaced values from oracle roll results.
 *
 * The custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `result` key, for example `{{result:starforged/oracles/core/action}}`
 *
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TemplateString".
 */
export type TemplateString = string;
/**
 * A localized label for this input. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).
 */
export type Label1 = string;
/**
 * A description of this condition meter.
 */
export type MarkdownString1 = string;
/**
 * A label for this impact category.
 */
export type Label2 = string;
/**
 * A description of this impact category.
 */
export type MarkdownString2 = string;
/**
 * The label for this impact.
 */
export type Label3 = string;
/**
 * A description of this impact.
 */
export type MarkdownString3 = string;
/**
 * A label for this special track.
 */
export type Label4 = string;
/**
 * A description of this special track.
 */
export type MarkdownString4 = string;
/**
 * A label for this stat.
 */
export type Label5 = string;
/**
 * A description of this stat.
 */
export type MarkdownString5 = string;
/**
 * Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).
 *
 *   * 1: Troublesome
 *   * 2: Dangerous
 *   * 3: Formidable
 *   * 4: Extreme
 *   * 5: Epic
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ChallengeRank".
 */
export type ChallengeRank = 1 | 2 | 3 | 4 | 5;
/**
 * A category label for progress tracks of this type.
 */
export type Label6 = string;
/**
 * A key used in a Datasworn dictionary object.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "SpecialTrackType".
 */
export type DictKey1 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type NpcId1 = string;
/**
 * The primary name/label for this item.
 */
export type Label7 = string;
/**
 * The name of this item as it appears on the page in the book, if it's different from `name`.
 */
export type Label8 = string;
/**
 * A localized category label describing the nature of this NPC.
 *
 * In Ironsworn classic, this is probably the singular form of the parent collection's name.
 *
 * For Starforged, see the table on p. 258 for examples.
 */
export type NpcNature = string;
/**
 * The suggested challenge rank for this NPC.
 */
export type ChallengeRank1 = 1 | 2 | 3 | 4 | 5;
/**
 * The unique Datasworn ID for this item.
 */
export type NpcVariantId1 = string;
/**
 * The suggested challenge rank for this NPC.
 */
export type ChallengeRank2 = 1 | 2 | 3 | 4 | 5;
/**
 * The unique Datasworn ID for this item.
 */
export type NpcCollectionId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label9 = string;
/**
 * A localized plain text name or label.
 */
export type Label10 = string;
/**
 * This collection's content enhances the identified collection, rather than being a standalone collection of its own.
 */
export type NpcCollectionId2 = string;
/**
 * A thematic color associated with this collection.
 */
export type CssColor1 = string;
/**
 * An SVG icon associated with this collection.
 */
export type SvgImageUrl1 = string;
/**
 * Extra images associated with this collection.
 */
export type WebpImageUrl1 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString6 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString7 = string;
/**
 * This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection.
 */
export type NpcCollectionId3 = string;
/**
 * A localized plain text name or label.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "NpcNature".
 */
export type Label11 = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DiceNotation".
 */
export type DiceNotation = string;
/**
 * A string template that may be used in place of OracleTableRow#result.
 */
export type TemplateString1 = string;
/**
 * A string template that may be used in place of OracleTableRow#summary.
 */
export type TemplateString2 = string;
/**
 * A string template that may be used in place of OracleTableRow#description.
 */
export type TemplateString3 = string;
/**
 * Special roll instructions to use when rolling multiple times on a single oracle table.
 *
 *   * no_duplicates: Duplicates should be re-rolled.
 *   * keep_duplicates: Duplicates should be kept.
 *   * make_it_worse: Duplicates should be kept, and they compound to make things worse.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRollMethod".
 */
export type OracleTableRollMethod = "no_duplicates" | "keep_duplicates" | "make_it_worse";
/**
 * The ID of the oracle table to be rolled. If omitted, it defaults to the ID of this oracle table.
 */
export type OracleTableId1 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type OracleCollectionId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label12 = string;
/**
 * A localized plain text name or label.
 */
export type Label13 = string;
/**
 * This collection's content enhances the identified collection, rather than being a standalone collection of its own.
 */
export type OracleCollectionId2 = string;
/**
 * A thematic color associated with this collection.
 */
export type CssColor2 = string;
/**
 * An SVG icon associated with this collection.
 */
export type SvgImageUrl2 = string;
/**
 * Extra images associated with this collection.
 */
export type WebpImageUrl2 = string;
/**
 * Describes the presentation of this oracle collection, which might represent a group of separate tables, or a single table with additional columns.
 */
export type OracleCollectionRendering = {
  [k: string]: unknown;
};
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString8 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString9 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type OracleTableId2 = string;
/**
 * A localized plain text name or label.
 */
export type Label14 = string;
/**
 * A localized plain text name or label.
 */
export type Label15 = string;
/**
 * An icon that represents this table.
 */
export type SvgImageUrl3 = string;
/**
 * Extra images associated with this table.
 */
export type WebpImageUrl3 = string;
/**
 * The roll used to select a result on this table.
 */
export type DiceNotation1 = string;
/**
 * Describes how how to render this table, when presenting it as a standalone table.
 */
export type OracleTableRendering = {
  [k: string]: unknown;
};
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString10 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString11 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type OracleTableRowId1 = string;
/**
 * Indicates that this table replaces the identified table. References to the replaced table can be considered equivalent to this table.
 */
export type OracleTableId3 = string;
/**
 * This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection.
 */
export type OracleCollectionId3 = string;
/**
 * Describes the presentation of this oracle collection, which might represent a group of separate tables, or a single table with additional columns.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleCollectionRendering".
 */
export type OracleCollectionRendering1 = {
  [k: string]: unknown;
};
/**
 * A localized plain text name or label.
 */
export type Label16 = string;
/**
 * The value(s) from each OracleTableRow that is rendered in this column.
 *
 *   * roll: Column displays the roll range (`min` and `max`) of each OracleTableRow.
 *   * result: Column displays the OracleTableRow's `result` key.
 *   * summary: Column displays the OracleTableRow's `summary` key.
 *   * description: Column displays the OracleTableRow's `description` key.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableColumnContentKey".
 */
export type OracleTableColumnContentKey = "roll" | "result" | "summary" | "description";
/**
 * The thematic color for this column.
 */
export type CssColor3 = string;
/**
 * A key used in a Datasworn dictionary object.
 */
export type DictKey2 = string;
/**
 *   * tables: Presented as a collection of separate tables.
 *   * multi_table: Presented as a single table, with its OracleTable children rendered as columns.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleCollectionStyle".
 */
export type OracleCollectionStyle = "tables" | "multi_table";
/**
 * A localized plain text name or label.
 */
export type Label17 = string;
/**
 * The thematic color for this column.
 */
export type CssColor4 = string;
/**
 * Describes the presentation of this table.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRendering".
 */
export type OracleTableRendering1 = {
  [k: string]: unknown;
};
/**
 *   * standalone: Render as a standalone table.
 *   * embed_in_row: Render as a table, within a row in another table.
 *   * column: Render as a single column of a table.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableStyle".
 */
export type OracleTableStyle = "standalone" | "embed_in_row" | "column";
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * player_choice: The player chooses which roll option to use.
 *   * highest: Use the roll option with the best/highest value.
 *   * lowest: Use the roll option with the worst/lowest value.
 *   * all: Use **every** roll option at once.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ActionRollMethod".
 */
export type ActionRollMethod = "miss" | "weak_hit" | "strong_hit" | "player_choice" | "highest" | "lowest" | "all";
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ActionRollOption".
 */
export type ActionRollOption = {
  [k: string]: unknown;
};
/**
 *   * stat: Roll using a standard player character stat.
 *   * condition_meter: Roll using the value of a standard player condition meter.
 *   * asset_control: Roll using the value of an asset control.
 *   * asset_option: Roll using the value of an asset option.
 *   * custom: Roll using an integer value with customizable labels.
 *   * attached_asset_control: Roll using the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.
 *   * attached_asset_option: Roll using the value of an attached asset option.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ActionRollUsing".
 */
export type ActionRollUsing =
  | "stat"
  | "condition_meter"
  | "asset_control"
  | "asset_option"
  | "custom"
  | "attached_asset_control"
  | "attached_asset_option";
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Move".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export type Move = {
  [k: string]: unknown;
};
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId1 = StandardMoveId | AssetMoveId;
/**
 * A localized plain text name or label.
 */
export type Label18 = string;
/**
 * A localized plain text name or label.
 */
export type Label19 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString12 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString13 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString14 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString15 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId2 = StandardMoveId | AssetMoveId;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString16 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type MoveCategoryId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label20 = string;
/**
 * A localized plain text name or label.
 */
export type Label21 = string;
/**
 * This collection's content enhances the identified collection, rather than being a standalone collection of its own.
 */
export type MoveCategoryId2 = string;
/**
 * A thematic color associated with this collection.
 */
export type CssColor5 = string;
/**
 * A relative URL pointing to a vector image in the SVG format.
 */
export type SvgImageUrl4 = string;
/**
 * Extra images associated with this collection.
 */
export type WebpImageUrl4 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString17 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString18 = string;
/**
 * This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection.
 */
export type MoveCategoryId3 = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveEnhancement".
 */
export type MoveEnhancement = {
  [k: string]: unknown;
};
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId3 = StandardMoveId | AssetMoveId;
/**
 * A localized plain text name or label.
 */
export type Label22 = string;
/**
 * A localized plain text name or label.
 */
export type Label23 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString19 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString20 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString21 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId4 = StandardMoveId | AssetMoveId;
/**
 *   * miss: The score doesn't beat either challenge die.
 *   * weak_hit: The score is greater than one challenge die.
 *   * strong_hit: The score is greater than both challenge dice.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveOutcomeType".
 */
export type MoveOutcomeType = "miss" | "weak_hit" | "strong_hit";
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId5 = StandardMoveId | AssetMoveId;
/**
 * A localized plain text name or label.
 */
export type Label24 = string;
/**
 * A localized plain text name or label.
 */
export type Label25 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString22 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString23 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * progress_roll: Make a progress roll on a progress track associated with this move.
 */
export type ProgressRollMethod = "miss" | "weak_hit" | "strong_hit" | "progress_roll";
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString24 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId6 = StandardMoveId | AssetMoveId;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString25 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * progress_roll: Make a progress roll on a progress track associated with this move.
 */
export type ProgressRollMethod1 = "miss" | "weak_hit" | "strong_hit" | "progress_roll";
/**
 *   * no_roll: A move that makes no action rolls or progress rolls.
 *   * action_roll: A move that makes an action roll.
 *   * progress_roll: A progress move that rolls on a standard progress track type (defined by this move).
 *   * special_track: A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveRollType".
 */
export type MoveRollType = "no_roll" | "action_roll" | "progress_roll" | "special_track";
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId7 = StandardMoveId | AssetMoveId;
/**
 * A localized plain text name or label.
 */
export type Label26 = string;
/**
 * A localized plain text name or label.
 */
export type Label27 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString26 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString27 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * player_choice: The player chooses which roll option to use.
 *   * highest: Use the roll option with the best/highest value.
 *   * lowest: Use the roll option with the worst/lowest value.
 *   * all: Use **every** roll option at once.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "SpecialTrackRollMethod".
 */
export type SpecialTrackRollMethod =
  | "miss"
  | "weak_hit"
  | "strong_hit"
  | "player_choice"
  | "highest"
  | "lowest"
  | "all";
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString28 = string;
/**
 * A move ID, for a standard move or a unique asset move
 */
export type MoveId8 = StandardMoveId | AssetMoveId;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString29 = string;
/**
 *   * miss: An automatic miss.
 *   * weak_hit: An automatic weak hit.
 *   * strong_hit: An automatic strong hit.
 *   * progress_roll: Make a progress roll on a progress track associated with this move.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ProgressRollMethod".
 */
export type ProgressRollMethod2 = "miss" | "weak_hit" | "strong_hit" | "progress_roll";
/**
 * A key used in a Datasworn dictionary object.
 */
export type DictKey3 = string;
/**
 * A key used in a Datasworn dictionary object.
 */
export type DictKey4 = string;
/**
 * A key used in a Datasworn dictionary object.
 */
export type DictKey5 = string;
/**
 * A key used in a Datasworn dictionary object.
 */
export type DictKey6 = string;
/**
 * A basic, rollable player character resource.
 */
export type ConditionMeterId = string;
/**
 * A basic player character stat.
 */
export type StatId = string;
/**
 * The unique Datasworn ID for this item.
 */
export type AssetId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label28 = string;
/**
 * A localized plain text name or label.
 */
export type Label29 = string;
/**
 * A localized plain text name or label.
 */
export type Label30 = string;
/**
 * A thematic color associated with this asset.
 */
export type CssColor6 = string;
/**
 * A relative URL pointing to a vector image in the SVG format.
 */
export type SvgImageUrl5 = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetOptionField".
 */
export type AssetOptionField = {
  [k: string]: unknown;
};
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString30 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type AssetAbilityId1 = string;
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetAbilityOptionField".
 */
export type AssetAbilityOptionField = {
  [k: string]: unknown;
};
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetAbilityControlField".
 */
export type AssetAbilityControlField = {
  [k: string]: unknown;
};
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetControlFieldEnhancement".
 */
export type AssetControlFieldEnhancement = {
  [k: string]: unknown;
};
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetControlField".
 */
export type AssetControlField = {
  [k: string]: unknown;
};
/**
 * The unique Datasworn ID for this item.
 */
export type AssetControlFieldId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label31 = string;
/**
 * A checkbox control field, rendered as part of an asset condition meter.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetConditionMeterControlField".
 */
export type AssetConditionMeterControlField = {
  [k: string]: unknown;
};
/**
 * A move ID with wildcards.
 */
export type MoveIdWildcard1 = StandardMoveIdWithWildcard | AssetMoveIdWithWildcard;
/**
 * A move ID with wildcards.
 */
export type MoveIdWildcard2 = StandardMoveIdWithWildcard | AssetMoveIdWithWildcard;
/**
 * The unique Datasworn ID for this item.
 */
export type AssetTypeId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label32 = string;
/**
 * A localized plain text name or label.
 */
export type Label33 = string;
/**
 * This collection's content enhances the identified collection, rather than being a standalone collection of its own.
 */
export type AssetTypeId2 = string;
/**
 * A thematic color associated with this collection.
 */
export type CssColor7 = string;
/**
 * A relative URL pointing to a vector image in the SVG format.
 */
export type SvgImageUrl6 = string;
/**
 * Extra images associated with this collection.
 */
export type WebpImageUrl5 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString31 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString32 = string;
/**
 * This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection.
 */
export type AssetTypeId3 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type TruthId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label34 = string;
/**
 * A localized plain text name or label.
 */
export type Label35 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type TruthOptionId1 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type AtlasId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label36 = string;
/**
 * A localized plain text name or label.
 */
export type Label37 = string;
/**
 * This collection's content enhances the identified collection, rather than being a standalone collection of its own.
 */
export type AtlasId2 = string;
/**
 * A thematic color associated with this collection.
 */
export type CssColor8 = string;
/**
 * A relative URL pointing to a vector image in the SVG format.
 */
export type SvgImageUrl7 = string;
/**
 * Extra images associated with this collection.
 */
export type WebpImageUrl6 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString33 = string;
/**
 * Localized text, formatted in Markdown.
 *
 * It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.
 */
export type MarkdownString34 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type AtlasEntryId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label38 = string;
/**
 * A localized plain text name or label.
 */
export type Label39 = string;
/**
 * This collection replaces the identified collection. References to the replaced collection can be considered equivalent to this collection.
 */
export type AtlasId3 = string;
/**
 * A key used in a Datasworn dictionary object.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ConditionMeterId".
 */
export type DictKey7 = string;
/**
 * A key used in a Datasworn dictionary object.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "StatId".
 */
export type DictKey8 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type RarityId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label40 = string;
/**
 * A localized plain text name or label.
 */
export type Label41 = string;
/**
 * The asset augmented by this rarity.
 */
export type AssetId2 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type DelveSiteId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label42 = string;
/**
 * A localized plain text name or label.
 */
export type Label43 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type DelveSiteDenizenId1 = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteDenizenFrequency".
 */
export type DelveSiteDenizenFrequency = "very_common" | "common" | "uncommon" | "rare" | "unforeseen";
/**
 * The ID of the relevant NPC entry, if one is specified.
 */
export type NpcId2 = string;
/**
 * The ID of an atlas entry representing the region in which this delve site is located.
 */
export type AtlasEntryId2 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type DelveSiteDomainId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label44 = string;
/**
 * A localized plain text name or label.
 */
export type Label45 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type DomainFeatureRowId1 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type DomainDangerRowId1 = string;
/**
 * An oracle table ID containing place name elements. For examples, see oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in oracle collection ID `delve/collections/oracles/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (ID: delve/oracles/site_name/format) to create random names for delve sites.
 */
export type OracleTableId4 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type DelveSiteThemeId1 = string;
/**
 * A localized plain text name or label.
 */
export type Label46 = string;
/**
 * A localized plain text name or label.
 */
export type Label47 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type ThemeFeatureRowId1 = string;
/**
 * The unique Datasworn ID for this item.
 */
export type ThemeDangerRowId1 = string;
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RulesPackage".
 */
export type RulesPackage = Ruleset | Expansion;

export interface DataswornSource {
  [k: string]: unknown;
}
/**
 * Metadata describing the original source of this item
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Source".
 */
export interface Source {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Suggestions".
 */
export interface Suggestions {
  oracles?: OracleTableId[];
  assets?: AssetId[];
  atlas?: AtlasEntryId[];
  moves?: MoveId[];
  npcs?: NpcId[];
  rarities?: RarityId[];
  site_domains?: DelveSiteDomainId[];
  site_themes?: DelveSiteThemeId[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "I18nHint".
 */
export interface I18NHint {
  part_of_speech?: PartOfSpeech;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "I18nHints".
 */
export interface I18NHints {
  result?: I18NHint;
  summary?: I18NHint;
  description?: I18NHint;
  template?: {
    result?: I18NHint;
    summary?: I18NHint;
    description?: I18NHint;
  };
}
/**
 * Describes a standard player character condition meter.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ConditionMeterRule".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface ConditionMeterRule {
  label: Label1;
  /**
   * The minimum value of this meter.
   */
  min?: number;
  /**
   * The maximum value of this meter.
   */
  max?: number;
  /**
   * The current value of this meter.
   */
  value: number;
  /**
   * Is this condition meter shared by all players?
   */
  shared?: boolean;
  description: MarkdownString1;
}
/**
 * Describes a category of standard impacts/debilities.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ImpactCategory".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface ImpactCategory {
  label: Label2;
  description: MarkdownString2;
  /**
   * A dictionary object of the Impacts in this category.
   */
  contents: {
    [k: string]: ImpactRule;
  };
}
/**
 * Describes a standard impact/debility.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ImpactRule".
 */
export interface ImpactRule {
  label: Label3;
  /**
   * Is this impact applied to all players at once?
   */
  shared?: boolean;
  description: MarkdownString3;
  /**
   * Is this impact permanent?
   */
  permanent?: boolean;
  /**
   * Keys of ruleset condition meters, to which this impact prevents recovery.
   */
  prevents_recovery?: DictKey[];
}
/**
 * Describes rules for player characters in this ruleset, such as stats and condition meters.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Rules".
 */
export interface Rules {
  /**
   * Describes the standard condition meters used by player characters in this ruleset.
   */
  condition_meters: {
    [k: string]: ConditionMeterRule;
  };
  /**
   * Describes the standard impacts/debilities used by player characters in this ruleset.
   */
  impacts: {
    [k: string]: ImpactCategory;
  };
  /**
   * Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
   */
  special_tracks: {
    [k: string]: SpecialTrackRule;
  };
  /**
   * Describes the standard stats used by player characters in this ruleset.
   */
  stats: {
    [k: string]: StatRule;
  };
}
/**
 * Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "SpecialTrackRule".
 */
export interface SpecialTrackRule {
  label: Label4;
  /**
   * Is this track shared by all players?
   */
  shared?: boolean;
  description: MarkdownString4;
  /**
   * Is this track an optional rule?
   */
  optional?: boolean;
}
/**
 * Describes a standard player character stat.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "StatRule".
 */
export interface StatRule {
  label: Label5;
  description: MarkdownString5;
}
/**
 * Describes rules for player characters in this ruleset, such as stats and condition meters.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RulesExpansion".
 */
export interface RulesExpansion {
  /**
   * Describes the standard condition meters used by player characters in this ruleset.
   */
  condition_meters?: {
    [k: string]: ConditionMeterRule;
  };
  /**
   * Describes the standard impacts/debilities used by player characters in this ruleset.
   */
  impacts?: {
    [k: string]: ImpactCategory;
  };
  /**
   * Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
   */
  special_tracks?: {
    [k: string]: SpecialTrackRule;
  };
  /**
   * Describes the standard stats used by player characters in this ruleset.
   */
  stats?: {
    [k: string]: StatRule;
  };
}
/**
 * Describes the features of a type of progress track.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ProgressTrackTypeInfo".
 */
export interface ProgressTrackTypeInfo {
  controls?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^([a-z][a-z_]*)$".
     */
    [k: string]: {};
  };
  category: Label6;
}
/**
 * A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Npc".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface Npc {
  id?: NpcId1;
  name: Label7;
  canonical_name?: Label8;
  nature: NpcNature;
  rank: ChallengeRank1;
  summary?: MarkdownString;
  features: MarkdownString[];
  drives: MarkdownString[];
  tactics: MarkdownString[];
  variants?: {
    [k: string]: NpcVariant;
  };
  description: MarkdownString;
  quest_starter: MarkdownString;
  your_truth?: MarkdownString;
  suggestions?: Suggestions;
  source: Source1;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "NpcVariant".
 */
export interface NpcVariant {
  id?: NpcVariantId1;
  name: Label;
  nature: NpcNature;
  rank: ChallengeRank2;
  summary?: MarkdownString;
  description: MarkdownString;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source1 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "NpcCollection".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface NpcCollection {
  id?: NpcCollectionId1;
  name: Label9;
  canonical_name?: Label10;
  enhances?: NpcCollectionId2;
  color?: CssColor1;
  icon?: SvgImageUrl1;
  images?: WebpImageUrl1[];
  summary?: MarkdownString6;
  description?: MarkdownString7;
  contents?: {
    [k: string]: Npc;
  };
  suggestions?: Suggestions;
  source: Source2;
  replaces?: NpcCollectionId3;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source2 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.
 *
 *   These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleRollTemplate".
 */
export interface OracleRollTemplate {
  result?: TemplateString1;
  summary?: TemplateString2;
  description?: TemplateString3;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableMatchBehavior".
 */
export interface OracleTableMatchBehavior {
  text: MarkdownString;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRoll".
 */
export interface OracleTableRoll {
  /**
   * The rulebook explicitly cautions *against* rolling all details at once, so rolling every referenced oracle automatically is not recommended. That said, some oracle results only provide useful information once a secondary roll occurs, such as "Action + Theme". If this value is omitted, assume it's false.
   */
  auto?: boolean;
  method?: OracleTableRollMethod;
  oracle?: OracleTableId1;
  times?: number;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleCollection".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface OracleCollection {
  id?: OracleCollectionId1;
  name: Label12;
  canonical_name?: Label13;
  enhances?: OracleCollectionId2;
  color?: CssColor2;
  icon?: SvgImageUrl2;
  images?: WebpImageUrl2[];
  rendering?: OracleCollectionRendering;
  summary?: MarkdownString8;
  description?: MarkdownString9;
  contents?: {
    [k: string]: OracleTable;
  };
  collections?: {
    [k: string]: OracleCollection;
  };
  suggestions?: Suggestions;
  source: Source4;
  replaces?: OracleCollectionId3;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTable".
 */
export interface OracleTable {
  id?: OracleTableId2;
  name: Label14;
  canonical_name?: Label15;
  icon?: SvgImageUrl3;
  images?: WebpImageUrl3[];
  dice?: DiceNotation1;
  rendering?: OracleTableRendering;
  summary?: MarkdownString10;
  description?: MarkdownString11;
  match?: OracleTableMatchBehavior1;
  suggestions?: Suggestions;
  table: OracleTableRow[];
  source: Source3;
  _i18n?: I18NHints1;
  replaces?: OracleTableId3;
}
/**
 * Most oracle tables are insensitive to matches, but a few define special match behavior.
 */
export interface OracleTableMatchBehavior1 {
  text: MarkdownString;
}
/**
 * An array of objects, each representing a single row of the table.
 */
export interface OracleTableRow {
  id?: OracleTableRowId1;
  /**
   * Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  min?: number | null;
  /**
   * High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  max?: number | null;
  icon?: SvgImageUrl;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableId;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source3 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
export interface I18NHints1 {
  result?: I18NHint;
  summary?: I18NHint;
  description?: I18NHint;
  template?: {
    result?: I18NHint;
    summary?: I18NHint;
    description?: I18NHint;
  };
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source4 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleCollectionRenderingMultiTable".
 */
export interface OracleCollectionRenderingMultiTable {
  /**
   * Presented as a single table, with its OracleTable children rendered as columns.
   */
  style: "multi_table";
  columns: {
    [k: string]: OracleCollectionTableColumn;
  };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleCollectionTableColumn".
 */
export interface OracleCollectionTableColumn {
  label: Label16;
  content_type: OracleTableColumnContentKey;
  color?: CssColor3;
  table_key: DictKey2;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleCollectionRenderingTables".
 */
export interface OracleCollectionRenderingTables {
  /**
   * Presented as a collection of separate tables.
   */
  style: "tables";
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableColumn".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface OracleTableColumn {
  label: Label17;
  content_type: OracleTableColumnContentKey;
  color?: CssColor4;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRenderingColumn".
 */
export interface OracleTableRenderingColumn {
  /**
   * Render as a single column of a table.
   */
  style: "column";
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRenderingEmbedInRow".
 */
export interface OracleTableRenderingEmbedInRow {
  /**
   * Render as a table, within a row in another table.
   */
  style: "embed_in_row";
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRenderingStandalone".
 */
export interface OracleTableRenderingStandalone {
  /**
   * Render as a standalone table.
   */
  style: "standalone";
  columns?: {
    [k: string]: OracleTableColumn;
  };
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "OracleTableRow".
 */
export interface OracleTableRow1 {
  id?: OracleTableRowId1;
  /**
   * Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  min?: number | null;
  /**
   * High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  max?: number | null;
  icon?: SvgImageUrl;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableId;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * A move that makes an action roll.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveActionRoll".
 */
export interface MoveActionRoll {
  id?: MoveId1;
  name: Label18;
  canonical_name?: Label19;
  /**
   * A move that makes an action roll.
   */
  roll_type: "action_roll";
  trigger: TriggerActionRoll;
  text: MarkdownString14;
  outcomes: MoveOutcomes;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableId[];
  suggestions?: Suggestions;
  source: Source5;
  replaces?: MoveId2;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerActionRoll".
 */
export interface TriggerActionRoll {
  text: MarkdownString12;
  conditions: TriggerActionRollCondition[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerActionRollCondition".
 */
export interface TriggerActionRollCondition {
  text?: MarkdownString13;
  by?: TriggerBy;
  method: ActionRollMethod;
  /**
   * The options available when rolling with this trigger condition.
   */
  roll_options: ActionRollOption[];
}
/**
 * Information on who can trigger this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerBy".
 */
export interface TriggerBy {
  ally: boolean;
  player: boolean;
}
/**
 * A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.
 *
 *   This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveOutcomes".
 */
export interface MoveOutcomes {
  strong_hit: MoveOutcome;
  weak_hit: MoveOutcome;
  miss: MoveOutcome;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveOutcome".
 */
export interface MoveOutcome {
  text: MarkdownString15;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source5 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveActionRollEnhancement".
 */
export interface MoveActionRollEnhancement {
  /**
   * A move that makes an action roll.
   */
  roll_type: "action_roll";
  enhances?: MoveIdWildcard[];
  trigger?: TriggerActionRollEnhancement;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerActionRollEnhancement".
 */
export interface TriggerActionRollEnhancement {
  conditions: TriggerActionRollConditionEnhancement[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerActionRollConditionEnhancement".
 */
export interface TriggerActionRollConditionEnhancement {
  text?: MarkdownString16;
  by?: TriggerBy;
  /**
   * A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.
   */
  method: ActionRollMethod | null;
  roll_options: ActionRollOption[] | null;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveCategory".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface MoveCategory {
  id?: MoveCategoryId1;
  name: Label20;
  canonical_name?: Label21;
  enhances?: MoveCategoryId2;
  color?: CssColor5;
  icon?: SvgImageUrl4;
  images?: WebpImageUrl4[];
  summary?: MarkdownString17;
  description?: MarkdownString18;
  contents?: {
    [k: string]: Move;
  };
  suggestions?: Suggestions;
  source: Source6;
  replaces?: MoveCategoryId3;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source6 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveNoRoll".
 */
export interface MoveNoRoll {
  id?: MoveId3;
  name: Label22;
  canonical_name?: Label23;
  /**
   * A move that makes no action rolls or progress rolls.
   */
  roll_type: "no_roll";
  trigger: TriggerNoRoll;
  text: MarkdownString21;
  outcomes?: null;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableId[];
  suggestions?: Suggestions;
  source: Source7;
  replaces?: MoveId4;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerNoRoll".
 */
export interface TriggerNoRoll {
  text: MarkdownString19;
  conditions?: TriggerNoRollCondition[] | null;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerNoRollCondition".
 */
export interface TriggerNoRollCondition {
  text?: MarkdownString20;
  by?: TriggerBy;
  method: null;
  /**
   * The options available when rolling with this trigger condition.
   */
  roll_options: null;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source7 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveNoRollEnhancement".
 */
export interface MoveNoRollEnhancement {
  /**
   * A move that makes no action rolls or progress rolls.
   */
  roll_type: "no_roll";
  enhances?: MoveIdWildcard[];
  trigger?: TriggerNoRollEnhancement;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerNoRollEnhancement".
 */
export interface TriggerNoRollEnhancement {
  conditions: TriggerNoRollCondition[];
}
/**
 * A progress move that rolls on a standard progress track type (defined by the move object).
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveProgressRoll".
 */
export interface ProgressMove {
  id?: MoveId5;
  name: Label24;
  canonical_name?: Label25;
  /**
   * A progress move that rolls on a standard progress track type (defined by this move).
   */
  roll_type: "progress_roll";
  trigger: TriggerProgressRoll;
  text: MarkdownString24;
  outcomes: MoveOutcomes;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableId[];
  suggestions?: Suggestions;
  source: Source8;
  replaces?: MoveId6;
  tracks: ProgressTrackTypeInfo1;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerProgressRoll".
 */
export interface TriggerProgressRoll {
  text: MarkdownString22;
  conditions: TriggerProgressRollCondition[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerProgressRollCondition".
 */
export interface TriggerProgressRollCondition {
  text?: MarkdownString23;
  by?: TriggerBy;
  method?: ProgressRollMethod;
  /**
   * The options available when rolling with this trigger condition.
   */
  roll_options: ProgressRollOption[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "ProgressRollOption".
 */
export interface ProgressRollOption {
  using: "progress_track";
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source8 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * Describes the common features of progress tracks associated with this move.
 */
export interface ProgressTrackTypeInfo1 {
  controls?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^([a-z][a-z_]*)$".
     */
    [k: string]: {};
  };
  category: Label6;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveProgressRollEnhancement".
 */
export interface MoveProgressRollEnhancement {
  /**
   * A progress move that rolls on a standard progress track type (defined by this move).
   */
  roll_type: "progress_roll";
  enhances?: MoveIdWildcard[];
  trigger?: TriggerProgressRollEnhancement;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerProgressRollEnhancement".
 */
export interface TriggerProgressRollEnhancement {
  conditions: TriggerProgressRollConditionEnhancement[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerProgressRollConditionEnhancement".
 */
export interface TriggerProgressRollConditionEnhancement {
  text?: MarkdownString25;
  by?: TriggerBy;
  /**
   * A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.
   */
  method: ProgressRollMethod1 | null;
  roll_options: ProgressRollOption[] | null;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveSpecialTrack".
 */
export interface ProgressMoveSpecialTrackRoll {
  id?: MoveId7;
  name: Label26;
  canonical_name?: Label27;
  /**
   * A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
   */
  roll_type: "special_track";
  trigger: TriggerSpecialTrack;
  text: MarkdownString28;
  outcomes: MoveOutcomes;
  /**
   * Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.
   */
  oracles?: OracleTableId[];
  suggestions?: Suggestions;
  source: Source9;
  replaces?: MoveId8;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerSpecialTrack".
 */
export interface TriggerSpecialTrack {
  text: MarkdownString26;
  conditions: TriggerSpecialTrackCondition[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerSpecialTrackCondition".
 */
export interface TriggerSpecialTrackCondition {
  text?: MarkdownString27;
  by?: TriggerBy;
  method: SpecialTrackRollMethod;
  /**
   * The options available when rolling with this trigger condition.
   */
  roll_options: TriggerSpecialTrackConditionOption[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerSpecialTrackConditionOption".
 */
export interface TriggerSpecialTrackConditionOption {
  using: DictKey1;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source9 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "MoveSpecialTrackEnhancement".
 */
export interface MoveSpecialTrackEnhancement {
  /**
   * A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).
   */
  roll_type: "special_track";
  enhances?: MoveIdWildcard[];
  trigger?: TriggerSpecialTrackEnhancement;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerSpecialTrackEnhancement".
 */
export interface TriggerSpecialTrackEnhancement {
  conditions: TriggerSpecialTrackConditionEnhancement[];
}
/**
 * A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged).
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TriggerSpecialTrackConditionEnhancement".
 */
export interface TriggerSpecialTrackConditionEnhancement {
  text?: MarkdownString29;
  by?: TriggerBy;
  /**
   * A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.
   */
  method: SpecialTrackRollMethod | null;
  roll_options: TriggerSpecialTrackConditionOption[] | null;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RollOptionAssetControl".
 */
export interface RollOptionAssetControl {
  /**
   * Roll using the value of an asset control.
   */
  using: "asset_control";
  /**
   * Asset IDs (which may be wildcarded) that provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.
   */
  assets?: AssetIdWildcard[] | null;
  control: DictKey3;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RollOptionAssetOption".
 */
export interface RollOptionAssetOption {
  /**
   * Roll using the value of an asset option.
   */
  using: "asset_option";
  /**
   * Asset IDs (which may be wildcarded) that provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.
   */
  assets?: AssetIdWildcard[] | null;
  option: DictKey4;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RollOptionAttachedAssetControl".
 */
export interface RollOptionAttachedAssetControl {
  /**
   * Roll using the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.
   */
  using: "attached_asset_control";
  control: DictKey5;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RollOptionAttachedAssetOption".
 */
export interface RollOptionAttachedAssetOption {
  /**
   * Roll using the value of an attached asset option.
   */
  using: "attached_asset_option";
  option: DictKey6;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RollOptionConditionMeter".
 */
export interface RollOptionConditionMeter {
  /**
   * Roll using the value of a standard player condition meter.
   */
  using: "condition_meter";
  condition_meter: ConditionMeterId;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RollOptionCustom".
 */
export interface RollOptionCustom {
  name: Label;
  value: number;
  /**
   * Roll using an integer value with customizable labels.
   */
  using: "custom";
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "RollOptionStat".
 */
export interface RollOptionStat {
  /**
   * Roll using a standard player character stat.
   */
  using: "stat";
  stat: StatId;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Asset".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface Asset {
  id?: AssetId1;
  name: Label28;
  canonical_name?: Label29;
  asset_type: Label30;
  color?: CssColor6;
  icon?: SvgImageUrl5;
  /**
   * Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the "name" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.
   */
  options?: {
    [k: string]: AssetOptionField;
  };
  /**
   * If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).
   */
  count_as_impact?: boolean;
  /**
   * Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.
   */
  shared?: boolean;
  attachments?: AssetAttachment;
  requirement?: MarkdownString30;
  abilities: AssetAbility[];
  /**
   * Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.
   */
  controls?: {
    [k: string]: AssetControlField;
  };
  suggestions?: Suggestions;
  source: Source10;
}
/**
 * Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetAttachment".
 */
export interface AssetAttachment {
  /**
   * Null if there's no upper limit to the number of attached assets.
   */
  max?: number | null;
  /**
   * Asset IDs (which may be wildcards) that may be attached to this asset
   */
  assets: AssetIdWildcard[];
}
/**
 * Abilities provided by this asset. Most assets have 3.
 */
export interface AssetAbility {
  id?: AssetAbilityId1;
  name?: Label;
  /**
   * Is this asset ability enabled?
   */
  enabled?: boolean;
  /**
   * Fields that are expected to be set once and remain the same through the life of the asset.
   */
  options?: {
    [k: string]: AssetAbilityOptionField;
  };
  text: MarkdownString;
  /**
   * Fields whose values are expected to change over the life of the asset.
   */
  controls?: {
    [k: string]: AssetAbilityControlField;
  };
  enhance_asset?: AssetEnhancement;
  /**
   * Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.
   */
  enhance_moves?: MoveEnhancement[];
  /**
   * Unique moves added by this asset ability.
   */
  moves?: {
    [k: string]: Move;
  };
}
/**
 * Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.
 */
export interface AssetEnhancement {
  /**
   * If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).
   */
  count_as_impact?: boolean;
  /**
   * Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.
   */
  shared?: boolean;
  attachments?: AssetAttachment;
  /**
   * Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.
   */
  controls?: {
    [k: string]: AssetControlFieldEnhancement;
  };
  suggestions?: Suggestions;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source10 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetAbility".
 */
export interface AssetAbility1 {
  id?: AssetAbilityId1;
  name?: Label;
  /**
   * Is this asset ability enabled?
   */
  enabled?: boolean;
  /**
   * Fields that are expected to be set once and remain the same through the life of the asset.
   */
  options?: {
    [k: string]: AssetAbilityOptionField;
  };
  text: MarkdownString;
  /**
   * Fields whose values are expected to change over the life of the asset.
   */
  controls?: {
    [k: string]: AssetAbilityControlField;
  };
  enhance_asset?: AssetEnhancement;
  /**
   * Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.
   */
  enhance_moves?: MoveEnhancement[];
  /**
   * Unique moves added by this asset ability.
   */
  moves?: {
    [k: string]: Move;
  };
}
/**
 * Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are "out of action".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetConditionMeter".
 */
export interface AssetConditionMeter {
  id?: AssetControlFieldId1;
  label: Label31;
  field_type: "condition_meter";
  /**
   * The minimum value of this meter.
   */
  min?: number;
  /**
   * The maximum value of this meter.
   */
  max: number;
  /**
   * The current value of this meter.
   */
  value: number;
  /**
   * Checkbox controls rendered as part of the condition meter.
   */
  controls?: {
    [k: string]: AssetConditionMeterControlField;
  };
  /**
   * Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.
   */
  moves?: {
    /**
     * The ID(s) of recovery moves associated with this meter.
     */
    recover?: MoveIdWildcard1[];
    /**
     * The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option.
     */
    suffer?: MoveIdWildcard2[];
  };
}
/**
 * Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are "out of action".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetConditionMeterEnhancement".
 */
export interface AssetConditionMeterEnhancement {
  field_type: "condition_meter";
  /**
   * The maximum value of this meter.
   */
  max: number;
}
/**
 * Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetEnhancement".
 */
export interface AssetEnhancement1 {
  /**
   * If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).
   */
  count_as_impact?: boolean;
  /**
   * Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.
   */
  shared?: boolean;
  attachments?: AssetAttachment;
  /**
   * Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.
   */
  controls?: {
    [k: string]: AssetControlFieldEnhancement;
  };
  suggestions?: Suggestions;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AssetType".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface AssetType {
  id?: AssetTypeId1;
  name: Label32;
  canonical_name?: Label33;
  enhances?: AssetTypeId2;
  color?: CssColor7;
  icon?: SvgImageUrl6;
  images?: WebpImageUrl5[];
  summary?: MarkdownString31;
  description?: MarkdownString32;
  contents?: {
    [k: string]: Asset;
  };
  suggestions?: Suggestions;
  source: Source11;
  replaces?: AssetTypeId3;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source11 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * A setting truth category.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Truth".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface Truth {
  id?: TruthId1;
  name: Label34;
  canonical_name?: Label35;
  icon?: SvgImageUrl;
  options: TruthOption[];
  suggestions?: Suggestions;
  source: Source12;
  your_character?: MarkdownString;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TruthOption".
 */
export interface TruthOption {
  id?: TruthOptionId1;
  min?: number;
  max?: number;
  summary?: MarkdownString;
  description: MarkdownString;
  quest_starter: MarkdownString;
  table?: TruthOptionTableRow[];
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "TruthOptionTableRow".
 */
export interface TruthOptionTableRow {
  /**
   * Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  min?: number | null;
  /**
   * High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes.
   */
  max?: number | null;
  icon?: SvgImageUrl;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableId;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source12 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Atlas".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface Atlas {
  id?: AtlasId1;
  name: Label36;
  canonical_name?: Label37;
  enhances?: AtlasId2;
  color?: CssColor8;
  icon?: SvgImageUrl7;
  images?: WebpImageUrl6[];
  summary?: MarkdownString33;
  description?: MarkdownString34;
  contents?: {
    [k: string]: AtlasEntry;
  };
  collections?: {
    [k: string]: Atlas;
  };
  suggestions?: Suggestions;
  source: Source14;
  replaces?: AtlasId3;
}
/**
 * An atlas entry, like the Ironlands region entries found in classic Ironsworn.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "AtlasEntry".
 */
export interface AtlasEntry {
  id?: AtlasEntryId1;
  name: Label38;
  canonical_name?: Label39;
  summary?: MarkdownString;
  features: MarkdownString[];
  description: MarkdownString;
  quest_starter: MarkdownString;
  your_truth?: MarkdownString;
  suggestions?: Suggestions;
  source: Source13;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source13 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source14 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * A rarity, as described in Ironsworn: Delve.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Rarity".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface Rarity {
  id?: RarityId1;
  name: Label40;
  canonical_name?: Label41;
  icon?: SvgImageUrl;
  description: MarkdownString;
  suggestions?: Suggestions;
  source: Source15;
  asset: AssetId2;
  /**
   * From Ironsworn: Delve, p. 174:
   *
   *       Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.
   *
   *       If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.
   */
  xp_cost?: number;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source15 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * A delve site with a theme, domain, and denizen table.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSite".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface DelveSite {
  id?: DelveSiteId1;
  name: Label42;
  canonical_name?: Label43;
  icon?: SvgImageUrl;
  rank: ChallengeRank;
  description: MarkdownString;
  suggestions?: Suggestions;
  source: Source16;
  denizens: DelveSiteDenizen[] &
    [
      {
        min: 1;
        max: 27;
        frequency: "very_common";
        [k: string]: unknown;
      },
      {
        min: 28;
        max: 41;
        frequency: "common";
        [k: string]: unknown;
      },
      {
        min: 42;
        max: 55;
        frequency: "common";
        [k: string]: unknown;
      },
      {
        min: 56;
        max: 69;
        frequency: "common";
        [k: string]: unknown;
      },
      {
        min: 70;
        max: 75;
        frequency: "uncommon";
        [k: string]: unknown;
      },
      {
        min: 76;
        max: 81;
        frequency: "uncommon";
        [k: string]: unknown;
      },
      {
        min: 82;
        max: 87;
        frequency: "uncommon";
        [k: string]: unknown;
      },
      {
        min: 88;
        max: 93;
        frequency: "uncommon";
        [k: string]: unknown;
      },
      {
        min: 94;
        max: 95;
        frequency: "rare";
        [k: string]: unknown;
      },
      {
        min: 96;
        max: 97;
        frequency: "rare";
        [k: string]: unknown;
      },
      {
        min: 98;
        max: 99;
        frequency: "rare";
        [k: string]: unknown;
      },
      {
        min: 100;
        max: 100;
        frequency: "unforeseen";
        [k: string]: unknown;
      }
    ];
  domain: DelveSiteDomainId;
  /**
   * An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve.
   */
  extra_card?: DelveSiteThemeId | DelveSiteDomainId;
  region?: AtlasEntryId2;
  theme: DelveSiteThemeId;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source16 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteDenizen".
 */
export interface DelveSiteDenizen {
  id?: DelveSiteDenizenId1;
  name?: Label;
  min: number;
  max: number;
  frequency: DelveSiteDenizenFrequency;
  npc?: NpcId2;
}
/**
 * A delve site domain card.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteDomain".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface DelveSiteDomain {
  id?: DelveSiteDomainId1;
  name: Label44;
  canonical_name?: Label45;
  icon?: SvgImageUrl;
  summary: MarkdownString;
  features: DelveSiteDomainFeatureRow[] &
    [
      {
        min: 21;
        max: 43;
        [k: string]: unknown;
      },
      {
        min: 44;
        max: 56;
        [k: string]: unknown;
      },
      {
        min: 57;
        max: 64;
        [k: string]: unknown;
      },
      {
        min: 65;
        max: 68;
        [k: string]: unknown;
      },
      {
        min: 69;
        max: 72;
        [k: string]: unknown;
      },
      {
        min: 73;
        max: 76;
        [k: string]: unknown;
      },
      {
        min: 77;
        max: 80;
        [k: string]: unknown;
      },
      {
        min: 81;
        max: 84;
        [k: string]: unknown;
      },
      {
        min: 85;
        max: 88;
        [k: string]: unknown;
      },
      {
        min: 89;
        max: 98;
        [k: string]: unknown;
      },
      {
        min: 99;
        max: 99;
        [k: string]: unknown;
      },
      {
        min: 100;
        max: 100;
        [k: string]: unknown;
      }
    ];
  dangers: DelveSiteDomainDangerRow[] &
    [
      {
        min: 31;
        max: 33;
        [k: string]: unknown;
      },
      {
        min: 34;
        max: 36;
        [k: string]: unknown;
      },
      {
        min: 37;
        max: 39;
        [k: string]: unknown;
      },
      {
        min: 40;
        max: 42;
        [k: string]: unknown;
      },
      {
        min: 43;
        max: 45;
        [k: string]: unknown;
      }
    ];
  description?: MarkdownString;
  suggestions?: Suggestions;
  source: Source17;
  name_oracle?: OracleTableId4;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteDomainFeatureRow".
 */
export interface DelveSiteDomainFeatureRow {
  id?: DomainFeatureRowId1;
  /**
   * Low end of the dice range for this table row.
   */
  min: number;
  /**
   * High end of the dice range for this table row.
   */
  max: number;
  icon?: SvgImageUrl;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableId;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteDomainDangerRow".
 */
export interface DelveSiteDomainDangerRow {
  id?: DomainDangerRowId1;
  /**
   * Low end of the dice range for this table row.
   */
  min: number;
  /**
   * High end of the dice range for this table row.
   */
  max: number;
  icon?: SvgImageUrl;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableId;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source17 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * A delve site theme card.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteTheme".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^([a-z][a-z_]*)$".
 */
export interface DelveSiteTheme {
  id?: DelveSiteThemeId1;
  name: Label46;
  canonical_name?: Label47;
  icon?: SvgImageUrl;
  summary: MarkdownString;
  features: DelveSiteThemeFeatureRow[] &
    [
      {
        min: 1;
        max: 4;
        [k: string]: unknown;
      },
      {
        min: 5;
        max: 8;
        [k: string]: unknown;
      },
      {
        min: 9;
        max: 12;
        [k: string]: unknown;
      },
      {
        min: 13;
        max: 16;
        [k: string]: unknown;
      },
      {
        min: 17;
        max: 20;
        [k: string]: unknown;
      }
    ];
  dangers: DelveSiteThemeDangerRow[] &
    [
      {
        min: 1;
        max: 5;
        [k: string]: unknown;
      },
      {
        min: 6;
        max: 10;
        [k: string]: unknown;
      },
      {
        min: 11;
        max: 12;
        [k: string]: unknown;
      },
      {
        min: 13;
        max: 14;
        [k: string]: unknown;
      },
      {
        min: 15;
        max: 16;
        [k: string]: unknown;
      },
      {
        min: 17;
        max: 18;
        [k: string]: unknown;
      },
      {
        min: 19;
        max: 20;
        [k: string]: unknown;
      },
      {
        min: 21;
        max: 22;
        [k: string]: unknown;
      },
      {
        min: 23;
        max: 24;
        [k: string]: unknown;
      },
      {
        min: 25;
        max: 26;
        [k: string]: unknown;
      },
      {
        min: 27;
        max: 28;
        [k: string]: unknown;
      },
      {
        min: 29;
        max: 30;
        [k: string]: unknown;
      }
    ];
  description?: MarkdownString;
  suggestions?: Suggestions;
  source: Source18;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteThemeFeatureRow".
 */
export interface DelveSiteThemeFeatureRow {
  id?: ThemeFeatureRowId1;
  /**
   * Low end of the dice range for this table row.
   */
  min: number;
  /**
   * High end of the dice range for this table row.
   */
  max: number;
  icon?: SvgImageUrl;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableId;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "DelveSiteThemeDangerRow".
 */
export interface DelveSiteThemeDangerRow {
  id?: ThemeDangerRowId1;
  /**
   * Low end of the dice range for this table row.
   */
  min: number;
  /**
   * High end of the dice range for this table row.
   */
  max: number;
  icon?: SvgImageUrl;
  result: MarkdownString;
  summary?: MarkdownString;
  description?: MarkdownString;
  template?: OracleRollTemplate;
  rolls?: OracleTableRoll[];
  embed_table?: OracleTableId;
  suggestions?: Suggestions;
  i18n?: I18NHints;
}
/**
 * Attribution for the original source (such as a book or website) of this item, including the author and licensing information.
 */
export interface Source18 {
  title: Title;
  /**
   * The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.
   */
  date: string;
  /**
   * The page number where this item is described in full.
   */
  page?: number;
  /**
   * @minItems 1
   */
  authors: [
    {
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    },
    ...{
      name: string;
      /**
       * An optional URL for the author's website.
       */
      url?: string;
      email?: Email;
    }[]
  ];
  license: License;
  /**
   * An absolute URL where the source document is available.
   */
  url: string;
}
/**
 * Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.
 *
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Ruleset".
 */
export interface Ruleset {
  id: RulesetId;
  datasworn_version?: SemanticVersion;
  package_type: "ruleset";
  rules?: Rules;
  /**
   * A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.
   */
  oracles?: {
    [k: string]: OracleCollection;
  };
  /**
   * A dictionary object containing asset types, which contain assets.
   */
  assets?: {
    [k: string]: AssetType;
  };
  /**
   * A dictionary object containing atlas collections, which contain atlas entries.
   */
  atlas?: {
    [k: string]: Atlas;
  };
  /**
   * A dictionary object containing move categories, which contain moves.
   */
  moves?: {
    [k: string]: MoveCategory;
  };
  /**
   * A dictionary object containing NPC collections, which contain NPCs.
   */
  npcs?: {
    [k: string]: NpcCollection;
  };
  /**
   * A dictionary object containing rarities, like those presented in Ironsworn: Delve.
   */
  rarities?: {
    [k: string]: Rarity;
  };
  /**
   * A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve
   */
  delve_sites?: {
    [k: string]: DelveSite;
  };
  /**
   * A dictionary object containing delve site domains.
   */
  site_domains?: {
    [k: string]: DelveSiteDomain;
  };
  /**
   * A dictionary object containing delve site themes.
   */
  site_themes?: {
    [k: string]: DelveSiteTheme;
  };
  /**
   * A dictionary object of truth categories.
   */
  truths?: {
    [k: string]: Truth;
  };
}
/**
 * This interface was referenced by `DataswornSource`'s JSON-Schema
 * via the `definition` "Expansion".
 */
export interface Expansion {
  id: ExpansionId;
  datasworn_version?: SemanticVersion;
  package_type: "expansion";
  ruleset: RulesetId;
  rules?: Rules;
  /**
   * A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.
   */
  oracles?: {
    [k: string]: OracleCollection;
  };
  /**
   * A dictionary object containing asset types, which contain assets.
   */
  assets?: {
    [k: string]: AssetType;
  };
  /**
   * A dictionary object containing atlas collections, which contain atlas entries.
   */
  atlas?: {
    [k: string]: Atlas;
  };
  /**
   * A dictionary object containing move categories, which contain moves.
   */
  moves?: {
    [k: string]: MoveCategory;
  };
  /**
   * A dictionary object containing NPC collections, which contain NPCs.
   */
  npcs?: {
    [k: string]: NpcCollection;
  };
  /**
   * A dictionary object containing rarities, like those presented in Ironsworn: Delve.
   */
  rarities?: {
    [k: string]: Rarity;
  };
  /**
   * A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve
   */
  delve_sites?: {
    [k: string]: DelveSite;
  };
  /**
   * A dictionary object containing delve site domains.
   */
  site_domains?: {
    [k: string]: DelveSiteDomain;
  };
  /**
   * A dictionary object containing delve site themes.
   */
  site_themes?: {
    [k: string]: DelveSiteTheme;
  };
  /**
   * A dictionary object of truth categories.
   */
  truths?: {
    [k: string]: Truth;
  };
}
