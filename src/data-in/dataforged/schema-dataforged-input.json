{
	"$schema": "http://json-schema.org/draft-07/schema",
	"title": "Dataforged data entry",
	"description": "Data entry schema for Dataforged, which provides templates and other conveniences like source inheritance. It must be processed into the standard Dataforged format.",
	"$defs": {
		"ID": {
			"title": "Id",
			"type": "string",
			"$comment": "{namespace}/{element}/{*}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/(\\/[a-z][a-z_]*[a-z]){2,}$"
		},
		"Ruleset": {
			"title": "Ruleset",
			"type": "string",
			"enum": ["classic", "starforged"]
		},
		"Title": {
			"title": "Title",
			"type": "object",
			"required": ["canonical"],
			"additionalProperties": false,
			"properties": {
				"canonical": { "$ref": "#/$defs/Label" },
				"standard": { "$ref": "#/$defs/Label" },
				"short": { "$ref": "#/$defs/Label" }
			}
		},
		"Color": {
			"title": "Color",
			"type": "string",
			"pattern": "^#([0-9A-f]{2}){3}$",
			"description": "A CSS hex color. Use it to provide thematic accents when rendering this item."
		},
		"Icon": {
			"title": "Icon",
			"type": "string",
			"format": "url",
			"description": "A relative URI pointing to an SVG icon.",
			"pattern": "^.+\\.svg$"
		},
		"Image": {
			"title": "Image",
			"type": "string",
			"format": "url",
			"description": "A relative URI pointing to a WEBP image.",
			"pattern": "^.+\\.webp$"
		},
		"Source": {
			"title": "Source",
			"type": "object",
			"description": "Metadata describing the source of this item's text content ",
			"required": ["title", "url", "authors", "date", "license"],
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"url": {
					"type": "string",
					"description": "The URI where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": { "type": "string", "examples": ["Shawn Tomkin"] }
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"type": ["string", "null"],
					"description": "An absolute URI pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					]
				}
			}
		},
		"Label": {
			"title": "Label",
			"type": "string",
			"description": "A localized plain text name or label."
		},
		"MarkdownPhrase": {
			"title": "Markdown phrase",
			"type": "string",
			"description": "Localized markdown text, usually a phrase or single sentence."
		},
		"MarkdownSentences": {
			"title": "Markdown sentences",
			"type": "string",
			"description": "Localized markdown text, usually a few sentences at most."
		},
		"MarkdownParagraph": {
			"title": "Markdown paragraph",
			"type": "string",
			"description": "Localized markdown text, usually one paragraph. This may included ordered or unordered lists."
		},
		"MarkdownParagraphs": {
			"title": "Markdown paragraphs",
			"type": "string",
			"description": "Localized markdown text, usually multiple paragraphs. This may include ordered or unordered lists."
		},
		"ChallengeRank": {
			"title": "Challenge rank",
			"type": "integer",
			"description": "Enumerates challenge ranks: 1=troublesome; 2=dangerous; 3=formidable; 4=extreme; 5=epic.",
			"enum": [1, 2, 3, 4, 5]
		},
		"AssetID": {
			"title": "Asset ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"Asset": {
			"title": "Asset",
			"type": "object",
			"required": ["name", "abilities"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/$defs/AssetID" },
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/Attribute" }
					}
				},
				"name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"attachments": { "$ref": "#/$defs/AssetAttachment" },
				"requirement": { "$ref": "#/$defs/MarkdownPhrase" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"abilities": {
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": { "$ref": "#/$defs/AssetAbility" }
				},
				"_source": { "$ref": "#/$defs/SourcePartial" }
			}
		},
		"AssetAttachment": {
			"title": "Asset attachment",
			"description": "Describes which assets can be attached to this asset. The \"canonical\" example for this are Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"type": "object",
			"required": ["patterns", "max"],
			"properties": {
				"max": {
					"title": "Maximum attached assets",
					"description": "If there's no upper limit to the number of attached assets, this is `null`.",
					"type": ["integer", "null"],
					"minimum": 1,
					"default": null
				},
				"patterns": {
					"title": "Attached asset ID patterns",
					"description": "Regular expressions matching the IDs of assets that can be attached to this asset.",
					"type": "array",
					"items": {
						"type": "string",
						"format": "regex",
						"examples": [
							"^[a-z0-9][a-z0-9_]+\\/assets\\/module\\/[a-z][a-z_]*[a-z]$"
						]
					}
				}
			}
		},
		"AssetAbilityID": {
			"title": "Asset ability ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"AssetAbility": {
			"title": "Asset ability",
			"type": "object",
			"required": ["text"],
			"properties": {
				"_id": { "$ref": "#/$defs/AssetAbilityID" },
				"name": { "$ref": "#/$defs/Label" },
				"text": { "$ref": "#/$defs/MarkdownParagraph" },
				"attachments": { "$ref": "#/$defs/AssetAttachment" },
				"moves": {
					"type": "object",
					"additionalProperties": false,
					"nullable": true,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/Move" }
					}
				}
			}
		},
		"OracleTableID": {
			"title": "Oracle table ID",
			"type": "string",
			"$comment": "{namespace}/oracles/{...collections}/{oracle}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}$"
		},
		"OracleTableColumn": {
			"title": "Oracle table column",
			"type": "object",
			"required": ["content_type"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range. 'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/$defs/Label" }
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/$defs/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/$defs/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/$defs/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/$defs/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleCollectionColumn": {
			"title": "Oracle collection column",
			"type": "object",
			"required": ["content_type", "table_key"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range. 'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/$defs/Label" },
				"table_key": {
					"description": "A key from OracleCollection#contents, indicating which OracleTable's data is used in this column.",
					"type": "string",
					"pattern": "^[a-z][a-z_]*[a-z]$"
				},
				"color": { "$ref": "#/$defs/Color" }
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/$defs/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/$defs/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/$defs/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/$defs/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleTableRendering": {
			"title": "Oracle table rendering",
			"type": "object",
			"additionalProperties": false,
			"default": {
				"style": "table",
				"columns": {
					"roll": { "content_type": "range", "label": "Roll" },
					"result": { "content_type": "result", "label": "Result" }
				}
			},
			"properties": {
				"style": {
					"type": "string",
					"description": "The style used to render this table in the source material.\n\n        * embed_as_column: This table appears as a column of a table handled by its OracleCollection parent.\n        * embed_in_row: This table appears in its entirety within the row of another table. Canonical examples appear in the Ironsworn Rulebook and Ironsworn: Delve.\n        * table: A standard table, typically with a roll column and a result column.\n        ",
					"enum": ["embed_as_column", "embed_in_row", "table"],
					"default": "table"
				},
				"icon": { "$ref": "#/$defs/Icon" },
				"color": { "$ref": "#/$defs/Color" },
				"columns": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/OracleTableColumn" }
					},
					"default": {
						"roll": { "content_type": "range", "label": "Roll" },
						"result": { "content_type": "result", "label": "Result" }
					}
				}
			}
		},
		"OracleTable": {
			"title": "Oracle table",
			"type": "object",
			"required": ["title", "table"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/$defs/OracleTableID" },
				"title": { "$ref": "#/$defs/Title" },
				"source": { "$ref": "#/$defs/Source" },
				"summary": { "$ref": "#/$defs/MarkdownSentences" },
				"description": { "$ref": "#/$defs/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"rendering": { "$ref": "#/$defs/OracleTableRendering" },
				"match": {
					"title": "Oracle match behavior",
					"description": "A handful of oracles have special behavior on a match.",
					"type": "object",
					"required": ["text"],
					"properties": { "text": { "$ref": "#/$defs/MarkdownSentences" } }
				},
				"table": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRow" }
				},
				"_source": { "$ref": "#/$defs/SourcePartial" }
			}
		},
		"OracleTableRoll": {
			"title": "OracleRoll",
			"type": "object",
			"description": "Parameters for an oracle roll.",
			"required": ["oracle"],
			"properties": {
				"oracle": {
					"default": null,
					"oneOf": [{ "type": "null" }, { "$ref": "#/$defs/OracleTableID" }]
				},
				"times": {
					"description": "The number of times to roll.",
					"type": ["integer"],
					"minimum": 1,
					"default": 1
				},
				"method": {
					"title": "Oracle roll method",
					"description": "\n      no_duplicates = Reroll duplicate OracleTableRows\n      allow_duplicates = Don't reroll duplicate OracleTableRows\n      make_it_worse = Don't reroll duplicate OracleTableRows; duplicates compound\n      ",
					"type": ["string", "null"],
					"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"],
					"default": "no_duplicates"
				}
			}
		},
		"OracleTableRowID": {
			"title": "Oracle table row ID",
			"type": "string",
			"$comment": "{namespace}/oracles/{*...collections/{oracle}/{low}-{high}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}\\/[0-9]{1,3}-[0-9]{1,3}$"
		},
		"OracleTableRow": {
			"title": "Oracle table row",
			"type": "object",
			"description": "Represents a row from an oracle table.",
			"required": ["low", "high", "result"],
			"properties": {
				"low": {
					"description": "The low end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"high": {
					"description": "The high end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"result": { "title": "Result text", "$ref": "#/$defs/MarkdownPhrase" },
				"summary": {
					"title": "Summary text",
					"description": "A secondary markdown string that must be presented to the user for the implementation to be complete, but may benefit from progressive disclosure (such as a collapsible element, popover/tooltip, etc).\n\n`null` is used in cases where an 'empty' `OracleTableRow.summary` exists (example: Starship Type, p. 326). In the book, these table cells are rendered with the text `--` (and this is the recommended placeholder for tabular display). For display as a single result (e.g. VTT roll output), however, `null` values can be safely omitted.",
					"anyOf": [{ "$ref": "#/$defs/MarkdownSentences" }, { "type": "null" }]
				},
				"embed_table": {
					"description": "A table to be rendered inside this table row.",
					"$ref": "#/$defs/OracleTableID"
				},
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"_id": { "$ref": "#/$defs/OracleTableRowID" }
			}
		},
		"StatID": {
			"title": "Stat ID",
			"type": "string",
			"description": "ID for a standard player character stat.",
			"enum": [
				"player/stats/edge",
				"player/stats/heart",
				"player/stats/iron",
				"player/stats/shadow",
				"player/stats/wits"
			]
		},
		"ConditionMeterID": {
			"title": "Condition meter ID",
			"type": "string",
			"description": "ID for a standard player character condition meter.",
			"enum": [
				"player/condition_meters/health",
				"player/condition_meters/spirit",
				"player/condition_meters/supply"
			]
		},
		"EncounterNatureStarforged": {
			"title": "Encounter nature (Starforged)",
			"type": "string",
			"examples": [
				"creature",
				"horror",
				"human",
				"machine",
				"monster",
				"vehicle"
			]
		},
		"EncounterStarforgedID": {
			"title": "Encounter (Starforged) ID",
			"type": "string",
			"$comment": "{namespace}/encounters/{encounter}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"EncounterID": {
			"title": "Encounter ID",
			"oneOf": [
				{
					"type": "string",
					"$comment": "{namespace}/encounters/{nature}/{encounter}",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){2}$"
				},
				{
					"type": "string",
					"$comment": "{namespace}/encounters/{encounter}",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){1}$"
				}
			]
		},
		"EncounterStarforged": {
			"title": "Encounter (Starforged)",
			"type": "object",
			"description": "An encounter entry similar to those in Chapter 4 of Ironsworn: Starforged.",
			"required": [
				"name",
				"nature",
				"summary",
				"rank",
				"features",
				"drives",
				"tactics",
				"description",
				"quest_starter"
			],
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"nature": { "$ref": "#/$defs/EncounterNatureStarforged" },
				"summary": { "$ref": "#/$defs/MarkdownSentences" },
				"rank": { "$ref": "#/$defs/ChallengeRank" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownPhrase" }
				},
				"drives": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownPhrase" }
				},
				"tactics": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownPhrase" }
				},
				"variants": {
					"title": "Encounter variants",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/EncounterVariantStarforged"
						}
					}
				},
				"description": { "$ref": "#/$defs/MarkdownParagraphs" },
				"quest_starter": {
					"description": "A localizable markdown string describing the quest starter associated with this item.",
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"source": { "$ref": "#/$defs/Source" },
				"_id": { "$ref": "#/$defs/EncounterStarforgedID" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"_source": { "$ref": "#/$defs/SourcePartial" }
			}
		},
		"EncounterVariantStarforged": {
			"title": "Encounter variant (Starforged)",
			"type": "object",
			"additionalProperties": false,
			"required": ["name", "nature", "rank", "description"],
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"nature": { "$ref": "#/$defs/EncounterNatureStarforged" },
				"rank": { "$ref": "#/$defs/ChallengeRank" },
				"description": { "$ref": "#/$defs/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/$defs/Suggestions" }
			}
		},
		"MoveID": {
			"title": "Move ID",
			"type": "string",
			"$comment": "{namespace}/moves/{moveCategory}/{move}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/moves(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"RollableStatID": {
			"title": "Rollable stat ID",
			"oneOf": [
				{ "$ref": "#/$defs/StatID" },
				{ "$ref": "#/$defs/ConditionMeterID" },
				{ "$ref": "#/$defs/ConditionMeterAlias" }
			]
		},
		"RollType": {
			"title": "Roll type",
			"type": "string",
			"enum": ["action_roll", "progress_roll"]
		},
		"RollMethod": {
			"title": "Roll method",
			"type": "string",
			"enum": ["any", "inherit", "highest", "lowest", "all"]
		},
		"TriggerOption": {
			"title": "Trigger option",
			"type": "object",
			"required": ["roll_type", "method", "using"],
			"additionalProperties": false,
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownPhrase" },
				"roll_type": { "$ref": "#/$defs/RollType" },
				"method": {
					"default": "any",
					"oneOf": [
						{ "$ref": "#/$defs/RollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"using": { "type": "array", "items": { "type": "string" } }
			},
			"oneOf": [
				{
					"properties": {
						"roll_type": { "const": "progress_roll" },
						"using": {
							"type": "array",
							"items": { "$ref": "#/$defs/ProgressType" }
						}
					}
				},
				{
					"properties": {
						"roll_type": { "const": "action_roll" },
						"using": {
							"type": "array",
							"items": { "$ref": "#/$defs/RollableStatID" }
						}
					}
				}
			]
		},
		"Trigger": {
			"title": "Trigger",
			"type": "object",
			"required": ["text"],
			"additionalProperties": false,
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownPhrase" },
				"options": {
					"type": "array",
					"nullable": true,
					"items": {
						"title": "Trigger option",
						"type": "object",
						"required": ["roll_type", "method", "using"],
						"additionalProperties": false,
						"properties": {
							"text": { "$ref": "#/$defs/MarkdownPhrase" },
							"roll_type": { "$ref": "#/$defs/RollType" },
							"method": {
								"default": "any",
								"oneOf": [
									{ "$ref": "#/$defs/RollMethod" },
									{ "$ref": "#/$defs/MoveOutcomeType" }
								]
							},
							"using": { "type": "array", "items": { "type": "string" } }
						},
						"oneOf": [
							{
								"properties": {
									"roll_type": { "const": "progress_roll" },
									"using": {
										"type": "array",
										"items": { "$ref": "#/$defs/ProgressType" }
									}
								}
							},
							{
								"properties": {
									"roll_type": { "const": "action_roll" },
									"using": {
										"type": "array",
										"items": { "$ref": "#/$defs/RollableStatID" }
									}
								}
							}
						]
					}
				}
			}
		},
		"Move": {
			"title": "Move",
			"type": "object",
			"required": ["text", "name", "trigger"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/$defs/MoveID" },
				"name": { "$ref": "#/$defs/Label" },
				"trigger": { "$ref": "#/$defs/Trigger" },
				"source": { "$ref": "#/$defs/Source" },
				"outcomes": { "$ref": "#/$defs/MoveOutcomes" },
				"text": { "$ref": "#/$defs/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"progress_move": {
					"description": "Whether or not the move is a Progress Move. Progress moves roll two challenge dice against a progress score.",
					"type": "boolean",
					"default": false,
					"nullable": true
				},
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/Attribute" }
					}
				},
				"_source": { "$ref": "#/$defs/SourcePartial" }
			},
			"oneOf": [
				{
					"properties": {
						"progress_move": { "const": true },
						"trigger": {
							"type": "object",
							"properties": {
								"options": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": { "roll_type": { "const": "progress_roll" } }
									}
								}
							}
						}
					}
				},
				{
					"properties": {
						"trigger": {
							"type": "object",
							"properties": {
								"options": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": { "roll_type": { "const": "action_roll" } }
									}
								}
							}
						}
					}
				}
			]
		},
		"MoveOutcomeType": {
			"title": "Move outcome type",
			"type": "string",
			"enum": ["miss", "weak_hit", "strong_hit"]
		},
		"MoveOutcome": {
			"title": "Move outcome",
			"type": "object",
			"required": ["text"],
			"properties": { "text": { "$ref": "#/$defs/MarkdownParagraph" } }
		},
		"MoveOutcomeMatchable": {
			"title": "Move outcome matchable",
			"type": "object",
			"required": ["text"],
			"allOf": [
				{ "$ref": "#/$defs/MoveOutcome" },
				{ "properties": { "match": { "$ref": "#/$defs/MoveOutcome" } } }
			]
		},
		"MoveOutcomes": {
			"title": "Move outcomes",
			"type": "object",
			"required": ["miss", "weak_hit", "strong_hit"],
			"properties": {
				"miss": { "$ref": "#/$defs/MoveOutcomeMatchable" },
				"weak_hit": { "$ref": "#/$defs/MoveOutcome" },
				"strong_hit": { "$ref": "#/$defs/MoveOutcomeMatchable" }
			}
		},
		"CustomStat": {
			"title": "Custom stat",
			"type": "object",
			"required": ["label", "options"],
			"properties": {
				"label": { "$ref": "#/$defs/Label" },
				"options": {
					"title": "Custom stat options",
					"type": "object",
					"required": [],
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/CustomStatOption" }
					}
				}
			},
			"additionalProperties": false
		},
		"OracleCollectionID": {
			"title": "Oracle collection ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/oracles(\\/[a-z][a-z_]*[a-z]){1,3}$"
		},
		"MoveCategoryID": {
			"title": "Move category ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/moves(\\/[a-z][a-z_]*[a-z]){1}$",
			"$comment": "{namespace}/collections/moves/{name}"
		},
		"AssetTypeID": {
			"title": "Asset type ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/assets(\\/[a-z][a-z_]*[a-z]){1}$",
			"$comment": "{namespace}/collections/assets/{name}"
		},
		"OracleCollection": {
			"title": "Oracle collection",
			"type": "object",
			"required": ["title", "contents"],
			"properties": {
				"_id": { "$ref": "#/$defs/OracleCollectionID" },
				"title": { "$ref": "#/$defs/Title" },
				"source": { "$ref": "#/$defs/Source" },
				"summary": { "$ref": "#/$defs/MarkdownSentences" },
				"description": { "$ref": "#/$defs/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/OracleTable" }
					}
				},
				"rendering": {
					"type": "object",
					"description": "Some oracle collections are rendered as a single table in the source material. If so, parameters for rendering that table are included here.",
					"properties": {
						"icon": { "$ref": "#/$defs/Icon" },
						"style": {
							"oneOf": [
								{ "enum": ["multi_table"], "type": "string" },
								{ "type": "null" }
							],
							"default": null
						},
						"columns": {
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*[a-z]$": {
									"description": "A column's default label is the title of the source table.",
									"$ref": "#/$defs/OracleCollectionColumn"
								}
							}
						}
					}
				},
				"collections": {
					"description": "OracleCollections contained by this OracleCollection.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/$defs/OracleCollection" },
								{ "$ref": "#/$defs/OracleCollectionExtension" }
							]
						}
					}
				},
				"_source": { "$ref": "#/$defs/SourcePartial" }
			}
		},
		"OracleCollectionExtension": {
			"title": "Oracle collection extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends"],
			"properties": {
				"_id": { "$ref": "#/$defs/OracleCollectionID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/$defs/OracleCollectionID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/OracleTable" }
					}
				}
			}
		},
		"AssetType": {
			"title": "Asset type",
			"type": "object",
			"required": ["title", "contents"],
			"properties": {
				"_id": { "$ref": "#/$defs/AssetTypeID" },
				"title": { "$ref": "#/$defs/Title" },
				"source": { "$ref": "#/$defs/Source" },
				"summary": { "$ref": "#/$defs/MarkdownSentences" },
				"description": { "$ref": "#/$defs/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/Asset" }
					}
				},
				"_source": { "$ref": "#/$defs/SourcePartial" }
			}
		},
		"AssetTypeExtension": {
			"title": "Asset type extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends"],
			"properties": {
				"_id": { "$ref": "#/$defs/AssetTypeID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/$defs/AssetTypeID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/Asset" }
					}
				}
			}
		},
		"MoveCategory": {
			"title": "Move category",
			"type": "object",
			"required": ["title", "contents"],
			"properties": {
				"_id": { "$ref": "#/$defs/MoveCategoryID" },
				"title": { "$ref": "#/$defs/Title" },
				"source": { "$ref": "#/$defs/Source" },
				"summary": { "$ref": "#/$defs/MarkdownSentences" },
				"description": { "$ref": "#/$defs/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/Move" }
					}
				},
				"_source": { "$ref": "#/$defs/SourcePartial" }
			}
		},
		"MoveCategoryExtension": {
			"title": "Move category extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends"],
			"properties": {
				"_id": { "$ref": "#/$defs/MoveCategoryID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/$defs/MoveCategoryID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/Move" }
					}
				}
			}
		},
		"SettingTruthOption": {
			"title": "Setting truth option",
			"required": ["quest_starter"],
			"additionalProperties": false,
			"type": "object",
			"properties": { "quest_starter": { "$ref": "#/$defs/MarkdownParagraph" } }
		},
		"SettingTruth": {
			"title": "Setting truth",
			"type": "object",
			"required": ["name"],
			"properties": {
				"_id": { "$ref": "#/$defs/ID" },
				"name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"_source": { "$ref": "#/$defs/SourcePartial" }
			}
		},
		"SettingTruthStarforged": {
			"title": "Setting truth (Starforged)",
			"type": "object",
			"allOf": [
				{ "$ref": "#/$defs/SettingTruth" },
				{
					"properties": {
						"options": {
							"type": "array",
							"items": { "$ref": "#/$defs/OracleTableRow" }
						}
					}
				}
			]
		},
		"CustomStatOption": {
			"title": "Custom stat option",
			"type": "object",
			"required": ["label", "value"],
			"properties": {
				"label": { "$ref": "#/$defs/Label" },
				"value": {
					"description": "The numeric value to be used as +stat when making an Action Roll.",
					"type": "integer",
					"minimum": 0
				}
			},
			"additionalProperties": false
		},
		"InputPosition": {
			"title": "Input position",
			"enum": [
				"card-top",
				"card-back",
				"card-bottom",
				"ability-1-right",
				"ability-2-right",
				"ability-3-right",
				"ability-1-bottom",
				"ability-2-bottom",
				"ability-3-bottom"
			],
			"type": "string"
		},
		"Attribute": {
			"title": "Attribute",
			"oneOf": [
				{ "$ref": "#/$defs/AttributeText" },
				{ "$ref": "#/$defs/AttributeNumeric" }
			]
		},
		"AttributeText": {
			"title": "Attribute text",
			"type": "object",
			"description": "A text attribute that accepts a user-provided string value. Recommended HTML element: <input type='text'>",
			"required": ["attribute_type", "label", "value"],
			"properties": {
				"label": { "$ref": "#/$defs/Label" },
				"attribute_type": { "type": "string", "const": "text" },
				"value": { "type": ["null", "string"], "default": null }
			}
		},
		"AttributePlayerStat": {
			"title": "Attribute player stat",
			"description": "An attribute with predefined options to pick a standard player character stat. Recommended HTML element: <select>",
			"allOf": [
				{ "$ref": "#/$defs/AttributeBase" },
				{
					"required": ["attribute_type", "position", "value", "options"],
					"properties": {
						"attribute_type": { "const": "player_stat" },
						"position": { "default": "card-top" },
						"value": {
							"oneOf": [{ "type": "null" }, { "$ref": "#/$defs/PlayerStatID" }],
							"default": null
						},
						"options": {
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*[a-z]$": {
									"type": "object",
									"properties": {
										"label": { "$ref": "#/$defs/Label" },
										"value": { "$ref": "#/$defs/PlayerStatID" }
									}
								}
							}
						}
					}
				}
			]
		},
		"AttributeSetter": {
			"title": "Attribute setter",
			"propertyNames": { "$ref": "#/$defs/AttributeID" },
			"patternProperties": { "^.*$": { "$ref": "#/$defs/PlayerStatID" } }
		},
		"ClockSegments": {
			"title": "Clock segments",
			"type": "integer",
			"enum": [4, 6, 8, 10]
		},
		"AttributeNumeric": {
			"title": "Attribute numeric",
			"type": "object",
			"required": ["attribute_type", "label", "min", "value", "max"],
			"additionalProperties": false,
			"properties": {
				"attribute_type": { "$ref": "#/$defs/AttributeNumericType" },
				"label": { "$ref": "#/$defs/Label" },
				"min": { "type": "integer" },
				"value": {
					"type": "integer",
					"maximum": { "$data": "1/max" },
					"minimum": { "$data": "1/min" }
				},
				"max": { "type": ["integer", "null"] }
			},
			"oneOf": [
				{
					"type": "object",
					"properties": {
						"attribute_type": { "const": "clock", "type": "string" },
						"min": { "const": 0, "type": "integer" },
						"value": {
							"default": 0,
							"type": "integer",
							"title": "Filled clock segments"
						},
						"max": {
							"$ref": "#/$defs/ClockSegments",
							"title": "Clock segments (total)"
						}
					}
				},
				{
					"type": "object",
					"properties": {
						"attribute_type": { "type": "string", "const": "condition_meter" },
						"min": { "const": 0, "type": "integer" },
						"value": { "default": 0, "type": "integer" },
						"max": { "type": "integer" }
					}
				},
				{
					"type": "object",
					"properties": {
						"attribute_type": { "type": "string", "const": "counter" },
						"min": { "const": 0, "type": "integer" },
						"value": { "default": 0, "type": "integer" },
						"max": { "type": ["integer", "null"], "default": null }
					}
				}
			]
		},
		"AttributeNumericType": {
			"title": "Attribute numeric type",
			"type": "string",
			"enum": ["condition_meter", "clock", "counter"]
		},
		"AttributeNumericOverride": {
			"title": "Attribute numeric override",
			"description": "Adjusts an existing numeric input, usually a condition meter",
			"type": "object",
			"additionalProperties": false,
			"required": ["_extends"],
			"properties": {
				"_extends": { "$ref": "#/$defs/AttributeID" },
				"min": { "type": "integer" },
				"max": { "type": "integer" },
				"value": { "type": "integer" }
			}
		},
		"AttributeImpact": {
			"title": "Attribute impact",
			"allOf": [
				{ "$ref": "#/$defs/AttributeBase" },
				{
					"required": ["attribute_type"],
					"properties": { "attribute_type": { "const": "impact" } }
				}
			]
		},
		"ConditionMeterAlias": {
			"title": "Condition meter alias",
			"type": "string",
			"description": "Tags used to group  non-player condition meters (for e.g. companions and vehicles) that are referenced by moves and other assets.",
			"enum": [
				"companion_health",
				"attached_asset_meter",
				"vehicle_integrity",
				"command_vehicle_integrity",
				"support_vehicle_integrity",
				"incidental_vehicle_integrity"
			]
		},
		"ProgressType": {
			"title": "Progress type",
			"type": "string",
			"description": "Standard progress track types found in Ironsworn: Starforged.",
			"enum": [
				"combat_progress",
				"vow_progress",
				"scene_challenge_progress",
				"expedition_progress",
				"connection_progress",
				"quests_legacy",
				"bonds_legacy",
				"discoveries_legacy"
			]
		},
		"Suggestions": {
			"title": "Suggestions",
			"description": "Related items that can be presented as useful shortcuts.",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"assets": {
					"title": "Suggested assets",
					"type": "array",
					"items": { "$ref": "#/$defs/AssetID" },
					"nullable": true
				},
				"moves": {
					"title": "Suggested moves",
					"type": "array",
					"items": { "$ref": "#/$defs/MoveID" },
					"nullable": true
				},
				"oracles": {
					"title": "Suggested oracle tables",
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableID" },
					"nullable": true
				},
				"encounters": {
					"title": "Suggested encounters",
					"type": "array",
					"items": { "$ref": "#/$defs/EncounterStarforgedID" }
				}
			}
		},
		"SourcePartial": {
			"description": "A source data stub that inherits data from ancestor elements during post-processing.",
			"type": "object",
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"url": {
					"type": "string",
					"description": "The URI where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": { "type": "string", "examples": ["Shawn Tomkin"] }
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"type": ["string", "null"],
					"description": "An absolute URI pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					]
				}
			}
		}
	},
	"type": "object",
	"additionalProperties": false,
	"patternProperties": {
		"^[a-z0-9][a-z0-9_]+$": {
			"title": "Namespace",
			"type": "object",
			"additionalProperties": false,
			"required": ["_ruleset", "_source"],
			"properties": {
				"_ruleset": { "const": "starforged" },
				"_source": {
					"$ref": "#/$defs/Source",
					"description": "Source information to be inherited by all eligible descendants. Descendant '_source' properties will override only the properties they specify; use the 'source' property if you'd prefer to replace the entire object."
				},
				"oracles": {
					"title": "Oracles",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/OracleCollection" }
					}
				},
				"moves": {
					"title": "Moves",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/$defs/MoveCategory" },
								{ "$ref": "#/$defs/MoveCategoryExtension" }
							]
						}
					}
				},
				"assets": {
					"title": "Assets",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/$defs/AssetType" },
								{ "$ref": "#/$defs/AssetTypeExtension" }
							]
						}
					}
				},
				"encounters": {
					"title": "Encounters",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/EncounterStarforged" }
					}
				},
				"setting_truths": {
					"title": "Setting truths",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/$defs/SettingTruthStarforged" }
					}
				}
			}
		}
	}
}
