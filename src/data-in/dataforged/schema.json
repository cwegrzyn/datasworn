{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Dataforged data entry",
	"description": "Data entry schema for Dataforged, which provides templates and other conveniences like source inheritance. It must be processed into the standard Dataforged format.",
	"definitions": {
		"ID": {
			"title": "Id",
			"type": "string",
			"$comment": "{namespace}/{element}/{*}",
			"pattern": "^[a-z0-9_]{3,}\\/(\\/[a-z_]+){2,}$"
		},
		"Ruleset": {
			"title": "Ruleset",
			"type": "string",
			"enum": ["classic", "starforged"]
		},
		"Color": {
			"title": "Color",
			"type": "string",
			"pattern": "^#([0-9A-f]{2}){3}$",
			"description": "A CSS hexadecimal color. Use it to provide thematic accents when rendering this item."
		},
		"Icon": {
			"title": "Icon",
			"type": "string",
			"format": "url",
			"description": "A relative URL pointing to an SVG icon.",
			"pattern": "^.+\\.svg$"
		},
		"Image": {
			"title": "Image",
			"type": "string",
			"format": "url",
			"description": "A relative URL pointing to a WEBP image.",
			"pattern": "^.+\\.webp$"
		},
		"Source": {
			"title": "Source",
			"type": "object",
			"description": "Metadata describing the source of this item's text content ",
			"required": ["title", "url", "authors", "date", "license"],
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"url": {
					"type": "string",
					"description": "The URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": { "type": "string", "examples": ["Shawn Tomkin"] }
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"type": ["string", "null"],
					"description": "An absolute URL pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					]
				}
			}
		},
		"Label": {
			"title": "Label",
			"type": "string",
			"description": "A localized plain text name or label."
		},
		"MarkdownPhrase": {
			"title": "Markdown phrase",
			"type": "string",
			"description": "Localized markdown text, usually a phrase or single sentence."
		},
		"MarkdownSentences": {
			"title": "Markdown sentences",
			"type": "string",
			"description": "Localized markdown text, usually a few sentences at most."
		},
		"MarkdownParagraph": {
			"title": "Markdown paragraph",
			"type": "string",
			"description": "Localized markdown text, usually one paragraph. This may included ordered or unordered lists."
		},
		"MarkdownParagraphs": {
			"title": "Markdown paragraphs",
			"type": "string",
			"description": "Localized markdown text, usually multiple paragraphs. This may include ordered or unordered lists."
		},
		"ChallengeRank": {
			"title": "Challenge rank",
			"type": "integer",
			"description": "Enumerates challenge ranks: 1=troublesome; 2=dangerous; 3=formidable; 4=extreme; 5=epic.",
			"enum": [1, 2, 3, 4, 5]
		},
		"AssetID": {
			"title": "Asset ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}$"
		},
		"AssetIDWildcard": {
			"title": "Asset id wildcard",
			"type": "string",
			"pattern": "^([a-z_]+|\\*)\\/assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)$"
		},
		"AssetOptionFieldID": {
			"title": "Asset option field ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/options\\/[a-z_]+$"
		},
		"AssetOptionFieldIDWildcard": {
			"title": "Asset option field id wildcard",
			"type": "string",
			"pattern": "^(\\*|[a-z0-9_]{3,})\\/assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/options\\/[a-z_]+$"
		},
		"AssetControlFieldID": {
			"title": "Asset control field ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/controls\\/[a-z_]+$"
		},
		"AssetControlFieldIDWildcard": {
			"title": "Asset control field id wildcard",
			"type": "string",
			"pattern": "^(\\*|[a-z0-9_]{3,})\\/assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/controls\\/[a-z_]+$"
		},
		"AssetOptionField": {
			"title": "Asset option field",
			"type": "object",
			"required": [],
			"additionalProperties": false,
			"properties": { "id": { "$ref": "#/definitions/AssetOptionFieldID" } },
			"oneOf": [
				{ "$ref": "#/definitions/TextField" },
				{ "$ref": "#/definitions/SelectFieldStat" }
			]
		},
		"AssetControlField": {
			"title": "Asset control field",
			"type": "object",
			"required": [],
			"properties": { "id": { "$ref": "#/definitions/AssetControlFieldID" } },
			"oneOf": [
				{ "$ref": "#/definitions/CheckboxField" },
				{ "$ref": "#/definitions/ConditionMeterField" },
				{ "$ref": "#/definitions/SelectFieldExtendAsset" }
			]
		},
		"AssetControlFieldExtension": {
			"title": "Asset control field extension",
			"description": "Override an existing asset control field. Currently, only extensions to asset condition meters are supported.",
			"type": "object",
			"oneOf": [
				{
					"additionalProperties": false,
					"properties": {
						"max": { "type": "integer", "nullable": true },
						"min": { "type": "integer", "nullable": true }
					}
				}
			]
		},
		"Asset": {
			"title": "Asset",
			"type": "object",
			"required": ["name", "abilities"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/AssetID" },
				"shared": {
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
					"type": "boolean"
				},
				"name": { "$ref": "#/definitions/Label" },
				"options": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/AssetOptionField" }
					}
				},
				"controls": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/AssetControlField" }
					}
				},
				"requirement": { "$ref": "#/definitions/MarkdownPhrase" },
				"abilities": {
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": { "$ref": "#/definitions/AssetAbility" }
				},
				"count_as_impact": {
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"type": "boolean",
					"default": false,
					"nullable": true
				},
				"source": { "$ref": "#/definitions/Source" },
				"attachments": { "$ref": "#/definitions/AssetAttachment" },
				"_source": { "$ref": "#/definitions/SourcePartial" }
			}
		},
		"AssetAttachment": {
			"title": "Asset attachment",
			"description": "Describes which assets can be attached to this asset. The \"canonical\" example for this are Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"type": "object",
			"required": ["assets"],
			"properties": {
				"max": {
					"title": "Maximum attached assets",
					"description": "Omitted if there's no upper limit to the number of attached assets.",
					"type": "integer",
					"minimum": 1,
					"nullable": true
				},
				"assets": {
					"title": "Attachable assets",
					"description": "Asset IDs (which may be wildcards) that may be attached to this asset",
					"type": "array",
					"items": { "$ref": "#/definitions/AssetIDWildcard" }
				}
			}
		},
		"AssetAbilityID": {
			"title": "Asset ability ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/[0-2]$"
		},
		"AssetAbilityOptionFieldID": {
			"title": "Asset ability option field ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/[0-2]\\/options\\/[a-z_]+$"
		},
		"AssetAbilityOptionField": {
			"title": "Asset ability option field",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/definitions/AssetAbilityOptionFieldID" }
			},
			"oneOf": [
				{ "$ref": "#/definitions/TextField" },
				{ "$ref": "#/definitions/CheckboxField" }
			]
		},
		"AssetAbilityControlFieldID": {
			"title": "Asset ability control field ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/abilities\\/[0-2]\\/controls\\/[a-z_]+$"
		},
		"AssetAbilityControlField": {
			"title": "Asset ability control field",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/definitions/AssetAbilityControlFieldID" }
			},
			"oneOf": [
				{ "$ref": "#/definitions/TextField" },
				{ "$ref": "#/definitions/CounterField" },
				{ "$ref": "#/definitions/ClockField" },
				{ "$ref": "#/definitions/CheckboxField" }
			]
		},
		"AssetAbility": {
			"title": "Asset ability",
			"type": "object",
			"required": ["text"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/AssetAbilityID" },
				"name": {
					"$ref": "#/definitions/Label",
					"type": "string",
					"nullable": true
				},
				"text": { "$ref": "#/definitions/MarkdownParagraph" },
				"enabled": { "type": "boolean", "default": false },
				"controls": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/AssetAbilityControlField" }
					}
				},
				"options": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/AssetAbilityOptionField" }
					}
				},
				"extend_asset": { "$ref": "#/definitions/AssetExtension" },
				"extend_moves": {
					"type": "array",
					"items": { "$ref": "#/definitions/MoveExtension" }
				},
				"moves": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/Move" }
					},
					"description": "Unique moves added by this asset ability."
				}
			}
		},
		"AssetTypeID": {
			"title": "Asset type ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/assets(\\/[a-z_]+){1}$",
			"examples": [
				"starforged/collections/assets/command_vehicle",
				"ironsworn/collections/assets/companion"
			]
		},
		"AssetType": {
			"title": "Asset type",
			"type": "object",
			"required": ["name", "contents"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/AssetTypeID" },
				"name": { "$ref": "#/definitions/Label" },
				"canonical_name": { "$ref": "#/definitions/Label" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"color": { "$ref": "#/definitions/Color" },
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/Asset" }
					},
					"description": "The elements contained by this collection."
				},
				"_source": { "$ref": "#/definitions/SourcePartial" }
			}
		},
		"AssetTypeExtension": {
			"title": "Asset type extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["extends"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/AssetTypeID" },
				"extends": {
					"$ref": "#/definitions/AssetTypeID",
					"description": "The ID of the collection to be extended."
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/Asset" }
					},
					"description": "Items to be added to the extended collection."
				}
			}
		},
		"ToggleField": {
			"title": "Toggle field",
			"type": "object",
			"required": ["label", "field_type", "choices"],
			"properties": {
				"id": { "type": "string" },
				"field_type": { "type": "string", "const": "toggle" },
				"label": { "$ref": "#/definitions/Label" },
				"choices": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": {
							"title": "Toggle field option",
							"type": "object",
							"required": ["id", "label", "value"],
							"properties": {
								"id": { "type": "string" },
								"label": { "$ref": "#/definitions/Label" },
								"value": { "$ref": "#/definitions/AssetExtension" }
							}
						}
					}
				}
			}
		},
		"AssetExtension": {
			"title": "Asset extension",
			"type": "object",
			"properties": {
				"controls": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/AssetControlFieldExtension" }
					}
				},
				"attachments": { "$ref": "#/definitions/AssetAttachment" },
				"count_as_impact": {
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"type": "boolean",
					"default": false,
					"nullable": true
				}
			}
		},
		"OracleCollectionID": {
			"title": "Oracle collection ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/oracles(\\/[a-z_]+){1,3}$",
			"examples": [
				"starforged/collections/oracles/core",
				"starforged/collections/oracles/character/names",
				"starforged/collections/oracles/planets/furnace/settlements"
			]
		},
		"OracleTableID": {
			"title": "Oracle table ID",
			"type": "string",
			"$comment": "{namespace}/oracles/{...collections}/{oracle}",
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/[a-z_]+){2,4}$",
			"examples": [
				"starforged/oracles/core/action",
				"starforged/oracles/character/names/given",
				"starforged/oracles/planets/furnace/settlements/terminus"
			]
		},
		"OracleTableColumn": {
			"title": "Oracle table column",
			"type": "object",
			"required": ["content_type"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range: 'low' to 'high'.\n\n'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/definitions/Label" }
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/definitions/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/definitions/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/definitions/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/definitions/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleCollectionColumn": {
			"title": "Oracle collection column",
			"type": "object",
			"required": ["content_type", "table_key"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range: 'low' to 'high'.\n\n'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/definitions/Label" },
				"table_key": {
					"description": "A key from OracleCollection#contents, indicating which OracleTable's data is used in this column.",
					"type": "string",
					"pattern": "^[a-z_]+$"
				},
				"color": { "$ref": "#/definitions/Color" }
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/definitions/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/definitions/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/definitions/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/definitions/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleTableRendering": {
			"title": "Oracle table rendering",
			"type": "object",
			"additionalProperties": false,
			"default": {
				"style": "table",
				"columns": {
					"roll": { "content_type": "range", "label": "Roll" },
					"result": { "content_type": "result", "label": "Result" }
				}
			},
			"properties": {
				"style": {
					"type": "string",
					"description": "The style used to render this table in the source material.\n\n        * embed_as_column: This table appears as a column of a table handled by its OracleCollection parent.\n        * embed_in_row: This table appears in its entirety within the row of another table. Canonical examples appear in the Ironsworn Rulebook and Ironsworn: Delve.\n        * table: A standard table, typically with a roll column and a result column.\n        ",
					"enum": ["embed_as_column", "embed_in_row", "table"],
					"default": "table"
				},
				"icon": { "$ref": "#/definitions/Icon" },
				"color": { "$ref": "#/definitions/Color" },
				"columns": {
					"type": "object",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/OracleTableColumn" }
					},
					"default": {
						"roll": { "content_type": "range", "label": "Roll" },
						"result": { "content_type": "result", "label": "Result" }
					}
				}
			}
		},
		"OracleTable": {
			"title": "Oracle table",
			"type": "object",
			"required": ["name", "table"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/OracleTableID" },
				"name": { "$ref": "#/definitions/Label" },
				"canonical_name": { "$ref": "#/definitions/Label" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"rendering": { "$ref": "#/definitions/OracleTableRendering" },
				"match": {
					"title": "Oracle match behavior",
					"description": "A handful of oracles have special behavior on a match.",
					"type": "object",
					"required": ["text"],
					"properties": {
						"text": { "$ref": "#/definitions/MarkdownSentences" }
					}
				},
				"table": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRow" }
				},
				"_source": { "$ref": "#/definitions/SourcePartial" }
			}
		},
		"OracleTableRoll": {
			"title": "Oracle table roll",
			"type": "object",
			"description": "Parameters for an oracle roll.",
			"properties": {
				"oracle": {
					"default": null,
					"oneOf": [
						{ "type": "null" },
						{ "$ref": "#/definitions/OracleTableID" }
					]
				},
				"times": {
					"description": "The number of times to roll.",
					"type": "integer",
					"minimum": 1,
					"default": 1
				},
				"method": { "$ref": "#/definitions/OracleTableRollMethod" }
			}
		},
		"OracleTableRollMethod": {
			"title": "Oracle table roll method",
			"description": "\n  no_duplicates = Reroll duplicate OracleTableRows\n  allow_duplicates = Don't reroll duplicate OracleTableRows\n  make_it_worse = Don't reroll duplicate OracleTableRows; duplicates compound.\n  ",
			"type": "string",
			"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"],
			"default": "no_duplicates"
		},
		"OracleTableRowID": {
			"title": "Oracle table row ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/[a-z_]+){2,4}\\/[0-9]{1,3}-[0-9]{1,3}$",
			"examples": ["ironsworn/oracles/action_and_theme/action/1-1"]
		},
		"OracleTableRow": {
			"title": "Oracle table row",
			"type": "object",
			"description": "Represents a row from an oracle table.",
			"required": ["low", "high", "result"],
			"additionalProperties": false,
			"properties": {
				"low": {
					"description": "The low end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"high": {
					"description": "The high end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"result": {
					"title": "Result text",
					"$ref": "#/definitions/MarkdownPhrase"
				},
				"icon": { "$ref": "#/definitions/Icon" },
				"summary": {
					"$ref": "#/definitions/MarkdownSentences",
					"title": "Summary text",
					"description": "A secondary markdown string that must be presented to the user for the implementation to be complete, but may benefit from progressive disclosure (such as a collapsible element, popover/tooltip, etc).\n\n`null` is used in cases where an 'empty' `OracleTableRow#summary` exists (example: Starship Type, Starforged rulebook p. 326). In the book, these table cells are rendered with the text `--` (and this is the recommended placeholder for tabular display). For display as a single result (e.g. VTT roll output), however, `null` values can be safely omitted.",
					"type": "string",
					"nullable": true
				},
				"description": {
					"$ref": "#/definitions/MarkdownParagraphs",
					"title": "Extended description",
					"description": "An extended description for this oracle table row. No canonical OracleTableRows use it, but some TruthOptions do."
				},
				"embed_table": {
					"$ref": "#/definitions/OracleTableID",
					"description": "A table to be rendered inside this table row."
				},
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRoll" },
					"nullable": true
				},
				"template": { "$ref": "#/definitions/OracleRollTemplate" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"id": { "$ref": "#/definitions/OracleTableRowID" }
			},
			"oneOf": [
				{
					"title": "OracleTableRowStub",
					"properties": { "low": { "const": null }, "high": { "const": null } }
				},
				{
					"properties": {
						"low": { "type": "integer" },
						"high": { "type": "integer" }
					}
				}
			]
		},
		"OracleRollTemplate": {
			"title": "Oracle roll template",
			"type": "object",
			"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.\n\nThese strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.",
			"properties": {
				"result": {
					"$ref": "#/definitions/MarkdownPhrase",
					"description": "A string template that may be used in place of OracleTableRow#result.",
					"examples": [
						"{{result:starforged/oracles/factions/affiliation}} of the {{result:starforged/oracles/factions/legacy}} {{result:starforged/oracles/factions/identity}}"
					]
				},
				"summary": {
					"$ref": "#/definitions/MarkdownSentences",
					"description": "A string template that may be used in place of OracleTableRow#summary."
				},
				"description": {
					"$ref": "#/definitions/MarkdownParagraphs",
					"description": "A string template that may be used in place of OracleTableRow#description."
				}
			}
		},
		"OracleCollection": {
			"title": "Oracle collection",
			"type": "object",
			"required": ["name", "contents"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/OracleCollectionID" },
				"name": { "$ref": "#/definitions/Label" },
				"canonical_name": { "$ref": "#/definitions/Label" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"color": { "$ref": "#/definitions/Color" },
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/OracleTable" }
					},
					"description": "The elements contained by this collection."
				},
				"_template": { "type": "string" },
				"template": { "$ref": "#/definitions/OracleRollTemplate" },
				"rendering": {
					"type": "object",
					"description": "Some oracle collections are rendered as a single table in the source material. If so, parameters for rendering that table are included here.",
					"properties": {
						"icon": { "$ref": "#/definitions/Icon" },
						"style": {
							"oneOf": [
								{ "enum": ["multi_table"], "type": "string" },
								{ "type": "null" }
							],
							"default": null
						},
						"columns": {
							"type": "object",
							"patternProperties": {
								"^[a-z_]+$": {
									"description": "A column's default label is the title of the source table.",
									"$ref": "#/definitions/OracleCollectionColumn"
								}
							}
						}
					}
				},
				"sample_names": { "type": "array", "items": { "type": "string" } },
				"collections": {
					"description": "OracleCollections contained by this OracleCollection.",
					"type": "object",
					"patternProperties": {
						"^[a-z_]+$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				},
				"_source": { "$ref": "#/definitions/SourcePartial" }
			},
			"oneOf": [
				{
					"not": {
						"required": ["_template"],
						"properties": { "_template": { "type": "string" } }
					}
				},
				{ "$ref": "#/definitions/OracleCollectionTemplate" }
			]
		},
		"OracleCollectionExtension": {
			"title": "Oracle collection extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["extends"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/OracleCollectionID" },
				"extends": {
					"$ref": "#/definitions/OracleCollectionID",
					"description": "The ID of the collection to be extended."
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/OracleTable" }
					},
					"description": "Items to be added to the extended collection."
				},
				"collections": {
					"type": "object",
					"description": "Collections (and/or collection extensions) to be added to the extended collection.",
					"patternProperties": {
						"^[a-z_]+$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				}
			},
			"oneOf": [
				{
					"not": {
						"required": ["_template"],
						"properties": { "_template": { "type": "string" } }
					}
				},
				{ "$ref": "#/definitions/OracleCollectionTemplate" }
			]
		},
		"PlayerStat": {
			"title": "Player stat",
			"type": "string",
			"description": "A standard player character stat.",
			"enum": ["edge", "heart", "iron", "shadow", "wits"]
		},
		"PlayerConditionMeter": {
			"title": "Player condition meter",
			"type": "string",
			"description": "A standard player character condition meter.",
			"enum": ["health", "spirit", "supply"]
		},
		"PlayerConditionMeterID": {
			"title": "Player condition meter ID",
			"type": "string",
			"description": "ID for a standard player character condition meter.",
			"enum": [
				"player/condition_meters/health",
				"player/condition_meters/spirit",
				"player/condition_meters/supply"
			]
		},
		"EncounterNatureStarforged": {
			"title": "Encounter nature (Starforged)",
			"type": "string",
			"examples": [
				"creature",
				"horror",
				"human",
				"machine",
				"monster",
				"vehicle"
			]
		},
		"EncounterStarforgedID": {
			"title": "Encounter (Starforged) ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/encounters\\/[a-z_]+(\\/variants\\/[a-z_]+)?$",
			"examples": [
				"starforged/encounters/chiton",
				"starforged/encounters/chiton/variants/chiton_drone_pack"
			]
		},
		"EncounterID": {
			"title": "Encounter ID",
			"oneOf": [
				{
					"type": "string",
					"pattern": "^[a-z0-9_]{3,}\\/encounters(\\/[a-z_]+){2}$",
					"examples": [
						"ironsworn/encounters/firstborn/elf",
						"ironsworn_delve/encounters/anomalies/glimmer"
					]
				},
				{
					"type": "string",
					"pattern": "^[a-z0-9_]{3,}\\/encounters\\/[a-z_]+(\\/variants\\/[a-z_]+)?$",
					"examples": [
						"starforged/encounters/chiton",
						"starforged/encounters/chiton/variants/chiton_drone_pack"
					]
				}
			]
		},
		"EncounterStarforged": {
			"title": "Encounter (Starforged)",
			"type": "object",
			"description": "An encounter entry similar to those in Chapter 4 of Ironsworn: Starforged.",
			"required": [
				"name",
				"nature",
				"summary",
				"rank",
				"features",
				"drives",
				"tactics",
				"description",
				"quest_starter"
			],
			"properties": {
				"name": { "$ref": "#/definitions/Label" },
				"nature": { "$ref": "#/definitions/EncounterNatureStarforged" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"rank": { "$ref": "#/definitions/ChallengeRank" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"drives": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"tactics": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"variants": {
					"title": "Encounter variants",
					"type": "object",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/EncounterVariantStarforged" }
					}
				},
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"quest_starter": {
					"description": "A localizable markdown string describing the quest starter associated with this item.",
					"$ref": "#/definitions/MarkdownParagraphs"
				},
				"source": { "$ref": "#/definitions/Source" },
				"id": { "$ref": "#/definitions/EncounterStarforgedID" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"_source": { "$ref": "#/definitions/SourcePartial" }
			}
		},
		"EncounterVariantStarforged": {
			"title": "Encounter variant (Starforged)",
			"type": "object",
			"additionalProperties": false,
			"required": ["name", "nature", "rank", "description"],
			"properties": {
				"name": { "$ref": "#/definitions/Label" },
				"nature": { "$ref": "#/definitions/EncounterNatureStarforged" },
				"rank": { "$ref": "#/definitions/ChallengeRank" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" }
			}
		},
		"MoveID": {
			"title": "Move ID",
			"type": "string",
			"description": "A move ID, for a standard move or a unique asset move",
			"pattern": "^[a-z0-9_]{3,}\\/(moves\\/[a-z_]+\\/[a-z_]+|assets\\/[a-z_]+\\/[a-z_]+\\/moves\\/[a-z_]+)$",
			"examples": [
				"starforged/moves/combat/strike",
				"starforged/assets/module/grappler/moves/ready_grappler"
			]
		},
		"MoveIDWildcard": {
			"title": "Move ID (with wildcard)",
			"type": "string",
			"description": "A move ID with wildcards",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/(moves\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)|assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/moves\\/([a-z_]+|\\*))$",
			"examples": ["*/moves/*/face_danger", "*/assets/ritual/*/moves/*"]
		},
		"MoveCategoryID": {
			"title": "Move category ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/moves\\/[a-z_]+$",
			"examples": ["starforged/collections/moves/adventure"]
		},
		"MoveCategory": {
			"title": "Move category",
			"type": "object",
			"required": ["name", "contents"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/MoveCategoryID" },
				"name": { "$ref": "#/definitions/Label" },
				"canonical_name": { "$ref": "#/definitions/Label" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"color": { "$ref": "#/definitions/Color" },
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/Move" }
					},
					"description": "The elements contained by this collection."
				},
				"_source": { "$ref": "#/definitions/SourcePartial" }
			}
		},
		"MoveCategoryExtension": {
			"title": "Move category extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["extends"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/MoveCategoryID" },
				"extends": {
					"$ref": "#/definitions/MoveCategoryID",
					"description": "The ID of the collection to be extended."
				},
				"contents": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/Move" }
					},
					"description": "Items to be added to the extended collection."
				}
			}
		},
		"MoveOutcomeType": {
			"title": "Move outcome type",
			"type": "string",
			"enum": ["miss", "weak_hit", "strong_hit"]
		},
		"MoveRollType": {
			"title": "Move roll type",
			"type": "string",
			"enum": ["action_roll", "progress_roll"]
		},
		"MoveRollMethod": {
			"title": "Move roll method",
			"type": "string",
			"enum": ["any", "highest", "lowest", "all"],
			"description": "`any`: When rolling with this move trigger option, the player picks which stat to use.\n\n`all`: When rolling with this move trigger option, *every* stat or progress track of the `using` key is rolled.\n\n`highest`: When rolling with this move trigger option, use the highest/best option from the `using` key.\n\n`lowest`: When rolling with this move trigger option, use the lowest/worst option from the `using` key."
		},
		"TriggerRollOptionActionChoiceRef": {
			"title": "Trigger roll option action choice ref",
			"description": "An action roll that references a value provided by an asset",
			"type": "object",
			"required": ["ref", "using"],
			"properties": {
				"using": { "const": "ref", "type": "string" },
				"ref": {
					"description": "Identifies the stat whose value is to be referenced.",
					"oneOf": [
						{ "$ref": "#/definitions/AssetControlFieldIDWildcard" },
						{ "$ref": "#/definitions/AssetOptionFieldIDWildcard" }
					]
				}
			}
		},
		"TriggerRollOptionActionChoiceStat": {
			"title": "Trigger roll option action choice stat",
			"required": ["using"],
			"type": "object",
			"properties": {
				"using": {
					"oneOf": [
						{ "$ref": "#/definitions/PlayerConditionMeter" },
						{ "$ref": "#/definitions/PlayerStat" }
					]
				}
			}
		},
		"TriggerRollOptionActionChoiceCustomValue": {
			"title": "Trigger roll option action choice custom value",
			"required": ["using", "label", "value"],
			"type": "object",
			"properties": {
				"label": { "$ref": "#/definitions/Label" },
				"using": { "type": "string", "const": "custom_value" },
				"value": { "type": "integer" }
			}
		},
		"TriggerRollOptionAction": {
			"title": "Trigger option",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"text": { "$ref": "#/definitions/MarkdownPhrase" },
				"method": {
					"default": "any",
					"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.\n\nIf this is `null`, this trigger option describes no rolls of its own, and should inherit the roll method of another trigger option the extended move.",
					"oneOf": [
						{ "$ref": "#/definitions/MoveRollMethod" },
						{ "$ref": "#/definitions/MoveOutcomeType" },
						{ "type": "null" }
					]
				},
				"choices": {
					"title": "Trigger option choices",
					"type": "array",
					"items": {
						"type": "object",
						"oneOf": [
							{ "$ref": "#/definitions/TriggerRollOptionActionChoiceStat" },
							{ "$ref": "#/definitions/TriggerRollOptionActionChoiceRef" },
							{
								"$ref": "#/definitions/TriggerRollOptionActionChoiceCustomValue"
							}
						]
					},
					"description": "The stat choices allowed by this trigger option.\n\nIf this is `null`, it should inherit the value of another trigger option for the extended move."
				},
				"by": {
					"title": "Triggered by",
					"type": "object",
					"description": "Information on who can trigger this trigger option. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
					"additionalProperties": false,
					"default": { "player": true, "ally": false },
					"required": ["player", "ally"],
					"properties": {
						"player": { "type": "boolean", "default": true },
						"ally": { "type": "boolean", "default": false }
					}
				}
			}
		},
		"TriggerRollOptionProgress": {
			"title": "Trigger option (progress move)",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"text": { "$ref": "#/definitions/MarkdownPhrase" },
				"method": {
					"default": "any",
					"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.\n\nIf this is `null`, this trigger option describes no rolls of its own, and should inherit the roll method of another trigger option the extended move.",
					"oneOf": [
						{ "$ref": "#/definitions/MoveRollMethod" },
						{ "$ref": "#/definitions/MoveOutcomeType" },
						{ "type": "null" }
					]
				},
				"choices": {
					"title": "Trigger option choices",
					"type": "array",
					"items": {
						"type": "object",
						"title": "Trigger choice (progress roll)",
						"description": "A choice belonging to a progress trigger option (which belongs in turn to a progress move).",
						"required": ["using"],
						"properties": { "using": { "$ref": "#/definitions/ProgressType" } }
					},
					"description": "The stat choices allowed by this trigger option.\n\nIf this is `null`, it should inherit the value of another trigger option for the extended move."
				},
				"by": {
					"title": "Triggered by",
					"type": "object",
					"description": "Information on who can trigger this trigger option. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
					"additionalProperties": false,
					"default": { "player": true, "ally": false },
					"required": ["player", "ally"],
					"properties": {
						"player": { "type": "boolean", "default": true },
						"ally": { "type": "boolean", "default": false }
					}
				}
			}
		},
		"Move": {
			"title": "Move",
			"type": "object",
			"required": ["name", "text", "trigger"],
			"additionalProperties": false,
			"properties": {
				"id": { "$ref": "#/definitions/MoveID" },
				"name": { "$ref": "#/definitions/Label" },
				"trigger": {
					"title": "Trigger",
					"description": "Describes a move's trigger conditions.",
					"type": "object",
					"required": ["text"],
					"properties": {
						"text": {
							"$ref": "#/definitions/MarkdownPhrase",
							"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#Options.",
							"type": "string",
							"pattern": "^.*\\.{3}$"
						},
						"roll_type": {
							"$ref": "#/definitions/MoveRollType",
							"default": "no_roll"
						}
					},
					"oneOf": [
						{
							"additionalProperties": false,
							"title": "Trigger (no roll)",
							"properties": { "text": {}, "roll_type": { "const": "no_roll" } }
						},
						{
							"additionalProperties": false,
							"title": "Trigger (action roll)",
							"required": ["roll_options", "roll_type"],
							"properties": {
								"text": {},
								"roll_type": { "const": "action_roll" },
								"roll_options": {
									"description": "Action roll options for triggering this move.",
									"type": "array",
									"items": {
										"title": "Trigger option",
										"type": "object",
										"additionalProperties": false,
										"properties": {
											"text": { "$ref": "#/definitions/MarkdownPhrase" },
											"method": {
												"default": "any",
												"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.\n\nIf this is `null`, this trigger option describes no rolls of its own, and should inherit the roll method of another trigger option the extended move.",
												"oneOf": [
													{ "$ref": "#/definitions/MoveRollMethod" },
													{ "$ref": "#/definitions/MoveOutcomeType" },
													{ "type": "null" }
												]
											},
											"choices": {
												"title": "Trigger option choices",
												"type": "array",
												"items": {
													"type": "object",
													"oneOf": [
														{
															"$ref": "#/definitions/TriggerRollOptionActionChoiceStat"
														},
														{
															"$ref": "#/definitions/TriggerRollOptionActionChoiceRef"
														},
														{
															"$ref": "#/definitions/TriggerRollOptionActionChoiceCustomValue"
														}
													]
												},
												"description": "The stat choices allowed by this trigger option.\n\nIf this is `null`, it should inherit the value of another trigger option for the extended move."
											},
											"by": {
												"title": "Triggered by",
												"type": "object",
												"description": "Information on who can trigger this trigger option. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
												"additionalProperties": false,
												"default": { "player": true, "ally": false },
												"required": ["player", "ally"],
												"properties": {
													"player": { "type": "boolean", "default": true },
													"ally": { "type": "boolean", "default": false }
												}
											}
										}
									}
								}
							}
						},
						{
							"additionalProperties": false,
							"title": "Trigger (progress move)",
							"required": ["roll_options", "roll_type"],
							"properties": {
								"text": {},
								"roll_type": { "const": "progress_roll" },
								"roll_options": {
									"title": "Trigger options (progress move)",
									"description": "Progress roll options for triggering this move.",
									"type": "array",
									"items": {
										"title": "Trigger option (progress move)",
										"type": "object",
										"additionalProperties": false,
										"properties": {
											"text": { "$ref": "#/definitions/MarkdownPhrase" },
											"method": {
												"default": "any",
												"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.\n\nIf this is `null`, this trigger option describes no rolls of its own, and should inherit the roll method of another trigger option the extended move.",
												"oneOf": [
													{ "$ref": "#/definitions/MoveRollMethod" },
													{ "$ref": "#/definitions/MoveOutcomeType" },
													{ "type": "null" }
												]
											},
											"choices": {
												"title": "Trigger option choices",
												"type": "array",
												"items": {
													"type": "object",
													"title": "Trigger choice (progress roll)",
													"description": "A choice belonging to a progress trigger option (which belongs in turn to a progress move).",
													"required": ["using"],
													"properties": {
														"using": { "$ref": "#/definitions/ProgressType" }
													}
												},
												"description": "The stat choices allowed by this trigger option.\n\nIf this is `null`, it should inherit the value of another trigger option for the extended move."
											},
											"by": {
												"title": "Triggered by",
												"type": "object",
												"description": "Information on who can trigger this trigger option. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
												"additionalProperties": false,
												"default": { "player": true, "ally": false },
												"required": ["player", "ally"],
												"properties": {
													"player": { "type": "boolean", "default": true },
													"ally": { "type": "boolean", "default": false }
												}
											}
										}
									}
								}
							}
						}
					]
				},
				"source": { "$ref": "#/definitions/Source" },
				"outcomes": {
					"title": "Move outcomes",
					"type": "object",
					"required": ["miss", "weak_hit", "strong_hit"],
					"properties": {
						"miss": {
							"type": "object",
							"required": ["text"],
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"nullable": true,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"nullable": true,
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						},
						"weak_hit": {
							"type": "object",
							"required": ["text"],
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"nullable": true,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								}
							}
						},
						"strong_hit": {
							"type": "object",
							"required": ["text"],
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"nullable": true,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"nullable": true,
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"text": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"_source": { "$ref": "#/definitions/SourcePartial" }
			}
		},
		"TriggerExtension": {
			"title": "Trigger extension",
			"type": "object",
			"additionalProperties": false,
			"required": ["roll_type", "roll_options"],
			"properties": {
				"roll_type": {
					"type": "string",
					"enum": ["action_roll", "progress_roll"]
				},
				"roll_options": { "type": "array" }
			},
			"oneOf": [
				{
					"properties": {
						"roll_type": { "const": "action_roll" },
						"roll_options": {
							"type": "array",
							"items": { "$ref": "#/definitions/TriggerRollOptionAction" }
						}
					}
				},
				{
					"properties": {
						"roll_type": { "const": "progress_roll" },
						"roll_options": {
							"type": "array",
							"items": { "$ref": "#/definitions/TriggerRollOptionProgress" }
						}
					}
				}
			]
		},
		"MoveExtension": {
			"title": "Move extension",
			"description": "Upgrades or otherwise modifies one or more moves.",
			"required": ["extends"],
			"type": "object",
			"properties": {
				"extends": {
					"description": "Move IDs affected by this move extension",
					"type": ["array", "null"],
					"items": { "$ref": "#/definitions/MoveID" },
					"nullable": true
				},
				"trigger": { "$ref": "#/definitions/TriggerExtension" },
				"text": { "$ref": "#/definitions/MarkdownParagraphs" },
				"outcomes": {
					"title": "Move outcomes",
					"type": "object",
					"properties": {
						"miss": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"nullable": true,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"nullable": true,
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						},
						"weak_hit": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"nullable": true,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								}
							}
						},
						"strong_hit": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"nullable": true,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"nullable": true,
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"collectionSchema": { "title": "Collection schema" },
		"collectionExtensionSchema": { "title": "Collection extension schema" },
		"CheckboxField": {
			"title": "Checkbox field",
			"type": "object",
			"required": ["field_type", "label"],
			"additionalProperties": false,
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "checkbox" },
				"value": { "type": "boolean", "default": false }
			}
		},
		"ClockField": {
			"title": "Clock field",
			"type": "object",
			"required": ["field_type", "label", "min", "max", "value"],
			"additionalProperties": false,
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "clock" },
				"value": { "type": "integer", "default": 0 },
				"min": { "type": "integer", "const": 0 },
				"max": { "type": "integer", "enum": [4, 6, 8, 10] }
			}
		},
		"ConditionMeterField": {
			"title": "Condition meter field",
			"type": "object",
			"required": ["field_type", "label", "min", "max", "value"],
			"additionalProperties": false,
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "condition_meter" },
				"value": { "type": "integer" },
				"min": { "type": "integer", "default": 0 },
				"max": { "type": "integer" }
			}
		},
		"CounterField": {
			"title": "Counter field",
			"type": "object",
			"required": ["field_type", "label", "min", "max"],
			"additionalProperties": false,
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "counter" },
				"value": { "type": "integer", "default": 0 },
				"min": { "type": "integer", "const": 0 },
				"max": { "type": ["integer", "null"], "default": null }
			}
		},
		"TextField": {
			"title": "Text field",
			"type": "object",
			"required": ["field_type", "label"],
			"additionalProperties": false,
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "text" },
				"value": { "type": "string", "nullable": true }
			}
		},
		"SelectFieldStat": {
			"title": "Select field stat",
			"type": "object",
			"required": ["label", "field_type", "choices"],
			"additionalProperties": false,
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "select_stat" },
				"value": { "type": "string", "nullable": true },
				"choices": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": {
							"required": ["label", "value"],
							"type": "object",
							"properties": {
								"label": { "$ref": "#/definitions/Label" },
								"selected": { "type": "boolean", "nullable": true },
								"value": { "$ref": "#/definitions/PlayerStat" }
							}
						}
					}
				}
			}
		},
		"SelectFieldNumber": {
			"title": "Select field number",
			"required": ["label", "field_type", "choices"],
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "select_number" },
				"value": { "type": "integer", "nullable": true },
				"choices": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": {
							"required": ["label", "value"],
							"type": "object",
							"properties": {
								"label": { "type": "string" },
								"selected": { "type": "boolean", "nullable": true },
								"value": { "type": "integer" }
							}
						}
					}
				}
			}
		},
		"SelectFieldRef": {
			"title": "Select field ref",
			"required": ["label", "field_type", "choices"],
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "select_ref" },
				"value": { "type": "string", "nullable": true },
				"choices": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": {
							"required": ["label", "value"],
							"type": "object",
							"properties": {
								"label": { "type": "string" },
								"selected": { "type": "boolean", "nullable": true },
								"value": { "type": "string" }
							}
						}
					}
				}
			}
		},
		"SelectFieldExtendAsset": {
			"title": "Select field extend asset",
			"required": ["label", "field_type", "choices"],
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/definitions/Label" },
				"field_type": { "type": "string", "const": "select_asset_extension" },
				"value": { "type": "object", "nullable": true },
				"choices": {
					"type": "object",
					"$comment": "Deserialize as a \"dictionary\"-like object.",
					"patternProperties": {
						"^[a-z_]+$": {
							"required": ["label", "value"],
							"type": "object",
							"properties": {
								"label": { "type": "string" },
								"selected": { "type": "boolean", "nullable": true },
								"value": { "$ref": "#/definitions/AssetExtension" }
							}
						}
					}
				}
			}
		},
		"OracleCollectionTemplate": {
			"title": "Oracle collection template",
			"type": "object",
			"oneOf": [
				{
					"type": "object",
					"required": ["_template", "contents"],
					"properties": {
						"_template": { "type": "string", "const": "LocationThemeOracles" },
						"contents": {
							"type": "object",
							"properties": {
								"feature": {
									"title": "LocationThemeFeatureOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemeFeatureOracle"
										},
										"table": {
											"type": "array",
											"minItems": 13,
											"maxItems": 13,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 1 },
														"high": { "type": "integer", "const": 8 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 9 },
														"high": { "type": "integer", "const": 16 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 17 },
														"high": { "type": "integer", "const": 24 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 25 },
														"high": { "type": "integer", "const": 32 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 33 },
														"high": { "type": "integer", "const": 40 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 41 },
														"high": { "type": "integer", "const": 48 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 49 },
														"high": { "type": "integer", "const": 56 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 57 },
														"high": { "type": "integer", "const": 64 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 65 },
														"high": { "type": "integer", "const": 72 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 73 },
														"high": { "type": "integer", "const": 80 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 81 },
														"high": { "type": "integer", "const": 88 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 89 },
														"high": { "type": "integer", "const": 96 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "integer", "const": 97 },
														"high": { "type": "integer", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "string",
											"default": "Use this table to reveal a new aspect of the location."
										}
									}
								},
								"peril": {
									"title": "LocationThemePerilOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemePerilOracle"
										},
										"table": {
											"type": "array",
											"minItems": 12,
											"maxItems": 12,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 1 },
														"high": { "type": "integer", "const": 9 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 10 },
														"high": { "type": "integer", "const": 18 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 19 },
														"high": { "type": "integer", "const": 27 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 28 },
														"high": { "type": "integer", "const": 36 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 37 },
														"high": { "type": "integer", "const": 45 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 46 },
														"high": { "type": "integer", "const": 54 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 55 },
														"high": { "type": "integer", "const": 63 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 64 },
														"high": { "type": "integer", "const": 72 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 73 },
														"high": { "type": "integer", "const": 81 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 82 },
														"high": { "type": "integer", "const": 90 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Action](starforged/oracles/core/action) + [Theme](starforged/oracles/core/theme)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/action"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/theme"
																		}
																	}
																}
															]
														},
														"low": { "type": "integer", "const": 91 },
														"high": { "type": "integer", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "Roll twice"
														},
														"rolls": {
															"type": "array",
															"minItems": 1,
															"maxItems": 1,
															"items": [
																{
																	"type": "object",
																	"required": ["times"],
																	"properties": {
																		"_template": { "type": "string" },
																		"times": { "type": "integer", "const": 2 }
																	}
																}
															]
														},
														"low": { "type": "integer", "const": 99 },
														"high": { "type": "integer", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "string",
											"default": "Use this table to help envision a complication or hazard."
										}
									}
								},
								"opportunity": {
									"title": "LocationThemeOpportunityOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemeOpportunityOracle"
										},
										"table": {
											"type": "array",
											"minItems": 5,
											"maxItems": 5,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 1 },
														"high": { "type": "integer", "const": 20 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 21 },
														"high": { "type": "integer", "const": 40 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 41 },
														"high": { "type": "integer", "const": 60 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 61 },
														"high": { "type": "integer", "const": 80 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 81 },
														"high": { "type": "integer", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "object",
											"default": {
												"canonical": "Opportunity",
												"summary": "Use this table to help envision a beneficial encounter or event, such as when rolling a strong hit with a match in a location."
											}
										}
									}
								}
							}
						}
					}
				},
				{
					"title": "PlanetOracles",
					"type": "object",
					"required": ["sample_names", "collections", "contents"],
					"properties": {
						"_template": { "type": "string", "const": "PlanetOracles" },
						"collections": {
							"type": "object",
							"required": ["settlements"],
							"properties": {
								"_template": { "type": "string" },
								"settlements": {
									"type": "object",
									"required": ["name", "contents"],
									"properties": {
										"_template": { "type": "string" },
										"name": { "type": "string", "const": "Settlements" },
										"contents": {
											"type": "object",
											"required": ["terminus", "outlands", "expanse"],
											"properties": {
												"_template": { "type": "string" },
												"terminus": {
													"type": "object",
													"required": ["table", "name"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"name": { "type": "string", "const": "Terminus" }
													}
												},
												"outlands": {
													"type": "object",
													"required": ["table", "name"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"name": { "type": "string", "const": "Outlands" }
													}
												},
												"expanse": {
													"type": "object",
													"required": ["table", "name"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"name": { "type": "string", "const": "Expanse" }
													}
												}
											}
										}
									}
								}
							}
						},
						"contents": {
							"type": "object",
							"required": [
								"atmosphere",
								"observed_from_space",
								"feature",
								"life"
							],
							"properties": {
								"_template": { "type": "string" },
								"atmosphere": {
									"type": "object",
									"required": ["name", "table"],
									"properties": {
										"_template": { "type": "string" },
										"name": { "type": "string", "const": "Atmosphere" },
										"table": {
											"type": "array",
											"minItems": 6,
											"maxItems": 6,
											"items": [
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "None / thin"
														}
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Toxic" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Corrosive" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Marginal" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "Breathable"
														}
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Ideal" }
													}
												}
											]
										}
									}
								},
								"observed_from_space": {
									"type": "object",
									"required": ["name", "table"],
									"properties": {
										"_template": { "type": "string" },
										"name": {
											"type": "string",
											"const": "Observed From Space"
										},
										"table": {
											"type": "array",
											"minItems": 10,
											"maxItems": 10,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 1 },
														"high": { "type": "integer", "const": 11 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 12 },
														"high": { "type": "integer", "const": 22 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 23 },
														"high": { "type": "integer", "const": 33 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 34 },
														"high": { "type": "integer", "const": 44 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 45 },
														"high": { "type": "integer", "const": 55 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 56 },
														"high": { "type": "integer", "const": 66 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 67 },
														"high": { "type": "integer", "const": 77 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 78 },
														"high": { "type": "integer", "const": 88 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "integer", "const": 89 },
														"high": { "type": "integer", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high", "result"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 99 },
														"high": { "type": "integer", "const": 100 },
														"result": {
															"type": "string",
															"const": "Precursor Vault (orbital)"
														}
													}
												}
											]
										}
									}
								},
								"feature": {
									"type": "object",
									"required": ["name", "table"],
									"properties": {
										"_template": { "type": "string" },
										"name": { "type": "string", "const": "Planetside Feature" },
										"table": {
											"type": "array",
											"minItems": 15,
											"maxItems": 15,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 1 },
														"high": { "type": "integer", "const": 7 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 8 },
														"high": { "type": "integer", "const": 14 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 15 },
														"high": { "type": "integer", "const": 21 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 22 },
														"high": { "type": "integer", "const": 28 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 29 },
														"high": { "type": "integer", "const": 35 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 36 },
														"high": { "type": "integer", "const": 42 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 43 },
														"high": { "type": "integer", "const": 49 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 50 },
														"high": { "type": "integer", "const": 56 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 57 },
														"high": { "type": "integer", "const": 63 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 64 },
														"high": { "type": "integer", "const": 70 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 71 },
														"high": { "type": "integer", "const": 77 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 78 },
														"high": { "type": "integer", "const": 84 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 85 },
														"high": { "type": "integer", "const": 91 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "integer", "const": 92 },
														"high": { "type": "integer", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high", "result"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "integer", "const": 99 },
														"high": { "type": "integer", "const": 100 },
														"result": {
															"type": "string",
															"const": "Precursor Vault (planetside)"
														}
													}
												}
											]
										}
									}
								},
								"life": {
									"type": "object",
									"required": ["name", "table"],
									"properties": {
										"_template": { "type": "string" },
										"name": { "type": "string", "const": "Life" },
										"table": {
											"type": "array",
											"minItems": 6,
											"maxItems": 6,
											"items": [
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "None" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Extinct" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Scarce" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Diverse" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Bountiful" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Overrun" }
													}
												}
											]
										}
									}
								}
							}
						},
						"sample_names": { "type": "array", "items": { "type": "string" } }
					}
				}
			]
		},
		"OracleTableTemplate": {
			"title": "Oracle table template",
			"type": "object",
			"oneOf": [
				{
					"title": "LocationOracle",
					"type": "object",
					"required": ["table"],
					"properties": {
						"_template": { "type": "string", "const": "LocationOracle" },
						"table": {
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": [
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Planetside" }
									}
								},
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Orbital" }
									}
								},
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Deep Space" }
									}
								}
							]
						}
					}
				}
			]
		},
		"ProgressType": {
			"title": "Progress type",
			"type": "string",
			"description": "Standard progress track types found in Ironsworn: Starforged.",
			"enum": [
				"combat_progress",
				"vow_progress",
				"scene_challenge_progress",
				"expedition_progress",
				"connection_progress",
				"quests_legacy",
				"bonds_legacy",
				"discoveries_legacy"
			]
		},
		"Suggestions": {
			"title": "Suggestions",
			"description": "Related items that can be presented as useful shortcuts.",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"assets": {
					"title": "Suggested assets",
					"type": "array",
					"items": { "$ref": "#/definitions/AssetIDWildcard" },
					"nullable": true
				},
				"moves": {
					"title": "Suggested moves",
					"type": "array",
					"items": { "$ref": "#/definitions/MoveID" },
					"nullable": true
				},
				"oracles": {
					"title": "Suggested oracle tables",
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableID" },
					"nullable": true
				},
				"encounters": {
					"title": "Suggested encounters",
					"type": "array",
					"items": { "$ref": "#/definitions/EncounterStarforgedID" }
				}
			}
		},
		"SettingTruthID": {
			"title": "Setting truth ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/[a-z_]+\\/setting_truths\\/[a-z_]+$",
			"examples": ["starforged/setting_truths/exodus"]
		},
		"SettingTruth": {
			"title": "Setting truth",
			"type": "object",
			"required": ["name"],
			"properties": {
				"id": { "$ref": "#/definitions/SettingTruthID" },
				"name": { "$ref": "#/definitions/Label" },
				"icon": { "$ref": "#/definitions/Icon" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"source": { "$ref": "#/definitions/Source" },
				"options": {
					"type": "array",
					"maxItems": 3,
					"minItems": 3,
					"items": { "$ref": "#/definitions/SettingTruthOption" }
				},
				"_source": { "$ref": "#/definitions/SourcePartial" }
			}
		},
		"SettingTruthOptionID": {
			"title": "Setting truth option ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/[a-z_]+\\/setting_truths\\/[a-z_]+\\/[0-2]$",
			"examples": ["starforged/setting_truths/exodus/0"]
		},
		"SettingTruthOption": {
			"title": "Setting truth option",
			"type": "object",
			"required": ["description", "quest_starter"],
			"properties": {
				"id": { "$ref": "#/definitions/SettingTruthOptionID" },
				"summary": { "$ref": "#/definitions/MarkdownPhrase" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"quest_starter": { "$ref": "#/definitions/MarkdownParagraph" }
			}
		},
		"SourcePartial": {
			"description": "A source data stub that inherits data from ancestor elements during post-processing.",
			"type": "object",
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"url": {
					"type": "string",
					"description": "The URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": { "type": "string", "examples": ["Shawn Tomkin"] }
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"type": ["string", "null"],
					"description": "An absolute URL pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					]
				}
			}
		}
	},
	"type": "object",
	"additionalProperties": false,
	"patternProperties": {
		"^[a-z0-9_]{3,}$": {
			"title": "Sourcebook (Ironsworn: Starforged)",
			"type": "object",
			"additionalProperties": false,
			"required": ["ruleset", "_source"],
			"properties": {
				"ruleset": {
					"description": "The ruleset (Starforged or Classic ironsworn) that these elements are for.",
					"const": "starforged"
				},
				"_source": {
					"$ref": "#/definitions/Source",
					"description": "Source information to be inherited by all eligible descendants. Descendant '_source' properties will override only the properties they specify; use the 'source' property if you'd prefer to replace the entire object."
				},
				"oracles": {
					"title": "Oracles",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z_]+$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				},
				"moves": {
					"title": "Moves",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z_]+$": {
							"oneOf": [
								{ "$ref": "#/definitions/MoveCategory" },
								{ "$ref": "#/definitions/MoveCategoryExtension" }
							]
						}
					}
				},
				"assets": {
					"title": "Assets",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z_]+$": {
							"oneOf": [
								{ "$ref": "#/definitions/AssetType" },
								{ "$ref": "#/definitions/AssetTypeExtension" }
							]
						}
					}
				},
				"encounters": {
					"title": "Encounters",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/EncounterStarforged" }
					}
				},
				"setting_truths": {
					"title": "Setting truths",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z_]+$": { "$ref": "#/definitions/SettingTruth" }
					}
				}
			}
		}
	}
}
