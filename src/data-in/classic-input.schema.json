{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "https://ironswornrpg.com/classic-input.schema.json",
	"title": "Datasworn v2.0.0-dev (data entry)",
	"description": "Data entry schema for Datasworn, which provides templates, fallbacks/default values for many undefined keys, and other conveniences like source inheritance. It must be processed into the standard Datasworn format.",
	"$defs": {
		"EncounterClassicID": {
			"$id": "#/$defs/EncounterClassicID",
			"examples": [
				"classic/encounters/firstborn/elf",
				"delve/encounters/anomalies/glimmer"
			],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/encounters\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$",
			"title": "EncounterClassicID"
		},
		"EncounterClassicIDWildcard": {
			"$id": "#/$defs/EncounterClassicIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/encounters(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)$",
			"title": "EncounterClassicIDWildcard"
		},
		"EncounterCollectionID": {
			"$id": "#/$defs/EncounterCollectionID",
			"examples": ["classic/collections/encounters/firstborn"],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/encounters\\/([a-z][a-z_]*)$",
			"title": "EncounterCollectionID"
		},
		"EncounterStarforgedID": {
			"$id": "#/$defs/EncounterStarforgedID",
			"examples": [
				"starforged/encounters/chiton",
				"starforged/encounters/chiton/variants/chiton_drone_pack"
			],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/encounters\\/([a-z][a-z_]*)(\\/variants\\/([a-z][a-z_]*))?$",
			"title": "EncounterStarforgedID"
		},
		"AssetID": {
			"$id": "#/$defs/AssetID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)$",
			"title": "AssetID"
		},
		"AssetIDWildcard": {
			"$id": "#/$defs/AssetIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)$",
			"title": "AssetIDWildcard"
		},
		"AssetTypeID": {
			"$id": "#/$defs/AssetTypeID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/assets\\/([a-z][a-z_]*)$",
			"title": "AssetTypeID"
		},
		"AssetOptionFieldID": {
			"$id": "#/$defs/AssetOptionFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/options\\/([a-z][a-z_]*)$",
			"title": "AssetOptionFieldID"
		},
		"AssetOptionFieldIDWildcard": {
			"$id": "#/$defs/AssetOptionFieldIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)\\/options(\\/([a-z][a-z_]*)|\\/\\*)$",
			"title": "AssetOptionFieldIDWildcard"
		},
		"AssetControlFieldID": {
			"$id": "#/$defs/AssetControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/controls\\/([a-z][a-z_]*)$",
			"title": "AssetControlFieldID"
		},
		"AssetControlFieldIDWildcard": {
			"$id": "#/$defs/AssetControlFieldIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)\\/controls(\\/([a-z][a-z_]*)|\\/\\*)$",
			"title": "AssetControlFieldIDWildcard"
		},
		"AssetConditionMeterID": {
			"$id": "#/$defs/AssetConditionMeterID",
			"title": "Asset condition meter ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/condition_meter$"
		},
		"AssetConditionMeterIDWildcard": {
			"$id": "#/$defs/AssetConditionMeterIDWildcard",
			"title": "Asset condition meter ID (wildcard)",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/assets(\\/([a-z][a-z_]*)|\\/\\*)(\\/([a-z][a-z_]*)|\\/\\*)\\/condition_meter$"
		},
		"AssetConditionMeterControlFieldID": {
			"$id": "#/$defs/AssetConditionMeterControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/condition_meter\\/controls\\/([a-z][a-z_]*)$",
			"title": "AssetConditionMeterControlFieldID"
		},
		"AssetAbilityID": {
			"$id": "#/$defs/AssetAbilityID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/[0-2]$",
			"title": "AssetAbilityID"
		},
		"AssetAbilityOptionFieldID": {
			"$id": "#/$defs/AssetAbilityOptionFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/[0-2]\\/options\\/([a-z][a-z_]*)$",
			"title": "AssetAbilityOptionFieldID"
		},
		"AssetAbilityControlFieldID": {
			"$id": "#/$defs/AssetAbilityControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets\\/([a-z][a-z_]*)\\/([a-z][a-z_]*)\\/abilities\\/[0-2]\\/controls\\/([a-z][a-z_]*)$",
			"title": "AssetAbilityControlFieldID"
		},
		"DelveSiteID": {
			"examples": ["delve/delve_sites/alvas_rest"],
			"$id": "#/$defs/DelveSiteID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/delve_sites\\/([a-z][a-z_]*)$",
			"title": "DelveSiteID"
		},
		"DelveSiteDenizenID": {
			"examples": ["delve/delve_sites/alvas_rest/denizens/1-27"],
			"$id": "#/$defs/DelveSiteDenizenID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/delve_sites\\/([a-z][a-z_]*)\\/denizens\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "DelveSiteDenizenID"
		},
		"DelveSiteThemeID": {
			"$id": "#/$defs/DelveSiteThemeID",
			"examples": ["delve/site_themes/hallowed"],
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)$",
			"title": "DelveSiteThemeID"
		},
		"ThemeFeatureRowID": {
			"$id": "#/$defs/ThemeFeatureRowID",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "ThemeFeatureRowID"
		},
		"ThemeDangerRowID": {
			"$id": "#/$defs/ThemeDangerRowID",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,})\\/site_themes\\/([a-z][a-z_]*)\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "ThemeDangerRowID"
		},
		"DelveSiteDomainID": {
			"$id": "#/$defs/DelveSiteDomainID",
			"examples": ["delve/site_domains/shadowfen"],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/([a-z][a-z_]*)$",
			"title": "DelveSiteDomainID"
		},
		"DomainFeatureRowID": {
			"$id": "#/$defs/DomainFeatureRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/([a-z][a-z_]*)\\/features\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "DomainFeatureRowID"
		},
		"DomainDangerRowID": {
			"$id": "#/$defs/DomainDangerRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/([a-z][a-z_]*)\\/dangers\\/([1-9][0-9]*)-([1-9][0-9]*)$",
			"title": "DomainDangerRowID"
		},
		"MoveID": {
			"description": "A move ID, for a standard move or a unique asset move",
			"examples": [
				"classic/moves/combat/strike",
				"starforged/assets/module/grappler/abilities/0/moves/ready_grappler"
			],
			"$id": "#/$defs/MoveID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/(moves\\/[a-z][a-z_]*\\/[a-z][a-z_]*|assets\\/[a-z][a-z_]*\\/[a-z][a-z_]*\\/abilities\\/[0-2]\\/moves\\/[a-z][a-z_]*)$",
			"title": "MoveID"
		},
		"MoveIDWildcard": {
			"title": "Move ID (with wildcard)",
			"description": "A move ID with wildcards",
			"examples": [
				"*/moves/*/face_danger",
				"*/assets/ritual/*/abilities/*/moves/*"
			],
			"$id": "#/$defs/MoveIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/(moves\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)|assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/abilities\\/([0-2]|\\*)\\/moves\\/([a-z_]+|\\*))$"
		},
		"MoveCategoryID": {
			"examples": ["starforged/collections/moves/adventure"],
			"$id": "#/$defs/MoveCategoryID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/moves\\/([a-z][a-z_]*)$",
			"title": "MoveCategoryID"
		},
		"OracleCollectionID": {
			"examples": [
				"starforged/collections/oracles/core",
				"starforged/collections/oracles/character/names",
				"starforged/collections/oracles/planets/furnace/settlements"
			],
			"$id": "#/$defs/OracleCollectionID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/oracles(\\/([a-z][a-z_]*)){1,3}$",
			"title": "OracleCollectionID"
		},
		"OracleTableID": {
			"examples": [
				"starforged/oracles/core/action",
				"starforged/oracles/character/names/given",
				"starforged/oracles/planets/furnace/settlements/terminus"
			],
			"$id": "#/$defs/OracleTableID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)$",
			"title": "OracleTableID"
		},
		"OracleTableIDWildcard": {
			"description": "Oracle table wildcards can also use '**' to represent any number of collection levels in the oracle tree. For example, 'starforged/oracles/**/location' represents any starforged table with the \"location\" key.",
			"examples": [
				"*/oracles/**/peril",
				"starforged/oracles/character/names/*",
				"starforged/oracles/planets/*/settlements/*"
			],
			"$id": "#/$defs/OracleTableIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/oracles((\\/([a-z][a-z_]*)){1,3}|\\/\\*\\*)(\\/([a-z][a-z_]*)|\\/\\*)$",
			"title": "OracleTableIDWildcard"
		},
		"OracleTableRowID": {
			"examples": [
				"classic/oracles/action_and_theme/action/1-1",
				"starforged/oracles/derelicts/zones/starship/0"
			],
			"description": "Normally, rows will end with two numbers separated by a dash, indicating their dice range.\n\nRows with a single number represent unrollable rows that are sometimes included for rendering purposes; in this case, the number represents the row's index.",
			"$id": "#/$defs/OracleTableRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/([a-z][a-z_]*)){1,3}\\/([a-z][a-z_]*)([1-9][0-9]*-[1-9][0-9]*)|(0|[1-9][0-9]*)$",
			"title": "OracleTableRowID"
		},
		"RarityID": {
			"examples": ["classic/rarities/ayethins_journal"],
			"$id": "#/$defs/RarityID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/rarities\\/([a-z][a-z_]*)$",
			"title": "RarityID"
		},
		"RegionEntryID": {
			"examples": ["classic/regions/shattered_wastes"],
			"$id": "#/$defs/RegionEntryID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/regions\\/([a-z][a-z_]*)$",
			"title": "RegionEntryID"
		},
		"WorldTruthID": {
			"examples": ["classic/world_truths/iron"],
			"$id": "#/$defs/WorldTruthID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/world_truths\\/([a-z][a-z_]*)$",
			"title": "WorldTruthID"
		},
		"WorldTruthOptionID": {
			"examples": ["classic/world_truths/iron/0"],
			"$id": "#/$defs/WorldTruthOptionID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/world_truths\\/([a-z][a-z_]*)\\/(0|[1-9][0-9]*)$",
			"title": "WorldTruthOptionID"
		},
		"SettingTruthID": {
			"examples": ["starforged/setting_truths/iron"],
			"$id": "#/$defs/SettingTruthID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/setting_truths\\/([a-z][a-z_]*)$",
			"title": "SettingTruthID"
		},
		"SettingTruthOptionID": {
			"examples": ["starforged/setting_truths/iron/0"],
			"$id": "#/$defs/SettingTruthOptionID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/setting_truths\\/([a-z][a-z_]*)\\/(0|[1-9][0-9]*)$",
			"title": "SettingTruthOptionID"
		},
		"Ruleset": {
			"$id": "#/$defs/Ruleset",
			"description": "The ruleset used for a sourcebook's rules content.",
			"enum": ["classic", "starforged"],
			"title": "Ruleset"
		},
		"SVGImageURL": {
			"$id": "#/$defs/SVGImageURL",
			"format": "uri-reference",
			"description": "A relative URL pointing to a vector image in the SVG format.",
			"type": "string",
			"title": "SVGImageURL"
		},
		"WEBPImageURL": {
			"$id": "#/$defs/WEBPImageURL",
			"format": "uri-reference",
			"description": "A relative URL pointing to a raster image in the WEBP format.",
			"type": "string",
			"title": "WEBPImageURL"
		},
		"CSSColor": {
			"title": "CSS Color",
			"$id": "#/$defs/CSSColor",
			"description": "A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value",
			"type": "string"
		},
		"Source": {
			"description": "Metadata describing the original source of this item",
			"$id": "#/$defs/Source",
			"type": "object",
			"properties": {
				"title": {
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					],
					"type": "string"
				},
				"page": { "minimum": 1, "title": "Page number", "type": "integer" },
				"authors": {
					"minItems": 1,
					"type": "array",
					"items": {
						"examples": [{ "name": "Shawn Tomkin" }],
						"type": "object",
						"properties": {
							"name": { "examples": ["Shawn Tomkin"], "type": "string" },
							"email": {
								"format": "email",
								"description": "An optional email contact for the author",
								"type": "string"
							}
						},
						"required": ["name"]
					}
				},
				"date": {
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"type": "string"
				},
				"url": {
					"format": "uri",
					"description": "An absolute URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"],
					"type": "string"
				},
				"license": {
					"description": "An absolute URL pointing to the location where this element's license can be found.\n\nA `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Dataforged's build process skips unlicensed content by default.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [{ "format": "uri", "type": "string" }, { "type": "null" }]
				}
			},
			"required": ["title", "authors", "date", "url", "license"],
			"title": "Source"
		},
		"SourceStub": {
			"description": "A source data stub that inherits data from ancestor elements during post-processing. To prevent inheritance, use the regular `source` property instead.",
			"$id": "#/$defs/SourceStub",
			"type": "object",
			"properties": {
				"title": {
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					],
					"type": "string"
				},
				"page": { "minimum": 1, "title": "Page number", "type": "integer" },
				"authors": {
					"minItems": 1,
					"type": "array",
					"items": {
						"examples": [{ "name": "Shawn Tomkin" }],
						"type": "object",
						"properties": {
							"name": { "examples": ["Shawn Tomkin"], "type": "string" },
							"email": {
								"format": "email",
								"description": "An optional email contact for the author",
								"type": "string"
							}
						},
						"required": ["name"]
					}
				},
				"date": {
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"type": "string"
				},
				"url": {
					"format": "uri",
					"description": "An absolute URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"],
					"type": "string"
				},
				"license": {
					"description": "An absolute URL pointing to the location where this element's license can be found.\n\nA `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Dataforged's build process skips unlicensed content by default.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [{ "format": "uri", "type": "string" }, { "type": "null" }]
				}
			},
			"macro": true,
			"title": "SourceStub"
		},
		"SuggestionsClassic": {
			"$id": "#/$defs/SuggestionsClassic",
			"type": "object",
			"properties": {
				"oracles": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableID" }
				},
				"assets": { "type": "array", "items": { "$ref": "#/$defs/AssetID" } },
				"moves": { "type": "array", "items": { "$ref": "#/$defs/MoveID" } },
				"site_domains": {
					"type": "array",
					"items": { "$ref": "#/$defs/DelveSiteDomainID" }
				},
				"site_themes": {
					"type": "array",
					"items": { "$ref": "#/$defs/DelveSiteThemeID" }
				},
				"encounters": {
					"type": "array",
					"items": { "$ref": "#/$defs/EncounterClassicID" }
				},
				"regions": {
					"type": "array",
					"items": { "$ref": "#/$defs/RegionEntryID" }
				}
			},
			"title": "SuggestionsClassic"
		},
		"SuggestionsStarforged": {
			"$id": "#/$defs/SuggestionsStarforged",
			"type": "object",
			"properties": {
				"oracles": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableID" }
				},
				"assets": { "type": "array", "items": { "$ref": "#/$defs/AssetID" } },
				"moves": { "type": "array", "items": { "$ref": "#/$defs/MoveID" } },
				"encounters": {
					"type": "array",
					"items": { "$ref": "#/$defs/EncounterStarforgedID" }
				}
			},
			"title": "SuggestionsStarforged"
		},
		"Suggestions": {
			"$id": "#/$defs/Suggestions",
			"anyOf": [
				{ "$ref": "#/$defs/SuggestionsClassic" },
				{ "$ref": "#/$defs/SuggestionsStarforged" }
			],
			"title": "Suggestions"
		},
		"Label": {
			"$id": "#/$defs/Label",
			"description": "A localized plain text name or label.",
			"format": "markdown",
			"i18n": true,
			"type": "string",
			"title": "Label"
		},
		"MarkdownString": {
			"$id": "#/$defs/MarkdownString",
			"description": "Localized text, formatted in Markdown.\n\nIt uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.",
			"format": "markdown",
			"i18n": true,
			"type": "string",
			"title": "MarkdownString"
		},
		"TemplateString": {
			"$id": "#/$defs/TemplateString",
			"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `result` key, for example `{{result:starforged/oracles/core/action}}`\n",
			"i18n": true,
			"releaseStage": "experimental",
			"type": "string",
			"title": "TemplateString"
		},
		"ChallengeRank": {
			"$id": "#/$defs/ChallengeRank",
			"description": "Challenge rank, represented as a number: 1 = Troublesome, 2 = Dangerous, 3 = Formidable, 4 = Extreme, 5 = Epic",
			"enum": [1, 2, 3, 4, 5],
			"title": "ChallengeRank"
		},
		"ProgressType": {
			"$id": "#/$defs/ProgressType",
			"pattern": "([a-z][a-z_]*)",
			"default": "progress_track",
			"examples": [
				"progress_track",
				"bonds_track",
				"failure_track",
				"quests_legacy",
				"bonds_legacy",
				"discoveries_legacy"
			],
			"description": "'Canonical' content uses some standardized values.\n\nMost progress rolls use the `progress_track` type, which describes any standard, temporary progress track that's created and resolved by moves.\n\nOther values used for special, permanent progress tracks:\n\n  * `bonds_track`, described in the Ironsworn Rulebook\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\nCustom values should only be used describe new kinds of permanent progress track.\n",
			"type": "string",
			"title": "ProgressType"
		},
		"OracleRollTemplate": {
			"$id": "#/$defs/OracleRollTemplate",
			"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.",
			"type": "object",
			"properties": {
				"result": {
					"description": "A string template that may be used in place of OracleTableRow#result.",
					"examples": [
						"{{result:starforged/oracles/factions/affiliation}} of the {{result:starforged/oracles/factions/legacy}} {{result:starforged/oracles/factions/identity}}"
					],
					"$ref": "#/$defs/TemplateString"
				},
				"summary": {
					"description": "A string template that may be used in place of OracleTableRow#summary.",
					"$ref": "#/$defs/TemplateString"
				},
				"description": {
					"description": "A string template that may be used in place of OracleTableRow#description.",
					"$ref": "#/$defs/TemplateString"
				}
			},
			"title": "OracleRollTemplate"
		},
		"OracleTableRollMethod": {
			"default": "no_duplicates",
			"$id": "#/$defs/OracleTableRollMethod",
			"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"],
			"title": "OracleTableRollMethod"
		},
		"OracleTableRoll": {
			"$id": "#/$defs/OracleTableRoll",
			"type": "object",
			"properties": {
				"oracle": {
					"description": "The ID of the oracle table to be rolled. If omitted, it defaults to the ID of this oracle table.",
					"$ref": "#/$defs/OracleTableID"
				},
				"auto": {
					"default": false,
					"description": "The rulebook explicitly cautions *against* rolling all details at once, so rolling every referenced oracle automatically is not recommended. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\". If this value is omitted, assume it's false.",
					"type": "boolean"
				},
				"times": { "minimum": 1, "default": 1, "type": "integer" },
				"method": { "$ref": "#/$defs/OracleTableRollMethod" }
			},
			"required": [],
			"title": "OracleTableRoll"
		},
		"OracleTableRow": {
			"$id": "#/$defs/OracleTableRow",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/$defs/OracleTableRowID" },
				"low": {
					"type": ["integer", "null"],
					"default": null,
					"description": "Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				},
				"high": {
					"type": ["integer", "null"],
					"default": null,
					"description": "High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				},
				"result": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"embed_table": { "$ref": "#/$defs/OracleTableID" },
				"template": { "$ref": "#/$defs/OracleRollTemplate" }
			},
			"required": ["low", "high", "result"],
			"title": "OracleTableRow"
		},
		"OracleTableMatchBehavior": {
			"$id": "#/$defs/OracleTableMatchBehavior",
			"title": "Match behavior",
			"type": "object",
			"properties": { "text": { "$ref": "#/$defs/MarkdownString" } },
			"required": ["text"]
		},
		"OracleTableStyle": {
			"$id": "#/$defs/OracleTableStyle",
			"enum": ["table", "embed_in_row", "embed_as_column"],
			"title": "OracleTableStyle"
		},
		"OracleColumnContentType": {
			"$id": "#/$defs/OracleColumnContentType",
			"enum": ["range", "result", "summary", "description"],
			"title": "OracleColumnContentType"
		},
		"OracleTableColumn": {
			"$id": "#/$defs/OracleTableColumn",
			"type": "object",
			"properties": {
				"label": { "$ref": "#/$defs/Label" },
				"content_type": { "$ref": "#/$defs/OracleColumnContentType" }
			},
			"required": ["content_type"],
			"title": "OracleTableColumn"
		},
		"OracleCollectionColumn": {
			"$id": "#/$defs/OracleCollectionColumn",
			"description": "A column's default label is the title of the source table.",
			"type": "object",
			"properties": {
				"label": { "$ref": "#/$defs/Label" },
				"content_type": { "$ref": "#/$defs/OracleColumnContentType" },
				"table_key": { "type": "string", "pattern": "^[a-z][a-z_]*$" },
				"color": { "$ref": "#/$defs/CSSColor" }
			},
			"required": ["content_type", "table_key"],
			"title": "OracleCollectionColumn"
		},
		"OracleTableRendering": {
			"$id": "#/$defs/OracleTableRendering",
			"type": "object",
			"properties": {
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"style": { "$ref": "#/$defs/OracleTableStyle" },
				"color": { "$ref": "#/$defs/CSSColor" }
			},
			"title": "OracleTableRendering"
		},
		"DiceNotation": {
			"$id": "#/$defs/DiceNotation",
			"type": "string",
			"pattern": "([1-9][0-9]*)d(0|[1-9][0-9]*)([+-]([1-9][0-9]*))?",
			"title": "DiceNotation"
		},
		"OracleTable": {
			"$id": "#/$defs/OracleTable",
			"title": "Oracle table",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/OracleTableID" },
				"dice": { "default": "1d100", "$ref": "#/$defs/DiceNotation" },
				"summary": {
					"description": "A brief summary of the oracle table's intended usage, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead.",
					"$ref": "#/$defs/MarkdownString"
				},
				"description": {
					"description": "A longer description of the oracle table's intended usage, which might include multiple paragraphs. If it's only a couple sentences, use the \"summary\" key instead.",
					"$ref": "#/$defs/MarkdownString"
				},
				"match": { "$ref": "#/$defs/OracleTableMatchBehavior" },
				"table": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRow" }
				},
				"rendering": { "$ref": "#/$defs/OracleTableRendering" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "table"]
		},
		"OracleCollectionStyle": {
			"$id": "#/$defs/OracleCollectionStyle",
			"enum": ["multi_table"],
			"title": "OracleCollectionStyle"
		},
		"OracleCollectionRendering": {
			"$id": "#/$defs/OracleCollectionRendering",
			"type": "object",
			"properties": {
				"columns": {
					"allOf": [
						{
							"description": "Describes the rendering of this oracle as a standalone table.",
							"$comment": "Deserialize as a dictionary object.",
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleTableColumn" }
							}
						},
						{
							"$comment": "Deserialize as a dictionary object.",
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleCollectionColumn" }
							}
						}
					]
				},
				"color": { "$ref": "#/$defs/CSSColor" },
				"style": { "$ref": "#/$defs/OracleCollectionStyle" }
			},
			"required": ["columns"],
			"title": "OracleCollectionRendering"
		},
		"OracleCollection": {
			"$id": "#/$defs/OracleCollection",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/OracleCollectionID" },
				"extends": {
					"$ref": "#/$defs/OracleCollectionID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				},
				"imports": {
					"macro": true,
					"description": "Collection borrows content from another collection. The target collection should be cloned, and this collection's values then merged to the clone as overrides.",
					"type": "object",
					"properties": {
						"from": {
							"$ref": "#/$defs/OracleCollectionID",
							"description": "The collection imported by this collection."
						},
						"include": {
							"description": "IDs (which may be wildcarded) for the items to import, or `null` if the entire collection should be imported.",
							"anyOf": [
								{ "type": "null" },
								{
									"type": "array",
									"items": { "$ref": "#/$defs/OracleTableIDWildcard" }
								}
							]
						}
					},
					"required": ["from", "include"]
				},
				"color": { "$ref": "#/$defs/CSSColor" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"contents": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleTable" }
					}
				},
				"rendering": { "$ref": "#/$defs/OracleCollectionRendering" },
				"images": {
					"type": "array",
					"items": { "$ref": "#/$defs/WEBPImageURL" }
				},
				"sample_names": {
					"type": "array",
					"items": { "$ref": "#/$defs/Label" }
				},
				"collections": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleCollection" }
					}
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name"],
			"title": "OracleCollection"
		},
		"MoveRollMethod": {
			"$id": "#/$defs/MoveRollMethod",
			"description": "`any`: When rolling with this move trigger condition, the player picks which stat to use.\n\n`all`: When rolling with this move trigger condition, *every* stat or progress track of the `using` key is rolled.\n\n`highest`: When rolling with this move trigger condition, use the highest/best option from the `using` key.\n\n`lowest`: When rolling with this move trigger condition, use the lowest/worst option from the `using` key.",
			"enum": ["any", "all", "highest", "lowest"],
			"title": "MoveRollMethod"
		},
		"MoveRerollMethod": {
			"$id": "#/$defs/MoveRerollMethod",
			"enum": ["any", "all", "challenge_die", "challenge_dice", "action_die"],
			"title": "MoveRerollMethod"
		},
		"MoveOutcomeType": {
			"$id": "#/$defs/MoveOutcomeType",
			"enum": ["miss", "weak_hit", "strong_hit"],
			"title": "MoveOutcomeType"
		},
		"MoveRollType": {
			"$id": "#/$defs/MoveRollType",
			"enum": ["action_roll", "progress_roll", "no_roll"],
			"title": "MoveRollType"
		},
		"TriggerBy": {
			"$id": "#/$defs/TriggerBy",
			"description": "Information on who can trigger this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
			"type": "object",
			"properties": {
				"player": { "default": true, "type": "boolean" },
				"ally": { "default": false, "type": "boolean" }
			},
			"required": [],
			"title": "TriggerBy"
		},
		"TriggerActionRollConditionOptionAttachedAssetRef": {
			"$id": "#/$defs/TriggerActionRollConditionOptionAttachedAssetRef",
			"type": "object",
			"properties": {
				"using": { "const": "attached_asset_meter", "type": "string" }
			},
			"required": ["using"],
			"title": "TriggerActionRollConditionOptionAttachedAssetRef"
		},
		"TriggerActionRollConditionOptionRef": {
			"$id": "#/$defs/TriggerActionRollConditionOptionRef",
			"type": "object",
			"properties": {
				"using": { "const": "ref", "type": "string" },
				"ref": {
					"anyOf": [
						{ "$ref": "#/$defs/AssetConditionMeterID" },
						{ "$ref": "#/$defs/AssetConditionMeterIDWildcard" },
						{ "$ref": "#/$defs/AssetOptionFieldIDWildcard" }
					]
				}
			},
			"required": ["using", "ref"],
			"title": "TriggerActionRollConditionOptionRef"
		},
		"TriggerActionRollConditionOptionStat": {
			"$id": "#/$defs/TriggerActionRollConditionOptionStat",
			"type": "object",
			"properties": {
				"using": {
					"anyOf": [
						{ "$ref": "#/$defs/PlayerStat" },
						{ "$ref": "#/$defs/PlayerConditionMeter" }
					]
				}
			},
			"required": ["using"],
			"title": "TriggerActionRollConditionOptionStat"
		},
		"TriggerActionRollConditionOptionCustomValue": {
			"$id": "#/$defs/TriggerActionRollConditionOptionCustomValue",
			"type": "object",
			"properties": {
				"using": { "const": "custom_value", "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"value": { "minimum": 0, "type": "integer" }
			},
			"required": ["using", "label", "value"],
			"title": "TriggerActionRollConditionOptionCustomValue"
		},
		"TriggerActionRollConditionOption": {
			"$id": "#/$defs/TriggerActionRollConditionOption",
			"anyOf": [
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionStat" },
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionRef" },
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionAttachedAssetRef" },
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionCustomValue" }
			],
			"title": "TriggerActionRollConditionOption"
		},
		"TriggerProgressRollConditionOption": {
			"$id": "#/$defs/TriggerProgressRollConditionOption",
			"type": "object",
			"properties": { "using": { "$ref": "#/$defs/ProgressType" } },
			"required": ["using"],
			"title": "TriggerProgressRollConditionOption"
		},
		"TriggerActionRollCondition": {
			"$id": "#/$defs/TriggerActionRollCondition",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollConditionOption" }
				}
			},
			"required": ["roll_options"],
			"title": "TriggerActionRollCondition"
		},
		"TriggerProgressRollCondition": {
			"$id": "#/$defs/TriggerProgressRollCondition",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollConditionOption" }
				}
			},
			"required": ["roll_options"],
			"title": "TriggerProgressRollCondition"
		},
		"TriggerNoRollCondition": {
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"by": { "$ref": "#/$defs/TriggerBy" }
			},
			"$id": "#/$defs/TriggerNoRollCondition",
			"title": "TriggerNoRollCondition"
		},
		"TriggerActionRoll": {
			"$id": "#/$defs/TriggerActionRoll",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/$defs/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollCondition" }
				}
			},
			"required": ["text", "conditions"],
			"title": "TriggerActionRoll"
		},
		"TriggerProgressRoll": {
			"$id": "#/$defs/TriggerProgressRoll",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/$defs/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollCondition" }
				}
			},
			"required": ["text", "conditions"],
			"title": "TriggerProgressRoll"
		},
		"TriggerNoRoll": {
			"$id": "#/$defs/TriggerNoRoll",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/$defs/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerNoRollCondition" }
				}
			},
			"required": ["text"],
			"title": "TriggerNoRoll"
		},
		"MoveReroll": {
			"$id": "#/$defs/MoveReroll",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": { "$ref": "#/$defs/MoveRerollMethod" }
			},
			"required": ["method"],
			"title": "MoveReroll"
		},
		"MoveOutcome": {
			"$id": "#/$defs/MoveOutcome",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" }
			},
			"required": ["text"],
			"title": "MoveOutcome"
		},
		"MoveOutcomeMatchable": {
			"$id": "#/$defs/MoveOutcomeMatchable",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" },
				"match": { "$ref": "#/$defs/MoveOutcome" }
			},
			"required": ["text"],
			"title": "MoveOutcomeMatchable"
		},
		"MoveOutcomes": {
			"$id": "#/$defs/MoveOutcomes",
			"description": "Describes the effect of each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.",
			"type": "object",
			"properties": {
				"miss": { "$ref": "#/$defs/MoveOutcomeMatchable" },
				"weak_hit": { "$ref": "#/$defs/MoveOutcome" },
				"strong_hit": { "$ref": "#/$defs/MoveOutcomeMatchable" }
			},
			"required": ["miss", "weak_hit", "strong_hit"],
			"title": "MoveOutcomes"
		},
		"Move": {
			"type": "object",
			"properties": {
				"move_type": {
					"default": "no_roll",
					"enum": ["action_roll", "progress_roll", "no_roll"]
				}
			},
			"required": [],
			"oneOf": [
				{
					"type": "object",
					"properties": {
						"id": { "$ref": "#/$defs/MoveID" },
						"name": { "$ref": "#/$defs/Label" },
						"trigger": {
							"allOf": [
								{
									"type": "object",
									"properties": {
										"text": {
											"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
											"type": "string",
											"$ref": "#/$defs/MarkdownString"
										}
									},
									"required": ["text"]
								},
								{ "$ref": "#/$defs/TriggerNoRoll" }
							]
						},
						"text": {
							"description": "The complete rules text of the move.",
							"$ref": "#/$defs/MarkdownString"
						},
						"oracles": {
							"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
							"type": "array",
							"items": { "$ref": "#/$defs/OracleTableID" }
						},
						"suggestions": { "$ref": "#/$defs/Suggestions" },
						"source": { "$ref": "#/$defs/Source" },
						"move_type": { "const": "no_roll", "type": "string" },
						"outcomes": { "type": "null" },
						"_source": { "$ref": "#/$defs/SourceStub" }
					},
					"required": ["name", "trigger", "text", "move_type"]
				},
				{
					"type": "object",
					"properties": {
						"id": { "$ref": "#/$defs/MoveID" },
						"name": { "$ref": "#/$defs/Label" },
						"trigger": {
							"allOf": [
								{
									"type": "object",
									"properties": {
										"text": {
											"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
											"type": "string",
											"$ref": "#/$defs/MarkdownString"
										}
									},
									"required": ["text"]
								},
								{ "$ref": "#/$defs/TriggerActionRoll" }
							]
						},
						"text": {
							"description": "The complete rules text of the move.",
							"$ref": "#/$defs/MarkdownString"
						},
						"oracles": {
							"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
							"type": "array",
							"items": { "$ref": "#/$defs/OracleTableID" }
						},
						"suggestions": { "$ref": "#/$defs/Suggestions" },
						"source": { "$ref": "#/$defs/Source" },
						"move_type": { "const": "action_roll", "type": "string" },
						"outcomes": { "$ref": "#/$defs/MoveOutcomes" },
						"_source": { "$ref": "#/$defs/SourceStub" }
					},
					"required": ["name", "trigger", "text", "move_type", "outcomes"]
				},
				{
					"type": "object",
					"properties": {
						"id": { "$ref": "#/$defs/MoveID" },
						"name": { "$ref": "#/$defs/Label" },
						"trigger": {
							"allOf": [
								{
									"type": "object",
									"properties": {
										"text": {
											"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
											"type": "string",
											"$ref": "#/$defs/MarkdownString"
										}
									},
									"required": ["text"]
								},
								{ "$ref": "#/$defs/TriggerProgressRoll" }
							]
						},
						"text": {
							"description": "The complete rules text of the move.",
							"$ref": "#/$defs/MarkdownString"
						},
						"oracles": {
							"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
							"type": "array",
							"items": { "$ref": "#/$defs/OracleTableID" }
						},
						"suggestions": { "$ref": "#/$defs/Suggestions" },
						"source": { "$ref": "#/$defs/Source" },
						"move_type": { "const": "progress_roll", "type": "string" },
						"outcomes": { "$ref": "#/$defs/MoveOutcomes" },
						"_source": { "$ref": "#/$defs/SourceStub" }
					},
					"required": ["name", "trigger", "text", "move_type", "outcomes"]
				}
			],
			"additionalProperties": true,
			"$id": "#/$defs/Move",
			"title": "Move"
		},
		"MoveCategory": {
			"$id": "#/$defs/MoveCategory",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/MoveCategoryID" },
				"extends": {
					"$ref": "#/$defs/MoveCategoryID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				},
				"imports": {
					"macro": true,
					"description": "Collection borrows content from another collection. The target collection should be cloned, and this collection's values then merged to the clone as overrides.",
					"type": "object",
					"properties": {
						"from": {
							"$ref": "#/$defs/MoveCategoryID",
							"description": "The collection imported by this collection."
						},
						"include": {
							"description": "IDs (which may be wildcarded) for the items to import, or `null` if the entire collection should be imported.",
							"anyOf": [
								{ "type": "null" },
								{
									"type": "array",
									"items": { "$ref": "#/$defs/MoveIDWildcard" }
								}
							]
						}
					},
					"required": ["from", "include"]
				},
				"color": { "$ref": "#/$defs/CSSColor" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"contents": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/Move" } }
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name"],
			"title": "MoveCategory"
		},
		"TriggerActionRollConditionAugment": {
			"$id": "#/$defs/TriggerActionRollConditionAugment",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollConditionOption" }
				}
			},
			"title": "TriggerActionRollConditionAugment"
		},
		"TriggerActionRollAugment": {
			"$id": "#/$defs/TriggerActionRollAugment",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollConditionAugment" }
				}
			},
			"required": ["conditions"],
			"title": "TriggerActionRollAugment"
		},
		"TriggerProgressRollConditionAugment": {
			"$id": "#/$defs/TriggerProgressRollConditionAugment",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollConditionOption" }
				}
			},
			"title": "TriggerProgressRollConditionAugment"
		},
		"TriggerProgressRollAugment": {
			"$id": "#/$defs/TriggerProgressRollAugment",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollConditionAugment" }
				}
			},
			"required": ["conditions"],
			"title": "TriggerProgressRollAugment"
		},
		"TriggerNoRollAugment": {
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerNoRollCondition" }
				}
			},
			"required": ["conditions"]
		},
		"MoveOutcomeAugment": {
			"$id": "#/$defs/MoveOutcomeAugment",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" }
			},
			"title": "MoveOutcomeAugment"
		},
		"MoveOutcomeMatchableAugment": {
			"$id": "#/$defs/MoveOutcomeMatchableAugment",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" },
				"match": { "$ref": "#/$defs/MoveOutcome" }
			},
			"title": "MoveOutcomeMatchableAugment"
		},
		"MoveOutcomesAugment": {
			"$id": "#/$defs/MoveOutcomesAugment",
			"type": "object",
			"properties": {
				"miss": { "$ref": "#/$defs/MoveOutcomeMatchableAugment" },
				"weak_hit": { "$ref": "#/$defs/MoveOutcomeAugment" },
				"strong_hit": { "$ref": "#/$defs/MoveOutcomeMatchableAugment" }
			},
			"title": "MoveOutcomesAugment"
		},
		"MoveAugment": {
			"$id": "#/$defs/MoveAugment",
			"type": "object",
			"properties": {
				"text": {
					"description": "The complete rules text of the move.",
					"$ref": "#/$defs/MarkdownString"
				},
				"oracles": {
					"description": "Oracles associated with this move. It's not recommended to roll these automatically, as almost all moves present them as an option, not a requirement.",
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableID" }
				},
				"augments": {
					"type": "array",
					"items": { "$ref": "#/$defs/MoveIDWildcard" }
				},
				"trigger": {},
				"move_type": {
					"default": "action_roll",
					"$ref": "#/$defs/MoveRollType"
				},
				"outcomes": {}
			},
			"required": [],
			"title": "MoveAugment"
		},
		"AssetCheckboxField": {
			"$id": "#/$defs/AssetCheckboxField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "checkbox", "type": "string" },
				"value": {
					"default": false,
					"description": "`true` means the box is checked.",
					"type": "boolean"
				},
				"is_impact": {
					"default": false,
					"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
					"type": "boolean"
				},
				"disables_asset": {
					"default": false,
					"description": "Does this field disable the asset when its value is set to `true`?",
					"type": "boolean"
				}
			},
			"required": ["label", "field_type"],
			"title": "AssetCheckboxField"
		},
		"AssetCardFlipField": {
			"$id": "#/$defs/AssetCardFlipField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "card_flip", "type": "string" },
				"value": {
					"default": false,
					"description": "`true` means the card has been flipped over.",
					"type": "boolean"
				},
				"disables_asset": {
					"default": false,
					"description": "Does this field disable the asset when its value is set to `true`?",
					"type": "boolean"
				}
			},
			"required": ["label", "field_type"],
			"title": "AssetCardFlipField"
		},
		"AssetConditionMeterControlField": {
			"type": "object",
			"$id": "#/$defs/AssetConditionMeterControlField",
			"title": "Asset Condition Meter Control Field",
			"anyOf": [{ "$ref": "#/$defs/AssetCheckboxField" }],
			"properties": {
				"id": { "$ref": "#/$defs/AssetConditionMeterControlFieldID" }
			}
		},
		"AssetConditionMeter": {
			"$id": "#/$defs/AssetConditionMeter",
			"title": "Asset condition meter",
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".\n\nThe asset condition meter is always rendered at the bottom of the card.",
			"type": "object",
			"properties": {
				"min": { "default": 0, "type": "integer" },
				"max": { "type": "integer" },
				"value": { "type": "integer" },
				"id": { "$ref": "#/$defs/AssetConditionMeterID" },
				"label": { "$ref": "#/$defs/Label" },
				"moves": {
					"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.",
					"examples": [
						{
							"suffer": "classic/moves/suffer/endure_companion_harm",
							"recover": "classic/moves/adventure/heal"
						},
						{
							"suffer": "starforged/moves/suffer/companion_takes_a_hit",
							"recover": "starforged/moves/recover/heal"
						},
						{
							"suffer": "starforged/moves/suffer/withstand_damage",
							"recover": "starforged/moves/recover/repair"
						}
					],
					"type": "object",
					"properties": {
						"suffer": {
							"description": "The ID of the suffer move associated with the condition meter. If the suffer move makes an action roll, it may use this condition meter's value as a stat option.",
							"examples": [
								"classic/moves/suffer/companion_endure_harm",
								"starforged/moves/suffer/companion_takes_a_hit",
								"starforged/moves/suffer/withstand_damage"
							],
							"$ref": "#/$defs/MoveID"
						},
						"recover": {
							"description": "The ID of the primary recover move associated with the condition meter. When in doubt, prefer the most specific move that can be used in the field, or whatever would be most useful to have presented as a shortcut.",
							"examples": [
								"classic/moves/adventure/heal",
								"starforged/moves/recover/heal",
								"starforged/moves/recover/repair"
							],
							"$ref": "#/$defs/MoveID"
						}
					}
				},
				"controls": {
					"description": "Controls are asset input fields whose values are expected to change throughout the life of the asset. Usually these occur as checkboxes on condition meters, but a few assets also use them for counters or clocks.",
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetConditionMeterControlField"
						}
					}
				}
			},
			"required": ["max", "label"]
		},
		"AssetConditionMeterAugment": {
			"$id": "#/$defs/AssetConditionMeterAugment",
			"title": "Asset condition meter",
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".\n\nThe asset condition meter is always rendered at the bottom of the card.",
			"type": "object",
			"properties": {
				"min": { "default": 0, "type": "integer" },
				"max": { "type": "integer" },
				"moves": {
					"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.",
					"examples": [
						{
							"suffer": "classic/moves/suffer/endure_companion_harm",
							"recover": "classic/moves/adventure/heal"
						},
						{
							"suffer": "starforged/moves/suffer/companion_takes_a_hit",
							"recover": "starforged/moves/recover/heal"
						},
						{
							"suffer": "starforged/moves/suffer/withstand_damage",
							"recover": "starforged/moves/recover/repair"
						}
					],
					"type": "object",
					"properties": {
						"suffer": {
							"description": "The ID of the suffer move associated with the condition meter. If the suffer move makes an action roll, it may use this condition meter's value as a stat option.",
							"examples": [
								"classic/moves/suffer/companion_endure_harm",
								"starforged/moves/suffer/companion_takes_a_hit",
								"starforged/moves/suffer/withstand_damage"
							],
							"$ref": "#/$defs/MoveID"
						},
						"recover": {
							"description": "The ID of the primary recover move associated with the condition meter. When in doubt, prefer the most specific move that can be used in the field, or whatever would be most useful to have presented as a shortcut.",
							"examples": [
								"classic/moves/adventure/heal",
								"starforged/moves/recover/heal",
								"starforged/moves/recover/repair"
							],
							"$ref": "#/$defs/MoveID"
						}
					}
				},
				"controls": {
					"description": "Controls are asset input fields whose values are expected to change throughout the life of the asset. Usually these occur as checkboxes on condition meters, but a few assets also use them for counters or clocks.",
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetConditionMeterControlField"
						}
					}
				}
			}
		},
		"AssetOptionField": {
			"type": "object",
			"$id": "#/$defs/AssetOptionField",
			"title": "Asset Option Field",
			"anyOf": [
				{ "$ref": "#/$defs/SelectFieldStat" },
				{ "$ref": "#/$defs/TextField" }
			],
			"properties": { "id": { "$ref": "#/$defs/AssetOptionFieldID" } }
		},
		"AssetControlField": {
			"type": "object",
			"$id": "#/$defs/AssetControlField",
			"title": "Asset Control Field",
			"anyOf": [
				{ "$ref": "#/$defs/CheckboxField" },
				{ "$ref": "#/$defs/AssetCardFlipField" }
			],
			"properties": { "id": { "$ref": "#/$defs/AssetControlFieldID" } }
		},
		"AssetAttachment": {
			"$id": "#/$defs/AssetAttachment",
			"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"type": "object",
			"properties": {
				"assets": {
					"description": "Asset IDs (which may be wildcards) that may be attached to this asset",
					"type": "array",
					"items": { "$ref": "#/$defs/AssetIDWildcard" }
				},
				"max": {
					"minimum": 1,
					"description": "Omit if there's no upper limit to the number of attached assets.",
					"type": "integer"
				}
			},
			"required": ["assets"],
			"title": "AssetAttachment"
		},
		"Asset": {
			"$id": "#/$defs/Asset",
			"title": "Asset",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/$defs/AssetID" },
				"name": { "$ref": "#/$defs/Label" },
				"asset_type": {
					"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
					"examples": [
						"Combat Talent",
						"Command Vehicle",
						"Companion",
						"Deed",
						"Module",
						"Path",
						"Ritual",
						"Support Vehicle"
					],
					"$ref": "#/$defs/Label"
				},
				"source": { "$ref": "#/$defs/Source" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"color": { "$ref": "#/$defs/CSSColor" },
				"options": {
					"description": "Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.",
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetOptionField" }
					}
				},
				"controls": {
					"description": "Controls are asset input fields whose values are expected to change throughout the life of the asset. Usually these occur as checkboxes on condition meters, but a few assets also use them for counters or clocks.",
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetControlField" }
					}
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"requirement": { "$ref": "#/$defs/MarkdownString" },
				"abilities": {
					"minItems": 3,
					"maxItems": 3,
					"type": "array",
					"items": { "$ref": "#/$defs/AssetAbility" }
				},
				"condition_meter": { "$ref": "#/$defs/AssetConditionMeter" },
				"count_as_impact": {
					"default": false,
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"type": "boolean"
				},
				"attachments": { "$ref": "#/$defs/AssetAttachment" },
				"shared": {
					"default": false,
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
					"type": "boolean"
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "asset_type", "abilities"]
		},
		"AssetAbilityOptionField": {
			"type": "object",
			"$id": "#/$defs/AssetAbilityOptionField",
			"title": "Asset Ability Option Field",
			"anyOf": [{ "$ref": "#/$defs/TextField" }],
			"properties": { "id": { "$ref": "#/$defs/AssetAbilityOptionFieldID" } }
		},
		"AssetAbilityControlField": {
			"type": "object",
			"$id": "#/$defs/AssetAbilityControlField",
			"title": "Asset Ability Control Field",
			"anyOf": [
				{ "$ref": "#/$defs/ClockField" },
				{ "$ref": "#/$defs/CounterField" },
				{ "$ref": "#/$defs/CheckboxField" }
			],
			"properties": { "id": { "$ref": "#/$defs/AssetAbilityControlFieldID" } }
		},
		"AssetAbility": {
			"$id": "#/$defs/AssetAbility",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/$defs/AssetAbilityID" },
				"name": { "$ref": "#/$defs/Label" },
				"text": { "$ref": "#/$defs/MarkdownString" },
				"enabled": { "default": false, "type": "boolean" },
				"moves": {
					"description": "Unique moves added by this asset ability.",
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/Move" } }
				},
				"options": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetAbilityOptionField" }
					}
				},
				"controls": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetAbilityControlField" }
					}
				},
				"augment_asset": {
					"description": "Describes augmentations made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.",
					"releaseStage": "experimental",
					"type": "object",
					"allOf": [
						{
							"type": "object",
							"properties": {
								"asset_type": {
									"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
									"examples": [
										"Combat Talent",
										"Command Vehicle",
										"Companion",
										"Deed",
										"Module",
										"Path",
										"Ritual",
										"Support Vehicle"
									],
									"$ref": "#/$defs/Label"
								},
								"icon": { "$ref": "#/$defs/SVGImageURL" },
								"color": { "$ref": "#/$defs/CSSColor" },
								"suggestions": { "$ref": "#/$defs/Suggestions" },
								"count_as_impact": {
									"default": false,
									"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
									"type": "boolean"
								},
								"attachments": { "$ref": "#/$defs/AssetAttachment" },
								"shared": {
									"default": false,
									"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
									"type": "boolean"
								}
							}
						},
						{
							"type": "object",
							"properties": {
								"condition_meter": {
									"$ref": "#/$defs/AssetConditionMeterAugment"
								}
							}
						}
					]
				},
				"augment_moves": {
					"description": "Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions are met.",
					"releaseStage": "experimental",
					"type": "array",
					"items": { "$ref": "#/$defs/MoveAugment" }
				}
			},
			"required": ["text"],
			"title": "AssetAbility"
		},
		"AssetType": {
			"$id": "#/$defs/AssetType",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/AssetTypeID" },
				"extends": {
					"$ref": "#/$defs/AssetTypeID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				},
				"imports": {
					"macro": true,
					"description": "Collection borrows content from another collection. The target collection should be cloned, and this collection's values then merged to the clone as overrides.",
					"type": "object",
					"properties": {
						"from": {
							"$ref": "#/$defs/AssetTypeID",
							"description": "The collection imported by this collection."
						},
						"include": {
							"description": "IDs (which may be wildcarded) for the items to import, or `null` if the entire collection should be imported.",
							"anyOf": [
								{ "type": "null" },
								{
									"type": "array",
									"items": { "$ref": "#/$defs/AssetIDWildcard" }
								}
							]
						}
					},
					"required": ["from", "include"]
				},
				"color": { "$ref": "#/$defs/CSSColor" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"contents": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/Asset" } }
				},
				"member_label": { "$ref": "#/$defs/Label" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name"],
			"title": "AssetType"
		},
		"CheckboxField": {
			"$id": "#/$defs/CheckboxField",
			"description": "This input represents a checkbox field. It is considered checked when its value is set to `true`.",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "checkbox", "type": "string" },
				"value": {
					"default": false,
					"description": "`true` means the box is checked.",
					"type": "boolean"
				}
			},
			"required": ["label", "field_type"],
			"title": "CheckboxField"
		},
		"ClockField": {
			"$id": "#/$defs/ClockField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "clock", "type": "string" },
				"value": { "default": 0, "type": "integer" },
				"min": { "const": 0, "type": "number" },
				"max": { "enum": [4, 6, 8, 10] }
			},
			"required": ["label", "field_type", "min", "max"],
			"title": "ClockField"
		},
		"CounterField": {
			"$id": "#/$defs/CounterField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "counter", "type": "string" },
				"value": { "default": 0, "type": "integer" },
				"min": { "const": 0, "type": "number" },
				"max": { "type": "integer" }
			},
			"required": ["label", "field_type", "min"],
			"title": "CounterField"
		},
		"TextField": {
			"$id": "#/$defs/TextField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "text", "type": "string" },
				"value": { "type": "string" }
			},
			"required": ["label", "field_type"],
			"title": "TextField"
		},
		"SelectFieldStat": {
			"$id": "#/$defs/SelectFieldStat",
			"title": "Select field (player stat)",
			"description": "Select a standard player stat or condition meter.",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "select_stat", "type": "string" },
				"value": {
					"anyOf": [
						{ "$ref": "#/$defs/PlayerStat" },
						{ "$ref": "#/$defs/PlayerConditionMeter" }
					]
				},
				"choices": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"type": "object",
							"properties": {
								"label": { "$ref": "#/$defs/Label" },
								"value": {
									"anyOf": [
										{ "$ref": "#/$defs/PlayerStat" },
										{ "$ref": "#/$defs/PlayerConditionMeter" }
									]
								},
								"selected": { "type": "boolean" }
							},
							"required": ["label", "value"]
						}
					}
				}
			},
			"required": ["label", "field_type", "choices"]
		},
		"SelectFieldRef": {
			"$id": "#/$defs/SelectFieldRef",
			"title": "Select field (reference)",
			"description": "Select a pointer to the value of an asset control or option field.",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "select_ref", "type": "string" },
				"value": {
					"anyOf": [
						{ "$ref": "#/$defs/AssetControlFieldIDWildcard" },
						{ "$ref": "#/$defs/AssetOptionFieldIDWildcard" }
					]
				},
				"choices": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"type": "object",
							"properties": {
								"label": { "$ref": "#/$defs/Label" },
								"value": {
									"anyOf": [
										{ "$ref": "#/$defs/AssetControlFieldIDWildcard" },
										{ "$ref": "#/$defs/AssetOptionFieldIDWildcard" }
									]
								},
								"selected": { "type": "boolean" }
							},
							"required": ["label", "value"]
						}
					}
				}
			},
			"required": ["label", "field_type", "choices"]
		},
		"PlayerStat": {
			"examples": ["edge", "heart", "iron", "shadow", "wits"],
			"pattern": "([a-z][a-z_]*)",
			"$id": "#/$defs/PlayerStat",
			"description": "A basic player character stat. The canonical options are `edge`, `heart`, `iron`, `shadow`, and `wits`.",
			"type": "string",
			"title": "PlayerStat"
		},
		"PlayerConditionMeter": {
			"$id": "#/$defs/PlayerConditionMeter",
			"pattern": "([a-z][a-z_]*)",
			"examples": ["health", "spirit", "supply"],
			"description": "A basic, rollable player character resource. The canonical options are `health`, `spirit`, and `supply`.",
			"type": "string",
			"title": "PlayerConditionMeter"
		},
		"DelveSite": {
			"$id": "#/$defs/DelveSite",
			"description": "A delve site with a theme, domain, and denizen table.",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/DelveSiteID" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"rank": { "$ref": "#/$defs/ChallengeRank" },
				"theme": { "$ref": "#/$defs/DelveSiteThemeID" },
				"domain": { "$ref": "#/$defs/DelveSiteDomainID" },
				"extra_card": {
					"description": "An additional theme or domain card for use with optional rules in Ironsworn: Delve.",
					"anyOf": [
						{ "$ref": "#/$defs/DelveSiteThemeID" },
						{ "$ref": "#/$defs/DelveSiteDomainID" }
					]
				},
				"description": { "$ref": "#/$defs/MarkdownString" },
				"denizens": {
					"allOf": [
						{
							"type": "array",
							"items": { "$ref": "#/$defs/DelveSiteDenizen" }
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 1, "type": "number" },
										"high": { "const": 27, "type": "number" },
										"frequency": { "const": "very_common", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 28, "type": "number" },
										"high": { "const": 41, "type": "number" },
										"frequency": { "const": "common", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 42, "type": "number" },
										"high": { "const": 55, "type": "number" },
										"frequency": { "const": "common", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 56, "type": "number" },
										"high": { "const": 69, "type": "number" },
										"frequency": { "const": "common", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 70, "type": "number" },
										"high": { "const": 75, "type": "number" },
										"frequency": { "const": "uncommon", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 76, "type": "number" },
										"high": { "const": 81, "type": "number" },
										"frequency": { "const": "uncommon", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 82, "type": "number" },
										"high": { "const": 87, "type": "number" },
										"frequency": { "const": "uncommon", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 88, "type": "number" },
										"high": { "const": 93, "type": "number" },
										"frequency": { "const": "uncommon", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 94, "type": "number" },
										"high": { "const": 95, "type": "number" },
										"frequency": { "const": "rare", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 96, "type": "number" },
										"high": { "const": 97, "type": "number" },
										"frequency": { "const": "rare", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 98, "type": "number" },
										"high": { "const": 99, "type": "number" },
										"frequency": { "const": "rare", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 100, "type": "number" },
										"high": { "const": 100, "type": "number" },
										"frequency": { "const": "unforeseen", "type": "string" }
									},
									"required": ["low", "high", "frequency"]
								}
							],
							"additionalItems": false,
							"minItems": 12,
							"maxItems": 12
						}
					]
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": [
				"name",
				"rank",
				"theme",
				"domain",
				"description",
				"denizens"
			],
			"title": "DelveSite"
		},
		"DelveSiteDenizen": {
			"$id": "#/$defs/DelveSiteDenizen",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/$defs/DelveSiteDenizenID" },
				"name": { "$ref": "#/$defs/Label" },
				"low": { "minimum": 1, "maximum": 100, "type": "integer" },
				"high": { "minimum": 1, "maximum": 100, "type": "integer" },
				"encounter": {
					"description": "The ID of the relevant encounter, if one is specified.",
					"$ref": "#/$defs/EncounterClassicID"
				},
				"frequency": { "$ref": "#/$defs/DelveSiteDenizenFrequency" }
			},
			"required": ["low", "high", "frequency"],
			"title": "DelveSiteDenizen"
		},
		"DelveSiteDenizenFrequency": {
			"$id": "#/$defs/DelveSiteDenizenFrequency",
			"enum": ["very_common", "common", "uncommon", "rare", "unforeseen"],
			"title": "DelveSiteDenizenFrequency"
		},
		"DelveSiteDomain": {
			"$id": "#/$defs/DelveSiteDomain",
			"title": "Delve site domain",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"id": { "$ref": "#/$defs/DelveSiteDomainID" },
				"card_type": { "const": "domain", "type": "string" },
				"name_oracle": {
					"description": "An oracle table ID containing place name elements. For examples, see oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in oracle collection ID `delve/collections/oracles/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (ID: delve/oracles/site_name/format) to create random names for delve sites.",
					"$ref": "#/$defs/OracleTableID"
				},
				"features": {
					"allOf": [
						{
							"type": "array",
							"items": { "$ref": "#/$defs/DelveSiteDomainFeatureRow" }
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 21, "type": "number" },
										"high": { "const": 43, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 44, "type": "number" },
										"high": { "const": 56, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 57, "type": "number" },
										"high": { "const": 64, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 65, "type": "number" },
										"high": { "const": 68, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 69, "type": "number" },
										"high": { "const": 72, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 73, "type": "number" },
										"high": { "const": 76, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 77, "type": "number" },
										"high": { "const": 80, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 81, "type": "number" },
										"high": { "const": 84, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 85, "type": "number" },
										"high": { "const": 88, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 89, "type": "number" },
										"high": { "const": 98, "type": "number" },
										"result": { "default": "Something unusual or unexpected" },
										"suggestions": {
											"default": {
												"oracles": [
													"delve/oracles/feature/aspect",
													"delve/oracles/feature/focus"
												]
											}
										}
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 99, "type": "number" },
										"high": { "const": 99, "type": "number" },
										"result": { "default": "You transition into a new theme" },
										"suggestions": {
											"default": {
												"oracles": ["delve/oracles/site_nature/theme"]
											}
										}
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 100, "type": "number" },
										"high": { "const": 100, "type": "number" },
										"result": { "default": "You transition into a new domain" },
										"suggestions": {
											"default": {
												"oracles": ["delve/oracles/site_nature/domain"]
											}
										}
									},
									"required": ["low", "high"]
								}
							],
							"additionalItems": false,
							"minItems": 12,
							"maxItems": 12
						}
					]
				},
				"dangers": {
					"allOf": [
						{
							"type": "array",
							"items": { "$ref": "#/$defs/DelveSiteDomainDangerRow" }
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 31, "type": "number" },
										"high": { "const": 33, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 34, "type": "number" },
										"high": { "const": 36, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 37, "type": "number" },
										"high": { "const": 39, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 40, "type": "number" },
										"high": { "const": 42, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 43, "type": "number" },
										"high": { "const": 45, "type": "number" }
									},
									"required": ["low", "high"]
								}
							],
							"additionalItems": false,
							"minItems": 5,
							"maxItems": 5
						}
					]
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "summary", "card_type", "features", "dangers"]
		},
		"DelveSiteDomainDangerRow": {
			"$id": "#/$defs/DelveSiteDomainDangerRow",
			"type": "object",
			"properties": {
				"result": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"embed_table": { "$ref": "#/$defs/OracleTableID" },
				"template": { "$ref": "#/$defs/OracleRollTemplate" },
				"id": { "$ref": "#/$defs/DomainDangerRowID" },
				"low": { "type": "integer" },
				"high": { "type": "integer" }
			},
			"required": ["result", "low", "high"],
			"title": "DelveSiteDomainDangerRow"
		},
		"DelveSiteDomainFeatureRow": {
			"$id": "#/$defs/DelveSiteDomainFeatureRow",
			"type": "object",
			"properties": {
				"result": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"embed_table": { "$ref": "#/$defs/OracleTableID" },
				"template": { "$ref": "#/$defs/OracleRollTemplate" },
				"id": { "$ref": "#/$defs/DomainFeatureRowID" },
				"low": { "type": "integer" },
				"high": { "type": "integer" }
			},
			"required": ["result", "low", "high"],
			"title": "DelveSiteDomainFeatureRow"
		},
		"DelveSiteTheme": {
			"$id": "#/$defs/DelveSiteTheme",
			"title": "Delve site theme",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"id": { "$ref": "#/$defs/DelveSiteThemeID" },
				"card_type": { "const": "theme", "type": "string" },
				"features": {
					"allOf": [
						{
							"type": "array",
							"items": { "$ref": "#/$defs/DelveSiteThemeFeatureRow" }
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 1, "type": "number" },
										"high": { "const": 4, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 5, "type": "number" },
										"high": { "const": 8, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 9, "type": "number" },
										"high": { "const": 12, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 13, "type": "number" },
										"high": { "const": 16, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 17, "type": "number" },
										"high": { "const": 20, "type": "number" }
									},
									"required": ["low", "high"]
								}
							],
							"additionalItems": false,
							"minItems": 5,
							"maxItems": 5
						}
					]
				},
				"dangers": {
					"allOf": [
						{
							"type": "array",
							"items": { "$ref": "#/$defs/DelveSiteThemeDangerRow" }
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 1, "type": "number" },
										"high": { "const": 5, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 6, "type": "number" },
										"high": { "const": 10, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 11, "type": "number" },
										"high": { "const": 12, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 13, "type": "number" },
										"high": { "const": 14, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 15, "type": "number" },
										"high": { "const": 16, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 17, "type": "number" },
										"high": { "const": 18, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 19, "type": "number" },
										"high": { "const": 20, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 21, "type": "number" },
										"high": { "const": 22, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 23, "type": "number" },
										"high": { "const": 24, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 25, "type": "number" },
										"high": { "const": 26, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 27, "type": "number" },
										"high": { "const": 28, "type": "number" }
									},
									"required": ["low", "high"]
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 29, "type": "number" },
										"high": { "const": 30, "type": "number" }
									},
									"required": ["low", "high"]
								}
							],
							"additionalItems": false,
							"minItems": 12,
							"maxItems": 12
						}
					]
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "summary", "card_type", "features", "dangers"]
		},
		"DelveSiteThemeDangerRow": {
			"$id": "#/$defs/DelveSiteThemeDangerRow",
			"type": "object",
			"properties": {
				"result": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"embed_table": { "$ref": "#/$defs/OracleTableID" },
				"template": { "$ref": "#/$defs/OracleRollTemplate" },
				"id": { "$ref": "#/$defs/ThemeDangerRowID" },
				"low": { "type": "integer" },
				"high": { "type": "integer" }
			},
			"required": ["result", "low", "high"],
			"title": "DelveSiteThemeDangerRow"
		},
		"DelveSiteThemeFeatureRow": {
			"$id": "#/$defs/DelveSiteThemeFeatureRow",
			"type": "object",
			"properties": {
				"result": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"embed_table": { "$ref": "#/$defs/OracleTableID" },
				"template": { "$ref": "#/$defs/OracleRollTemplate" },
				"id": { "$ref": "#/$defs/ThemeFeatureRowID" },
				"low": { "type": "integer" },
				"high": { "type": "integer" }
			},
			"required": ["result", "low", "high"],
			"title": "DelveSiteThemeFeatureRow"
		},
		"EncounterCollectionClassic": {
			"$id": "#/$defs/EncounterCollectionClassic",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/EncounterCollectionID" },
				"extends": {
					"$ref": "#/$defs/EncounterCollectionID",
					"description": "Indicates that this collection's content enhances another collection, rather than being a standalone collection of its own."
				},
				"imports": {
					"macro": true,
					"description": "Collection borrows content from another collection. The target collection should be cloned, and this collection's values then merged to the clone as overrides.",
					"type": "object",
					"properties": {
						"from": {
							"$ref": "#/$defs/EncounterCollectionID",
							"description": "The collection imported by this collection."
						},
						"include": {
							"description": "IDs (which may be wildcarded) for the items to import, or `null` if the entire collection should be imported.",
							"anyOf": [
								{ "type": "null" },
								{
									"type": "array",
									"items": { "$ref": "#/$defs/EncounterClassicIDWildcard" }
								}
							]
						}
					},
					"required": ["from", "include"]
				},
				"color": { "$ref": "#/$defs/CSSColor" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"contents": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/EncounterClassic" }
					}
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name"],
			"title": "EncounterCollectionClassic"
		},
		"EncounterClassic": {
			"$id": "#/$defs/EncounterClassic",
			"title": "Encounter (classic)",
			"description": "An encounter entry, similar to those in Chapter 5 of the Ironsworn Rulebook.",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownString" }
				},
				"description": { "$ref": "#/$defs/MarkdownString" },
				"quest_starter": { "$ref": "#/$defs/MarkdownString" },
				"nature": {
					"description": "A localized category label describing the nature of this encounter. In Ironsworn classic, this is probably the singular form of the parent collection's name.",
					"examples": [
						"Ironlander",
						"Firstborn",
						"Animal",
						"Beasts",
						"Horror",
						"Anomaly"
					],
					"$ref": "#/$defs/Label"
				},
				"rank": { "$ref": "#/$defs/ChallengeRank" },
				"drives": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownString" }
				},
				"tactics": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownString" }
				},
				"id": { "$ref": "#/$defs/EncounterClassicID" },
				"your_truths": { "$ref": "#/$defs/MarkdownString" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": [
				"name",
				"features",
				"description",
				"quest_starter",
				"nature",
				"rank",
				"drives",
				"tactics"
			]
		},
		"Rarity": {
			"$id": "#/$defs/Rarity",
			"description": "A rarity, as described in Ironsworn: Delve.",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/RarityID" },
				"asset": {
					"description": "The asset enhanced by this rarity.",
					"$ref": "#/$defs/AssetID"
				},
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"xp_cost": {
					"minimum": 3,
					"maximum": 5,
					"default": 3,
					"description": "From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.",
					"type": "integer"
				},
				"description": { "$ref": "#/$defs/MarkdownString" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "asset", "description"],
			"title": "Rarity"
		},
		"RegionEntry": {
			"$id": "#/$defs/RegionEntry",
			"title": "Region entry",
			"description": "A region entry, like the Ironlands region entries found in classic Ironsworn.",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownString" }
				},
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"quest_starter": { "$ref": "#/$defs/MarkdownString" },
				"id": { "$ref": "#/$defs/RegionEntryID" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": [
				"name",
				"features",
				"summary",
				"description",
				"quest_starter"
			]
		},
		"WorldTruth": {
			"$id": "#/$defs/WorldTruth",
			"title": "World truth",
			"description": "A world truth category in the format used by Ironsworn.",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"options": {
					"type": "array",
					"items": { "$ref": "#/$defs/WorldTruthOption" }
				},
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"id": { "$ref": "#/$defs/WorldTruthID" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "options"]
		},
		"WorldTruthOption": {
			"title": "World truth option",
			"$id": "#/$defs/WorldTruthOption",
			"type": "object",
			"properties": {
				"description": { "$ref": "#/$defs/MarkdownString" },
				"quest_starter": { "$ref": "#/$defs/MarkdownString" },
				"id": { "$ref": "#/$defs/WorldTruthOptionID" }
			},
			"required": ["description", "quest_starter"]
		}
	},
	"type": "object",
	"properties": {
		"id": { "type": "string", "pattern": "^[a-z0-9_]{3,}$" },
		"ruleset": { "const": "classic", "type": "string" },
		"source": { "$ref": "#/$defs/Source" },
		"oracles": {
			"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleCollection" }
			}
		},
		"moves": {
			"description": "A dictionary object containing move categories, which contain moves.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/MoveCategory" }
			}
		},
		"assets": {
			"description": "A dictionary object containing asset types, which contain assets.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetType" } }
		},
		"regions": {
			"description": "A dictionary object containing region entries, like those used to describe the Ironlands in classic Ironsworn.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/RegionEntry" }
			}
		},
		"encounters": {
			"description": "A dictionary object containing Ironsworn classic-style encounters, grouped according to their nature (e.g. \"Ironlander\", \"horror\".",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/EncounterCollectionClassic" }
			}
		},
		"rarities": {
			"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/Rarity" } }
		},
		"delve_sites": {
			"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/DelveSite" } }
		},
		"site_themes": {
			"description": "A dictionary object containing delve site themes.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/DelveSiteTheme" }
			}
		},
		"site_domains": {
			"description": "A dictionary object containing delve site domains.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/DelveSiteDomain" }
			}
		},
		"world_truths": {
			"description": "A dictionary object of world truth categories, like those presented in classic Ironsworn.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/WorldTruth" }
			}
		},
		"_source": { "$ref": "#/$defs/SourceStub" }
	},
	"required": ["ruleset"]
}
