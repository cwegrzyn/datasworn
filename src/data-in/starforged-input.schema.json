{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "https://ironswornrpg.com/starforged-input.schema.json",
	"title": "Dataforged v2.0.0-dev (data entry)",
	"description": "Data entry schema for Dataforged, which provides templates and other conveniences like source inheritance. It must be processed into the standard Dataforged format.",
	"$defs": {
		"EncounterClassicID": {
			"$id": "#/$defs/EncounterClassicID",
			"examples": [
				"classic/encounters/firstborn/elf",
				"delve/encounters/anomalies/glimmer"
			],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/encounters(\\/[a-z_]+){2}$",
			"title": "EncounterClassicID"
		},
		"EncounterStarforgedID": {
			"$id": "#/$defs/EncounterStarforgedID",
			"examples": [
				"starforged/encounters/chiton",
				"starforged/encounters/chiton/variants/chiton_drone_pack"
			],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/encounters\\/[a-z_]+(\\/variants\\/[a-z_]+)?$",
			"title": "EncounterStarforgedID"
		},
		"EncounterCollectionID": {
			"$id": "#/$defs/EncounterCollectionID",
			"examples": ["classic/collections/encounters/firstborn"],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/encounters\\/[a-z_]+$",
			"title": "EncounterCollectionID"
		},
		"AssetID": {
			"$id": "#/$defs/AssetID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}$",
			"title": "AssetID"
		},
		"AssetIDWildcard": {
			"$id": "#/$defs/AssetIDWildcard",
			"type": "string",
			"pattern": "^([a-z_]+|\\*)\\/assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)$",
			"title": "AssetIDWildcard"
		},
		"AssetTypeID": {
			"$id": "#/$defs/AssetTypeID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/assets\\/[a-z_]+$",
			"title": "AssetTypeID"
		},
		"AssetOptionFieldID": {
			"$id": "#/$defs/AssetOptionFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/options\\/[a-z_]+",
			"title": "AssetOptionFieldID"
		},
		"AssetOptionFieldIDWildcard": {
			"$id": "#/$defs/AssetOptionFieldIDWildcard",
			"type": "string",
			"pattern": "^(\\*|[a-z0-9_]{3,})\\/assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/options\\/[a-z_]+$",
			"title": "AssetOptionFieldIDWildcard"
		},
		"AssetControlFieldID": {
			"$id": "#/$defs/AssetControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/controls\\/[a-z_]+$",
			"title": "AssetControlFieldID"
		},
		"AssetControlFieldIDWildcard": {
			"$id": "#/$defs/AssetControlFieldIDWildcard",
			"type": "string",
			"pattern": "^(\\*|[a-z0-9_]{3,})\\/assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/controls\\/[a-z_]+$",
			"title": "AssetControlFieldIDWildcard"
		},
		"AssetConditionMeterID": {
			"$id": "#/$defs/AssetConditionMeterID",
			"title": "Asset condition meter ID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/condition_meter$"
		},
		"AssetConditionMeterIDWildcard": {
			"$id": "#/$defs/AssetConditionMeterIDWildcard",
			"title": "Asset condition meter ID (wildcard)",
			"type": "string",
			"pattern": "^([a-z_]+|\\*)\\/assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/condition_meter$"
		},
		"AssetConditionMeterControlFieldID": {
			"$id": "#/$defs/AssetConditionMeterControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/condition_meter\\/controls\\/[a-z_]+$",
			"title": "AssetConditionMeterControlFieldID"
		},
		"AssetAbilityID": {
			"$id": "#/$defs/AssetAbilityID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/abilities\\/[0-2]$",
			"title": "AssetAbilityID"
		},
		"AssetAbilityOptionFieldID": {
			"$id": "#/$defs/AssetAbilityOptionFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/abilities\\/[0-2]\\/options\\/[a-z_]+$",
			"title": "AssetAbilityOptionFieldID"
		},
		"AssetAbilityControlFieldID": {
			"$id": "#/$defs/AssetAbilityControlFieldID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/assets(\\/[a-z_]+){2}\\/abilities\\/[0-2]\\/controls\\/[a-z_]+$",
			"title": "AssetAbilityControlFieldID"
		},
		"DelveSiteID": {
			"examples": ["delve/delve_sites/alvas_rest"],
			"$id": "#/$defs/DelveSiteID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/delve_sites\\/[a-z_]+$",
			"title": "DelveSiteID"
		},
		"DelveSiteDenizenID": {
			"examples": ["delve/delve_sites/alvas_rest/denizens/1-27"],
			"$id": "#/$defs/DelveSiteDenizenID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/delve_sites\\/[a-z_]+\\/denizens\\/[1-9][0-9]*-[1-9][0-9]*",
			"title": "DelveSiteDenizenID"
		},
		"DelveSiteThemeID": {
			"$id": "#/$defs/DelveSiteThemeID",
			"examples": ["delve/site_themes/hallowed"],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_themes\\/[a-z_]+$",
			"title": "DelveSiteThemeID"
		},
		"ThemeFeatureRowID": {
			"$id": "#/$defs/ThemeFeatureRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_themes\\/[a-z_]+\\/features\\/[1-9][0-9]*-[1-9][0-9]*$",
			"title": "ThemeFeatureRowID"
		},
		"ThemeDangerRowID": {
			"$id": "#/$defs/ThemeDangerRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_themes\\/[a-z_]+\\/dangers\\/[1-9][0-9]*-[1-9][0-9]*$",
			"title": "ThemeDangerRowID"
		},
		"DelveSiteDomainID": {
			"$id": "#/$defs/DelveSiteDomainID",
			"examples": ["delve/site_domains/shadowfen"],
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/[a-z_]+$",
			"title": "DelveSiteDomainID"
		},
		"DomainFeatureRowID": {
			"$id": "#/$defs/DomainFeatureRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/[a-z_]+\\/features\\/[1-9][0-9]*-[1-9][0-9]*$",
			"title": "DomainFeatureRowID"
		},
		"DomainDangerRowID": {
			"$id": "#/$defs/DomainDangerRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/site_domains\\/[a-z_]+\\/dangers\\/[1-9][0-9]*-[1-9][0-9]*$",
			"title": "DomainDangerRowID"
		},
		"MoveID": {
			"description": "A move ID, for a standard move or a unique asset move",
			"examples": [
				"classic/moves/combat/strike",
				"starforged/assets/module/grappler/abilities/0/moves/ready_grappler"
			],
			"$id": "#/$defs/MoveID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/(moves\\/[a-z_]+\\/[a-z_]+|assets\\/[a-z_]+\\/[a-z_]+\\/abilities\\/[0-2]\\/moves\\/[a-z_]+)$",
			"title": "MoveID"
		},
		"MoveIDWildcard": {
			"title": "Move ID (with wildcard)",
			"description": "A move ID with wildcards",
			"examples": [
				"*/moves/*/face_danger",
				"*/assets/ritual/*/abilities/*/moves/*"
			],
			"$id": "#/$defs/MoveIDWildcard",
			"type": "string",
			"pattern": "^([a-z0-9_]{3,}|\\*)\\/(moves\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)|assets\\/([a-z_]+|\\*)\\/([a-z_]+|\\*)\\/abilities\\/([0-2]|\\*)\\/moves\\/([a-z_]+|\\*))$"
		},
		"MoveCategoryID": {
			"examples": ["starforged/collections/moves/adventure"],
			"$id": "#/$defs/MoveCategoryID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/moves\\/[a-z_]+$",
			"title": "MoveCategoryID"
		},
		"OracleTableRowID": {
			"examples": [
				"classic/oracles/action_and_theme/action/1-1",
				"starforged/oracles/derelicts/zones/starship/0"
			],
			"description": "Normally, rows will end with two numbers separated by a dash, indicating their dice range.\n\nRows with a single number represent unrollable rows that are sometimes included for rendering purposes; in this case, the number represents the row's index.",
			"$id": "#/$defs/OracleTableRowID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/[a-z_]+){2,4}\\/([1-9][0-9]*-[1-9][0-9]*)|(0|[1-9][0-9]*)$",
			"title": "OracleTableRowID"
		},
		"OracleTableID": {
			"examples": [
				"starforged/oracles/core/action",
				"starforged/oracles/character/names/given",
				"starforged/oracles/planets/furnace/settlements/terminus"
			],
			"$id": "#/$defs/OracleTableID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/oracles(\\/[a-z_]+){2,4}$",
			"title": "OracleTableID"
		},
		"OracleCollectionID": {
			"examples": [
				"starforged/collections/oracles/core",
				"starforged/collections/oracles/character/names",
				"starforged/collections/oracles/planets/furnace/settlements"
			],
			"$id": "#/$defs/OracleCollectionID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/collections\\/oracles(\\/[a-z_]+){1,3}$",
			"title": "OracleCollectionID"
		},
		"RarityID": {
			"examples": ["classic/rarities/ayethins_journal"],
			"$id": "#/$defs/RarityID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/rarities\\/[a-z_]+$",
			"title": "RarityID"
		},
		"RegionEntryID": {
			"examples": ["classic/regions/shattered_wastes"],
			"$id": "#/$defs/RegionEntryID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/regions\\/[a-z_]+$",
			"title": "RegionEntryID"
		},
		"WorldTruthID": {
			"examples": ["classic/world_truths/iron"],
			"$id": "#/$defs/WorldTruthID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/world_truths\\/[a-z_]+$",
			"title": "WorldTruthID"
		},
		"WorldTruthOptionID": {
			"examples": ["classic/world_truths/iron/0"],
			"$id": "#/$defs/WorldTruthOptionID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/world_truths\\/[a-z_]+\\/(0|[1-9][0-9]*)$",
			"title": "WorldTruthOptionID"
		},
		"SettingTruthID": {
			"examples": ["starforged/setting_truths/iron"],
			"$id": "#/$defs/SettingTruthID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/setting_truths\\/[a-z_]+$",
			"title": "SettingTruthID"
		},
		"SettingTruthOptionID": {
			"examples": ["starforged/setting_truths/iron/0"],
			"$id": "#/$defs/SettingTruthOptionID",
			"type": "string",
			"pattern": "^[a-z0-9_]{3,}\\/setting_truths\\/[a-z_]+\\/(0|[1-9][0-9]*)$",
			"title": "SettingTruthOptionID"
		},
		"Ruleset": {
			"$id": "#/$defs/Ruleset",
			"description": "The ruleset used for a sourcebook's rules content.",
			"enum": ["classic", "starforged"],
			"title": "Ruleset"
		},
		"SVGImageURL": {
			"$id": "#/$defs/SVGImageURL",
			"format": "uri-reference",
			"description": "A relative URL pointing to a vector image in the SVG format.",
			"type": "string",
			"title": "SVGImageURL"
		},
		"WEBPImageURL": {
			"$id": "#/$defs/WEBPImageURL",
			"format": "uri-reference",
			"description": "A relative URL pointing to a raster image in the WEBP format.",
			"type": "string",
			"title": "WEBPImageURL"
		},
		"CSSColor": {
			"title": "CSS Color",
			"$id": "#/$defs/CSSColor",
			"description": "A CSS color value. See: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value",
			"type": "string"
		},
		"Source": {
			"description": "Metadata describing the original source of this item",
			"$id": "#/$defs/Source",
			"type": "object",
			"properties": {
				"title": {
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					],
					"type": "string"
				},
				"page": { "minimum": 1, "title": "Page number", "type": "integer" },
				"authors": {
					"minItems": 1,
					"type": "array",
					"items": {
						"examples": [{ "name": "Shawn Tomkin" }],
						"type": "object",
						"properties": {
							"name": { "examples": ["Shawn Tomkin"], "type": "string" },
							"email": {
								"format": "email",
								"description": "An optional email contact for the author",
								"type": "string"
							}
						},
						"required": ["name"]
					}
				},
				"date": {
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"type": "string"
				},
				"url": {
					"format": "uri",
					"description": "An absolute URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"],
					"type": "string"
				},
				"license": {
					"description": "An absolute URL pointing to the location where this element's license can be found.\n\nA `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Dataforged's build process skips unlicensed content by default.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [{ "format": "uri", "type": "string" }, { "type": "null" }]
				}
			},
			"required": ["title", "authors", "date", "url", "license"],
			"title": "Source"
		},
		"SourceStub": {
			"description": "A source data stub that inherits data from ancestor elements during post-processing. To prevent inheritance, use the regular `source` property instead.",
			"$id": "#/$defs/SourceStub",
			"type": "object",
			"properties": {
				"title": {
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					],
					"type": "string"
				},
				"page": { "minimum": 1, "title": "Page number", "type": "integer" },
				"authors": {
					"minItems": 1,
					"type": "array",
					"items": {
						"examples": [{ "name": "Shawn Tomkin" }],
						"type": "object",
						"properties": {
							"name": { "examples": ["Shawn Tomkin"], "type": "string" },
							"email": {
								"format": "email",
								"description": "An optional email contact for the author",
								"type": "string"
							}
						},
						"required": ["name"]
					}
				},
				"date": {
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"type": "string"
				},
				"url": {
					"format": "uri",
					"description": "An absolute URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"],
					"type": "string"
				},
				"license": {
					"description": "An absolute URL pointing to the location where this element's license can be found.\n\nA `null` here indicates that the content provides **no** license, and is not intended for redistribution.  Dataforged's build process skips unlicensed content by default.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [{ "format": "uri", "type": "string" }, { "type": "null" }]
				}
			},
			"title": "SourceStub"
		},
		"SuggestionsClassic": {
			"$id": "#/$defs/SuggestionsClassic",
			"type": "object",
			"properties": {
				"oracles": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableID" }
				},
				"assets": { "type": "array", "items": { "$ref": "#/$defs/AssetID" } },
				"moves": { "type": "array", "items": { "$ref": "#/$defs/MoveID" } },
				"site_domains": {
					"type": "array",
					"items": { "$ref": "#/$defs/DelveSiteDomainID" }
				},
				"site_themes": {
					"type": "array",
					"items": { "$ref": "#/$defs/DelveSiteThemeID" }
				},
				"encounters": {
					"type": "array",
					"items": { "$ref": "#/$defs/EncounterClassicID" }
				},
				"regions": {
					"type": "array",
					"items": { "$ref": "#/$defs/RegionEntryID" }
				}
			},
			"title": "SuggestionsClassic"
		},
		"SuggestionsStarforged": {
			"$id": "#/$defs/SuggestionsStarforged",
			"type": "object",
			"properties": {
				"oracles": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableID" }
				},
				"assets": { "type": "array", "items": { "$ref": "#/$defs/AssetID" } },
				"moves": { "type": "array", "items": { "$ref": "#/$defs/MoveID" } },
				"encounters": {
					"type": "array",
					"items": { "$ref": "#/$defs/EncounterStarforgedID" }
				}
			},
			"title": "SuggestionsStarforged"
		},
		"Suggestions": {
			"$id": "#/$defs/Suggestions",
			"anyOf": [
				{ "$ref": "#/$defs/SuggestionsClassic" },
				{ "$ref": "#/$defs/SuggestionsStarforged" }
			],
			"title": "Suggestions"
		},
		"Label": {
			"$id": "#/$defs/Label",
			"description": "A localized plain text name or label.",
			"type": "string",
			"title": "Label"
		},
		"MarkdownString": {
			"$id": "#/$defs/MarkdownString",
			"description": "Localized text, formatted in Markdown.\n\nIt uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates that the referenced oracle table is rendered there part of the source material.",
			"type": "string",
			"title": "MarkdownString"
		},
		"TemplateString": {
			"$id": "#/$defs/TemplateString",
			"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `result` key, for example `{{result:starforged/oracles/core/action}}`\n",
			"type": "string",
			"title": "TemplateString"
		},
		"ProgressType": {
			"$id": "#/$defs/ProgressType",
			"anyOf": [
				{ "$ref": "#/$defs/ProgressTypeClassic" },
				{ "$ref": "#/$defs/ProgressTypeStarforged" }
			],
			"title": "ProgressType"
		},
		"ChallengeRank": {
			"$id": "#/$defs/ChallengeRank",
			"description": "Challenge rank, represented as a number: 1 = Troublesome, 2 = Dangerous, 3 = Formidable, 4 = Extreme, 5 = Epic",
			"enum": [1, 2, 3, 4, 5],
			"title": "ChallengeRank"
		},
		"PlayerConditionMeter": {
			"$id": "#/$defs/PlayerConditionMeter",
			"enum": ["health", "spirit", "supply"],
			"title": "PlayerConditionMeter"
		},
		"PlayerStat": {
			"$id": "#/$defs/PlayerStat",
			"enum": ["edge", "heart", "iron", "shadow", "wits"],
			"title": "PlayerStat"
		},
		"ProgressTypeClassic": {
			"$id": "#/$defs/ProgressTypeClassic",
			"enum": [
				"combat_progress",
				"vow_progress",
				"scene_challenge_progress",
				"journey_progress",
				"delve_progress",
				"bonds_progress",
				"failure_track"
			],
			"title": "ProgressTypeClassic"
		},
		"LegacyTypeStarforged": {
			"$id": "#/$defs/LegacyTypeStarforged",
			"enum": ["quests_legacy", "bonds_legacy", "discoveries_legacy"],
			"title": "LegacyTypeStarforged"
		},
		"ProgressTypeStarforged": {
			"$id": "#/$defs/ProgressTypeStarforged",
			"anyOf": [
				{ "$ref": "#/$defs/LegacyTypeStarforged" },
				{
					"enum": [
						"combat_progress",
						"vow_progress",
						"scene_challenge_progress",
						"expedition_progress",
						"connection_progress"
					]
				}
			],
			"title": "ProgressTypeStarforged"
		},
		"OracleRollTemplate": {
			"$id": "#/$defs/OracleRollTemplate",
			"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{result:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.",
			"type": "object",
			"properties": {
				"result": {
					"description": "A string template that may be used in place of OracleTableRow#result.",
					"examples": [
						"{{result:starforged/oracles/factions/affiliation}} of the {{result:starforged/oracles/factions/legacy}} {{result:starforged/oracles/factions/identity}}"
					],
					"$ref": "#/$defs/TemplateString"
				},
				"summary": {
					"description": "A string template that may be used in place of OracleTableRow#summary.",
					"$ref": "#/$defs/TemplateString"
				},
				"description": {
					"description": "A string template that may be used in place of OracleTableRow#description.",
					"$ref": "#/$defs/TemplateString"
				}
			},
			"title": "OracleRollTemplate"
		},
		"OracleTableRollMethod": {
			"default": "no_duplicates",
			"$id": "#/$defs/OracleTableRollMethod",
			"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"],
			"title": "OracleTableRollMethod"
		},
		"OracleTableRoll": {
			"$id": "#/$defs/OracleTableRoll",
			"type": "object",
			"properties": {
				"oracle": {
					"description": "The ID of the oracle table to be rolled. If omitted, it defaults to the ID of this oracle table.",
					"$ref": "#/$defs/OracleTableID"
				},
				"times": { "minimum": 1, "default": 1, "type": "integer" },
				"method": { "$ref": "#/$defs/OracleTableRollMethod" }
			},
			"required": [],
			"title": "OracleTableRoll"
		},
		"OracleTableRow": {
			"$id": "#/$defs/OracleTableRow",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/$defs/OracleTableRowID" },
				"low": {
					"type": ["integer", "null"],
					"default": null,
					"description": "Low end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				},
				"high": {
					"type": ["integer", "null"],
					"default": null,
					"description": "High end of the dice range for this table row. `null` represents an unrollable row, included only for rendering purposes."
				},
				"result": { "$ref": "#/$defs/MarkdownString" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"embed_table": { "$ref": "#/$defs/OracleTableID" },
				"template": { "$ref": "#/$defs/OracleRollTemplate" }
			},
			"required": ["low", "high", "result"],
			"title": "OracleTableRow"
		},
		"OracleTableMatchBehavior": {
			"$id": "#/$defs/OracleTableMatchBehavior",
			"title": "Match behavior",
			"type": "object",
			"properties": { "text": { "$ref": "#/$defs/MarkdownString" } },
			"required": ["text"]
		},
		"OracleTableStyle": {
			"$id": "#/$defs/OracleTableStyle",
			"enum": ["table", "embed_in_row", "embed_as_column"],
			"title": "OracleTableStyle"
		},
		"OracleColumnContentType": {
			"$id": "#/$defs/OracleColumnContentType",
			"enum": ["range", "result", "summary", "description"],
			"title": "OracleColumnContentType"
		},
		"OracleTableColumn": {
			"$id": "#/$defs/OracleTableColumn",
			"type": "object",
			"properties": {
				"label": { "$ref": "#/$defs/Label" },
				"content_type": { "$ref": "#/$defs/OracleColumnContentType" }
			},
			"required": ["content_type"],
			"title": "OracleTableColumn"
		},
		"OracleCollectionColumn": {
			"$id": "#/$defs/OracleCollectionColumn",
			"description": "A column's default label is the title of the source table.",
			"type": "object",
			"properties": {
				"label": { "$ref": "#/$defs/Label" },
				"content_type": { "$ref": "#/$defs/OracleColumnContentType" },
				"table_key": { "type": "string", "pattern": "^[a-z][a-z_]*$" },
				"color": { "$ref": "#/$defs/CSSColor" }
			},
			"required": ["content_type", "table_key"],
			"title": "OracleCollectionColumn"
		},
		"OracleTableRendering": {
			"$id": "#/$defs/OracleTableRendering",
			"type": "object",
			"properties": {
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"style": { "$ref": "#/$defs/OracleTableStyle" },
				"color": { "$ref": "#/$defs/CSSColor" }
			},
			"title": "OracleTableRendering"
		},
		"DiceNotation": {
			"$id": "#/$defs/DiceNotation",
			"type": "string",
			"pattern": "([1-9][0-9]*)d(0|[1-9][0-9]*)([+-]([1-9][0-9]*))?",
			"title": "DiceNotation"
		},
		"OracleTable": {
			"$id": "#/$defs/OracleTable",
			"title": "Oracle table",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/OracleTableID" },
				"dice": { "default": "1d100", "$ref": "#/$defs/DiceNotation" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"match": { "$ref": "#/$defs/OracleTableMatchBehavior" },
				"table": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableRow" }
				},
				"rendering": { "$ref": "#/$defs/OracleTableRendering" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "table"]
		},
		"OracleCollectionStyle": {
			"$id": "#/$defs/OracleCollectionStyle",
			"enum": ["multi_table"],
			"title": "OracleCollectionStyle"
		},
		"OracleCollectionRendering": {
			"$id": "#/$defs/OracleCollectionRendering",
			"type": "object",
			"properties": {
				"columns": {
					"allOf": [
						{
							"description": "Describes the rendering of this oracle as a standalone table.",
							"$comment": "Deserialize as a dictionary object.",
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleTableColumn" }
							}
						},
						{
							"$comment": "Deserialize as a dictionary object.",
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleCollectionColumn" }
							}
						}
					]
				},
				"color": { "$ref": "#/$defs/CSSColor" },
				"style": { "$ref": "#/$defs/OracleCollectionStyle" }
			},
			"required": ["columns"],
			"title": "OracleCollectionRendering"
		},
		"OracleCollection": {
			"$id": "#/$defs/OracleCollection",
			"title": "Oracle collection",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/OracleCollectionID" },
				"extends": { "$ref": "#/$defs/OracleCollectionID" },
				"color": { "$ref": "#/$defs/CSSColor" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"contents": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleTable" }
					}
				},
				"collections": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleCollection" }
					}
				},
				"rendering": { "$ref": "#/$defs/OracleCollectionRendering" },
				"images": {
					"type": "array",
					"items": { "$ref": "#/$defs/WEBPImageURL" }
				},
				"sample_names": {
					"type": "array",
					"items": { "$ref": "#/$defs/Label" }
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name"]
		},
		"MoveRollMethod": {
			"$id": "#/$defs/MoveRollMethod",
			"description": "`any`: When rolling with this move trigger condition, the player picks which stat to use.\n\n`all`: When rolling with this move trigger condition, *every* stat or progress track of the `using` key is rolled.\n\n`highest`: When rolling with this move trigger condition, use the highest/best option from the `using` key.\n\n`lowest`: When rolling with this move trigger condition, use the lowest/worst option from the `using` key.",
			"enum": ["any", "all", "highest", "lowest"],
			"title": "MoveRollMethod"
		},
		"MoveRerollMethod": {
			"$id": "#/$defs/MoveRerollMethod",
			"enum": ["any", "all", "challenge_die", "challenge_dice", "action_die"],
			"title": "MoveRerollMethod"
		},
		"MoveOutcomeType": {
			"$id": "#/$defs/MoveOutcomeType",
			"enum": ["miss", "weak_hit", "strong_hit"],
			"title": "MoveOutcomeType"
		},
		"MoveRollType": {
			"$id": "#/$defs/MoveRollType",
			"enum": ["action_roll", "progress_roll", "no_roll"],
			"title": "MoveRollType"
		},
		"TriggerBy": {
			"$id": "#/$defs/TriggerBy",
			"description": "Information on who can trigger this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
			"type": "object",
			"properties": {
				"player": { "default": true, "type": "boolean" },
				"ally": { "default": false, "type": "boolean" }
			},
			"required": [],
			"title": "TriggerBy"
		},
		"TriggerActionRollConditionOptionAttachedAssetRef": {
			"$id": "#/$defs/TriggerActionRollConditionOptionAttachedAssetRef",
			"type": "object",
			"properties": {
				"using": { "const": "attached_asset_meter", "type": "string" }
			},
			"required": ["using"],
			"title": "TriggerActionRollConditionOptionAttachedAssetRef"
		},
		"TriggerActionRollConditionOptionRef": {
			"$id": "#/$defs/TriggerActionRollConditionOptionRef",
			"type": "object",
			"properties": {
				"using": { "const": "ref", "type": "string" },
				"ref": {
					"anyOf": [
						{ "$ref": "#/$defs/AssetConditionMeterIDWildcard" },
						{ "$ref": "#/$defs/AssetOptionFieldIDWildcard" }
					]
				}
			},
			"required": ["using", "ref"],
			"title": "TriggerActionRollConditionOptionRef"
		},
		"TriggerActionRollConditionOptionStat": {
			"$id": "#/$defs/TriggerActionRollConditionOptionStat",
			"type": "object",
			"properties": {
				"using": {
					"anyOf": [
						{ "$ref": "#/$defs/PlayerStat" },
						{ "$ref": "#/$defs/PlayerConditionMeter" }
					]
				}
			},
			"required": ["using"],
			"title": "TriggerActionRollConditionOptionStat"
		},
		"TriggerActionRollConditionOptionCustomValue": {
			"$id": "#/$defs/TriggerActionRollConditionOptionCustomValue",
			"type": "object",
			"properties": {
				"using": { "const": "custom_value", "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"value": { "minimum": 0, "type": "integer" }
			},
			"required": ["using", "label", "value"],
			"title": "TriggerActionRollConditionOptionCustomValue"
		},
		"TriggerActionRollConditionOption": {
			"$id": "#/$defs/TriggerActionRollConditionOption",
			"anyOf": [
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionStat" },
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionRef" },
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionAttachedAssetRef" },
				{ "$ref": "#/$defs/TriggerActionRollConditionOptionCustomValue" }
			],
			"title": "TriggerActionRollConditionOption"
		},
		"TriggerProgressRollConditionOption": {
			"$id": "#/$defs/TriggerProgressRollConditionOption",
			"type": "object",
			"properties": { "using": { "$ref": "#/$defs/ProgressType" } },
			"required": ["using"],
			"title": "TriggerProgressRollConditionOption"
		},
		"TriggerActionRollCondition": {
			"$id": "#/$defs/TriggerActionRollCondition",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollConditionOption" }
				}
			},
			"required": ["roll_options"],
			"title": "TriggerActionRollCondition"
		},
		"TriggerProgressRollCondition": {
			"$id": "#/$defs/TriggerProgressRollCondition",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollConditionOption" }
				}
			},
			"required": ["roll_options"],
			"title": "TriggerProgressRollCondition"
		},
		"TriggerNoRollCondition": {
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"by": { "$ref": "#/$defs/TriggerBy" }
			},
			"$id": "#/$defs/TriggerNoRollCondition",
			"title": "TriggerNoRollCondition"
		},
		"TriggerActionRoll": {
			"$id": "#/$defs/TriggerActionRoll",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/$defs/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollCondition" }
				}
			},
			"required": ["text", "conditions"],
			"title": "TriggerActionRoll"
		},
		"TriggerProgressRoll": {
			"$id": "#/$defs/TriggerProgressRoll",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/$defs/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollCondition" }
				}
			},
			"required": ["text", "conditions"],
			"title": "TriggerProgressRoll"
		},
		"TriggerNoRoll": {
			"$id": "#/$defs/TriggerNoRoll",
			"type": "object",
			"properties": {
				"text": {
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
					"type": "string",
					"pattern": ".*\\.{3}",
					"$ref": "#/$defs/MarkdownString"
				},
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerNoRollCondition" }
				}
			},
			"required": ["text"],
			"title": "TriggerNoRoll"
		},
		"MoveReroll": {
			"$id": "#/$defs/MoveReroll",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": { "$ref": "#/$defs/MoveRerollMethod" }
			},
			"required": ["method"],
			"title": "MoveReroll"
		},
		"MoveOutcome": {
			"$id": "#/$defs/MoveOutcome",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" }
			},
			"required": ["text"],
			"title": "MoveOutcome"
		},
		"MoveOutcomeMatchable": {
			"$id": "#/$defs/MoveOutcomeMatchable",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" },
				"match": { "$ref": "#/$defs/MoveOutcome" }
			},
			"required": ["text"],
			"title": "MoveOutcomeMatchable"
		},
		"MoveOutcomes": {
			"$id": "#/$defs/MoveOutcomes",
			"type": "object",
			"properties": {
				"miss": { "$ref": "#/$defs/MoveOutcomeMatchable" },
				"weak_hit": { "$ref": "#/$defs/MoveOutcome" },
				"strong_hit": { "$ref": "#/$defs/MoveOutcomeMatchable" }
			},
			"required": ["miss", "weak_hit", "strong_hit"],
			"title": "MoveOutcomes"
		},
		"Move": {
			"type": "object",
			"properties": {
				"move_type": {
					"default": "no_roll",
					"enum": ["action_roll", "progress_roll", "no_roll"]
				}
			},
			"required": [],
			"oneOf": [
				{
					"type": "object",
					"properties": {
						"id": { "$ref": "#/$defs/MoveID" },
						"name": { "$ref": "#/$defs/Label" },
						"trigger": {
							"allOf": [
								{
									"type": "object",
									"properties": {
										"text": {
											"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
											"type": "string",
											"pattern": ".*\\.{3}",
											"$ref": "#/$defs/MarkdownString"
										}
									},
									"required": ["text"]
								},
								{ "$ref": "#/$defs/TriggerNoRoll" }
							]
						},
						"text": { "$ref": "#/$defs/MarkdownString" },
						"outcomes": { "$ref": "#/$defs/MoveOutcomes" },
						"oracles": {
							"type": "array",
							"items": { "$ref": "#/$defs/OracleTableID" }
						},
						"suggestions": { "$ref": "#/$defs/Suggestions" },
						"source": { "$ref": "#/$defs/Source" },
						"move_type": { "const": "no_roll", "type": "string" },
						"_source": { "$ref": "#/$defs/SourceStub" }
					},
					"required": ["name", "trigger", "text", "move_type"]
				},
				{
					"type": "object",
					"properties": {
						"id": { "$ref": "#/$defs/MoveID" },
						"name": { "$ref": "#/$defs/Label" },
						"trigger": {
							"allOf": [
								{
									"type": "object",
									"properties": {
										"text": {
											"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
											"type": "string",
											"pattern": ".*\\.{3}",
											"$ref": "#/$defs/MarkdownString"
										}
									},
									"required": ["text"]
								},
								{ "$ref": "#/$defs/TriggerActionRoll" }
							]
						},
						"text": { "$ref": "#/$defs/MarkdownString" },
						"outcomes": {
							"allOf": [
								{ "$ref": "#/$defs/MoveOutcomes" },
								{ "$ref": "#/$defs/MoveOutcomes" }
							]
						},
						"oracles": {
							"type": "array",
							"items": { "$ref": "#/$defs/OracleTableID" }
						},
						"suggestions": { "$ref": "#/$defs/Suggestions" },
						"source": { "$ref": "#/$defs/Source" },
						"move_type": { "const": "action_roll", "type": "string" },
						"_source": { "$ref": "#/$defs/SourceStub" }
					},
					"required": ["name", "trigger", "text", "outcomes", "move_type"]
				},
				{
					"type": "object",
					"properties": {
						"id": { "$ref": "#/$defs/MoveID" },
						"name": { "$ref": "#/$defs/Label" },
						"trigger": {
							"allOf": [
								{
									"type": "object",
									"properties": {
										"text": {
											"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described described in Trigger#conditions.",
											"type": "string",
											"pattern": ".*\\.{3}",
											"$ref": "#/$defs/MarkdownString"
										}
									},
									"required": ["text"]
								},
								{ "$ref": "#/$defs/TriggerProgressRoll" }
							]
						},
						"text": { "$ref": "#/$defs/MarkdownString" },
						"outcomes": {
							"allOf": [
								{ "$ref": "#/$defs/MoveOutcomes" },
								{ "$ref": "#/$defs/MoveOutcomes" }
							]
						},
						"oracles": {
							"type": "array",
							"items": { "$ref": "#/$defs/OracleTableID" }
						},
						"suggestions": { "$ref": "#/$defs/Suggestions" },
						"source": { "$ref": "#/$defs/Source" },
						"move_type": { "const": "progress_roll", "type": "string" },
						"_source": { "$ref": "#/$defs/SourceStub" }
					},
					"required": ["name", "trigger", "text", "outcomes", "move_type"]
				}
			],
			"additionalProperties": true,
			"$id": "#/$defs/Move",
			"title": "Move"
		},
		"MoveCategory": {
			"$id": "#/$defs/MoveCategory",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/MoveCategoryID" },
				"extends": { "$ref": "#/$defs/MoveCategoryID" },
				"color": { "$ref": "#/$defs/CSSColor" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"contents": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/Move" } }
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name"],
			"title": "MoveCategory"
		},
		"TriggerActionRollConditionExtension": {
			"$id": "#/$defs/TriggerActionRollConditionExtension",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollConditionOption" }
				}
			},
			"title": "TriggerActionRollConditionExtension"
		},
		"TriggerActionRollExtension": {
			"$id": "#/$defs/TriggerActionRollExtension",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerActionRollConditionExtension" }
				}
			},
			"required": ["conditions"],
			"title": "TriggerActionRollExtension"
		},
		"TriggerProgressRollConditionExtension": {
			"$id": "#/$defs/TriggerProgressRollConditionExtension",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"method": {
					"default": "any",
					"anyOf": [
						{ "$ref": "#/$defs/MoveRollMethod" },
						{ "$ref": "#/$defs/MoveOutcomeType" }
					]
				},
				"by": { "$ref": "#/$defs/TriggerBy" },
				"roll_options": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollConditionOption" }
				}
			},
			"title": "TriggerProgressRollConditionExtension"
		},
		"TriggerProgressRollExtension": {
			"$id": "#/$defs/TriggerProgressRollExtension",
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerProgressRollConditionExtension" }
				}
			},
			"required": ["conditions"],
			"title": "TriggerProgressRollExtension"
		},
		"TriggerNoRollExtension": {
			"type": "object",
			"properties": {
				"conditions": {
					"type": "array",
					"items": { "$ref": "#/$defs/TriggerNoRollCondition" }
				}
			},
			"required": ["conditions"]
		},
		"MoveOutcomeExtension": {
			"$id": "#/$defs/MoveOutcomeExtension",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" }
			},
			"title": "MoveOutcomeExtension"
		},
		"MoveOutcomeMatchableExtension": {
			"$id": "#/$defs/MoveOutcomeMatchableExtension",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"count_as": { "$ref": "#/$defs/MoveOutcomeType" },
				"reroll": { "$ref": "#/$defs/MoveReroll" },
				"match": { "$ref": "#/$defs/MoveOutcome" }
			},
			"title": "MoveOutcomeMatchableExtension"
		},
		"MoveOutcomesExtension": {
			"$id": "#/$defs/MoveOutcomesExtension",
			"type": "object",
			"properties": {
				"miss": { "$ref": "#/$defs/MoveOutcomeMatchableExtension" },
				"weak_hit": { "$ref": "#/$defs/MoveOutcomeExtension" },
				"strong_hit": { "$ref": "#/$defs/MoveOutcomeMatchableExtension" }
			},
			"title": "MoveOutcomesExtension"
		},
		"MoveExtension": {
			"$id": "#/$defs/MoveExtension",
			"type": "object",
			"properties": {
				"text": { "$ref": "#/$defs/MarkdownString" },
				"oracles": {
					"type": "array",
					"items": { "$ref": "#/$defs/OracleTableID" }
				},
				"extends": {
					"type": "array",
					"items": { "$ref": "#/$defs/MoveIDWildcard" }
				},
				"trigger": {},
				"move_type": {
					"default": "action_roll",
					"$ref": "#/$defs/MoveRollType"
				},
				"outcomes": {}
			},
			"required": [],
			"title": "MoveExtension"
		},
		"AssetConditionMeterControlField": {
			"type": "object",
			"$id": "#/$defs/AssetConditionMeterControlField",
			"title": "Asset Condition Meter Control Field",
			"anyOf": [{ "$ref": "#/$defs/CheckboxField" }],
			"properties": {
				"id": { "$ref": "#/$defs/AssetConditionMeterControlFieldID" }
			}
		},
		"AssetConditionMeter": {
			"$id": "#/$defs/AssetConditionMeter",
			"title": "Asset condition meter",
			"type": "object",
			"properties": {
				"min": { "default": 0, "type": "integer" },
				"max": { "type": "integer" },
				"value": { "type": "integer" },
				"id": { "$ref": "#/$defs/AssetConditionMeterID" },
				"label": { "$ref": "#/$defs/Label" },
				"controls": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetConditionMeterControlField"
						}
					}
				}
			},
			"required": ["max", "label"]
		},
		"AssetConditionMeterExtension": {
			"$id": "#/$defs/AssetConditionMeterExtension",
			"title": "Asset condition meter",
			"type": "object",
			"properties": {
				"min": { "default": 0, "type": "integer" },
				"max": { "type": "integer" },
				"controls": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"$ref": "#/$defs/AssetConditionMeterControlField"
						}
					}
				}
			}
		},
		"AssetOptionField": {
			"type": "object",
			"$id": "#/$defs/AssetOptionField",
			"title": "Asset Option Field",
			"anyOf": [
				{ "$ref": "#/$defs/SelectFieldStat" },
				{ "$ref": "#/$defs/TextField" }
			],
			"properties": { "id": { "$ref": "#/$defs/AssetOptionFieldID" } }
		},
		"AssetControlField": {
			"type": "object",
			"$id": "#/$defs/AssetControlField",
			"title": "Asset Control Field",
			"anyOf": [{ "$ref": "#/$defs/CheckboxField" }],
			"properties": { "id": { "$ref": "#/$defs/AssetControlFieldID" } }
		},
		"AssetAttachment": {
			"$id": "#/$defs/AssetAttachment",
			"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"type": "object",
			"properties": {
				"assets": {
					"description": "Asset IDs (which may be wildcards) that may be attached to this asset",
					"type": "array",
					"items": { "$ref": "#/$defs/AssetIDWildcard" }
				},
				"max": {
					"minimum": 1,
					"description": "Omit if there's no upper limit to the number of attached assets.",
					"type": "integer"
				}
			},
			"required": ["assets"],
			"title": "AssetAttachment"
		},
		"Asset": {
			"$id": "#/$defs/Asset",
			"title": "Asset",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/$defs/AssetID" },
				"name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"color": { "$ref": "#/$defs/CSSColor" },
				"options": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetOptionField" }
					}
				},
				"controls": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetControlField" }
					}
				},
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"requirement": { "$ref": "#/$defs/MarkdownString" },
				"abilities": {
					"minItems": 3,
					"maxItems": 3,
					"type": "array",
					"items": { "$ref": "#/$defs/AssetAbility" }
				},
				"condition_meter": { "$ref": "#/$defs/AssetConditionMeter" },
				"count_as_impact": {
					"default": false,
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"type": "boolean"
				},
				"attachments": { "$ref": "#/$defs/AssetAttachment" },
				"shared": {
					"default": false,
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
					"type": "boolean"
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "abilities"]
		},
		"AssetAbilityOptionField": {
			"type": "object",
			"$id": "#/$defs/AssetAbilityOptionField",
			"title": "Asset Ability Option Field",
			"anyOf": [{ "$ref": "#/$defs/TextField" }],
			"properties": { "id": { "$ref": "#/$defs/AssetAbilityOptionFieldID" } }
		},
		"AssetAbilityControlField": {
			"type": "object",
			"$id": "#/$defs/AssetAbilityControlField",
			"title": "Asset Ability Control Field",
			"anyOf": [
				{ "$ref": "#/$defs/ClockField" },
				{ "$ref": "#/$defs/CounterField" },
				{ "$ref": "#/$defs/CheckboxField" }
			],
			"properties": { "id": { "$ref": "#/$defs/AssetAbilityControlFieldID" } }
		},
		"AssetAbility": {
			"$id": "#/$defs/AssetAbility",
			"type": "object",
			"properties": {
				"id": { "$ref": "#/$defs/AssetAbilityID" },
				"name": { "$ref": "#/$defs/Label" },
				"text": { "$ref": "#/$defs/MarkdownString" },
				"enabled": { "default": false, "type": "boolean" },
				"moves": {
					"description": "Unique moves added by this asset ability.",
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/Move" } }
				},
				"options": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetAbilityOptionField" }
					}
				},
				"controls": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetAbilityControlField" }
					}
				},
				"extend_asset": {
					"type": "object",
					"allOf": [
						{
							"type": "object",
							"properties": {
								"icon": { "$ref": "#/$defs/SVGImageURL" },
								"color": { "$ref": "#/$defs/CSSColor" },
								"suggestions": { "$ref": "#/$defs/Suggestions" },
								"count_as_impact": {
									"default": false,
									"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
									"type": "boolean"
								},
								"attachments": { "$ref": "#/$defs/AssetAttachment" },
								"shared": {
									"default": false,
									"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
									"type": "boolean"
								}
							}
						},
						{
							"type": "object",
							"properties": {
								"condition_meter": {
									"$ref": "#/$defs/AssetConditionMeterExtension"
								}
							}
						}
					]
				},
				"extend_moves": {
					"type": "array",
					"items": { "$ref": "#/$defs/MoveExtension" }
				}
			},
			"required": ["text"],
			"title": "AssetAbility"
		},
		"AssetType": {
			"$id": "#/$defs/AssetType",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"id": { "$ref": "#/$defs/AssetTypeID" },
				"extends": { "$ref": "#/$defs/AssetTypeID" },
				"color": { "$ref": "#/$defs/CSSColor" },
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"contents": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/Asset" } }
				},
				"member_label": { "$ref": "#/$defs/Label" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name"],
			"title": "AssetType"
		},
		"CheckboxField": {
			"$id": "#/$defs/CheckboxField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "checkbox", "type": "string" },
				"value": { "default": false, "type": "boolean" }
			},
			"required": ["label", "field_type"],
			"title": "CheckboxField"
		},
		"ClockField": {
			"$id": "#/$defs/ClockField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "clock", "type": "string" },
				"value": { "default": 0, "type": "integer" },
				"min": { "const": 0, "type": "number" },
				"max": { "enum": [4, 6, 8, 10] }
			},
			"required": ["label", "field_type", "min", "max"],
			"title": "ClockField"
		},
		"CounterField": {
			"$id": "#/$defs/CounterField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "counter", "type": "string" },
				"value": { "default": 0, "type": "integer" },
				"min": { "const": 0, "type": "number" },
				"max": { "type": "integer" }
			},
			"required": ["label", "field_type", "min"],
			"title": "CounterField"
		},
		"TextField": {
			"$id": "#/$defs/TextField",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "text", "type": "string" },
				"value": { "type": "string" }
			},
			"required": ["label", "field_type"],
			"title": "TextField"
		},
		"SelectFieldStat": {
			"$id": "#/$defs/SelectFieldStat",
			"title": "Select field (player stat)",
			"description": "Select a standard player stat or condition meter.",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "select_stat", "type": "string" },
				"value": {
					"anyOf": [
						{ "$ref": "#/$defs/PlayerStat" },
						{ "$ref": "#/$defs/PlayerConditionMeter" }
					]
				},
				"choices": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"type": "object",
							"properties": {
								"label": { "$ref": "#/$defs/Label" },
								"value": {
									"anyOf": [
										{ "$ref": "#/$defs/PlayerStat" },
										{ "$ref": "#/$defs/PlayerConditionMeter" }
									]
								},
								"selected": { "type": "boolean" }
							},
							"required": ["label", "value"]
						}
					}
				}
			},
			"required": ["label", "field_type", "choices"]
		},
		"SelectFieldRef": {
			"$id": "#/$defs/SelectFieldRef",
			"title": "Select field (reference)",
			"description": "Select a pointer to the value of an asset control or option field.",
			"type": "object",
			"properties": {
				"id": { "type": "string" },
				"label": { "$ref": "#/$defs/Label" },
				"field_type": { "const": "select_ref", "type": "string" },
				"value": {
					"anyOf": [
						{ "$ref": "#/$defs/AssetControlFieldIDWildcard" },
						{ "$ref": "#/$defs/AssetOptionFieldIDWildcard" }
					]
				},
				"choices": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": {
							"type": "object",
							"properties": {
								"label": { "$ref": "#/$defs/Label" },
								"value": {
									"anyOf": [
										{ "$ref": "#/$defs/AssetControlFieldIDWildcard" },
										{ "$ref": "#/$defs/AssetOptionFieldIDWildcard" }
									]
								},
								"selected": { "type": "boolean" }
							},
							"required": ["label", "value"]
						}
					}
				}
			},
			"required": ["label", "field_type", "choices"]
		},
		"EncounterNatureStarforged": {
			"examples": [
				"creature",
				"horror",
				"human",
				"machine",
				"monster",
				"vehicle"
			],
			"$id": "#/$defs/EncounterNatureStarforged",
			"type": "string",
			"title": "EncounterNatureStarforged"
		},
		"EncounterStarforged": {
			"$id": "#/$defs/EncounterStarforged",
			"description": "An encounter entry similar to those in Chapter 4 of Ironsworn: Starforged.",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownString" }
				},
				"summary": { "$ref": "#/$defs/MarkdownString" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"quest_starter": { "$ref": "#/$defs/MarkdownString" },
				"rank": { "$ref": "#/$defs/ChallengeRank" },
				"drives": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownString" }
				},
				"tactics": {
					"type": "array",
					"items": { "$ref": "#/$defs/MarkdownString" }
				},
				"id": { "$ref": "#/$defs/EncounterStarforgedID" },
				"nature": { "$ref": "#/$defs/EncounterNatureStarforged" },
				"variants": {
					"$comment": "Deserialize as a dictionary object.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*$": { "$ref": "#/$defs/EncounterVariantStarforged" }
					}
				},
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": [
				"name",
				"features",
				"summary",
				"description",
				"quest_starter",
				"rank",
				"drives",
				"tactics",
				"nature"
			],
			"title": "EncounterStarforged"
		},
		"EncounterVariantStarforged": {
			"$id": "#/$defs/EncounterVariantStarforged",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"rank": { "$ref": "#/$defs/ChallengeRank" },
				"description": { "$ref": "#/$defs/MarkdownString" },
				"id": { "$ref": "#/$defs/EncounterStarforgedID" },
				"nature": { "$ref": "#/$defs/EncounterNatureStarforged" }
			},
			"required": ["name", "rank", "description", "nature"],
			"title": "EncounterVariantStarforged"
		},
		"SettingTruth": {
			"$id": "#/$defs/SettingTruth",
			"description": "A setting truth category in the format used by Starforged.",
			"type": "object",
			"properties": {
				"name": { "$ref": "#/$defs/Label" },
				"canonical_name": { "$ref": "#/$defs/Label" },
				"source": { "$ref": "#/$defs/Source" },
				"suggestions": { "$ref": "#/$defs/Suggestions" },
				"options": {
					"type": "array",
					"items": { "$ref": "#/$defs/SettingTruthOption" }
				},
				"icon": { "$ref": "#/$defs/SVGImageURL" },
				"id": { "$ref": "#/$defs/SettingTruthID" },
				"_source": { "$ref": "#/$defs/SourceStub" }
			},
			"required": ["name", "options"],
			"title": "SettingTruth"
		},
		"SettingTruthOption": {
			"$id": "#/$defs/SettingTruthOption",
			"type": "object",
			"properties": {
				"description": { "$ref": "#/$defs/MarkdownString" },
				"quest_starter": { "$ref": "#/$defs/MarkdownString" },
				"id": { "$ref": "#/$defs/SettingTruthOptionID" },
				"summary": { "$ref": "#/$defs/MarkdownString" }
			},
			"required": ["description", "quest_starter", "summary"],
			"title": "SettingTruthOption"
		}
	},
	"type": "object",
	"properties": {
		"id": { "type": "string", "pattern": "^[a-z0-9_]{3,}$" },
		"ruleset": { "const": "starforged", "type": "string" },
		"source": { "$ref": "#/$defs/Source" },
		"oracles": {
			"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/OracleCollection" }
			}
		},
		"moves": {
			"description": "A dictionary object containing move categories, which contain moves.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/MoveCategory" }
			}
		},
		"assets": {
			"description": "A dictionary object containing asset types, which contain assets.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": { "^[a-z][a-z_]*$": { "$ref": "#/$defs/AssetType" } }
		},
		"encounters": {
			"description": "A dictionary object containing Starforged-style encounter entries.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/EncounterStarforged" }
			}
		},
		"setting_truths": {
			"description": "A dictionary object containing Starforged-style setting truths.",
			"$comment": "Deserialize as a dictionary object.",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z_]*$": { "$ref": "#/$defs/SettingTruth" }
			}
		},
		"_source": { "$ref": "#/$defs/SourceStub" }
	},
	"required": ["ruleset"]
}
