{
	"$schema": "http://json-schema.org/draft-07/schema",
	"title": "Datasworn data entry",
	"description": "Data entry schema for Datasworn, which provides templates and other conveniences like source inheritance. It must be processed into the standard Dataforged format.",
	"$defs": {
		"Color": {
			"title": "Color",
			"type": "string",
			"pattern": "^#([A-f0-9]{2}){3}$",
			"description": "A CSS hex color. Use it to provide thematic accents when rendering this item."
		},
		"ID": {
			"title": "Id",
			"type": "string",
			"$comment": "{namespace}/{element}/{*}"
		},
		"Icon": {
			"title": "Icon",
			"type": "string",
			"format": "uri",
			"description": "A relative URI pointing to an SVG icon.",
			"pattern": "^.+\\.svg$"
		},
		"Image": {
			"title": "Image",
			"type": "string",
			"format": "uri",
			"description": "A relative URI pointing to a WEBP image.",
			"pattern": "^.+\\.webp$"
		},
		"Ruleset": {
			"title": "Ruleset",
			"type": "string",
			"enum": ["classic", "starforged"]
		},
		"Source": {
			"title": "Source",
			"type": "object",
			"description": "Metadata describing the source of this item's text content ",
			"required": ["title", "uri", "authors", "date", "license"],
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"uri": {
					"type": "string",
					"description": "The URI where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": {
						"type": "string",
						"examples": ["Shawn Tomkin"]
					}
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"description": "An absolute URI pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"type": ["string", "null"]
				}
			}
		},
		"Title": {
			"title": "Title",
			"type": "object",
			"required": ["canonical"],
			"additionalProperties": false,
			"properties": {
				"canonical": {
					"$ref": "#/$defs/Label"
				},
				"standard": {
					"$ref": "#/$defs/Label"
				},
				"short": {
					"$ref": "#/$defs/Label"
				}
			}
		},
		"Label": {
			"title": "Label",
			"type": "string",
			"description": "A localized plain text name or label."
		},
		"MarkdownParagraph": {
			"title": "Markdown paragraph",
			"type": "string",
			"description": "Localized markdown text, usually one paragraph. This may included ordered or unordered lists."
		},
		"MarkdownParagraphs": {
			"title": "Markdown paragraphs",
			"type": "string",
			"description": "Localized markdown text, usually multiple paragraphs. This may include ordered or unordered lists."
		},
		"MarkdownPhrase": {
			"title": "Markdown phrase",
			"type": "string",
			"description": "Localized markdown text, usually a phrase or single sentence."
		},
		"MarkdownSentences": {
			"title": "Markdown sentences",
			"type": "string",
			"description": "Localized markdown text, usually a few sentences at most."
		},
		"ChallengeRank": {
			"title": "Challenge rank",
			"type": "integer",
			"description": "Enumerates challenge ranks: 1=troublesome; 2=dangerous; 3=formidable; 4=extreme; 5=epic.",
			"enum": [1, 2, 3, 4, 5]
		},
		"ProgressTypeClassic": {
			"title": "Progress type (Classic)",
			"type": "string",
			"description": "Standard progress track types found in Ironsworn or Ironsworn: Delve",
			"enum": [
				"combat_progress",
				"vow_progress",
				"scene_challenge_progress",
				"journey_progress",
				"delve_progress",
				"bonds_progress"
			]
		},
		"AssetAbilityClassic": {
			"title": "Asset ability (Classic)",
			"type": "object",
			"required": ["text"],
			"properties": {
				"name": {
					"$ref": "#/$defs/Label"
				},
				"text": {
					"$ref": "#/$defs/MarkdownParagraph"
				},
				"moves": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/MoveClassic"
						}
					}
				}
			}
		},
		"AssetClassic": {
			"title": "Asset (Classic)",
			"type": "object",
			"required": ["name", "abilities"],
			"properties": {
				"name": {
					"$ref": "#/$defs/Label"
				},
				"_id": {
					"$ref": "#/$defs/AssetID"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"abilities": {
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": {
						"$ref": "#/$defs/AssetAbilityClassic"
					}
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"AssetID": {
			"title": "Asset ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"ConditionMeterAliasClassic": {
			"title": "Condition meter alias (Classic)",
			"type": "string",
			"enum": ["companion_health", "attached_asset_meter"]
		},
		"OracleCollectionColumn": {
			"title": "Oracle collection column",
			"type": "object",
			"required": ["content_type", "table_key"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range. 'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": {
					"$ref": "#/$defs/Label"
				},
				"table_key": {
					"description": "A key from OracleCollection#contents, indicating which OracleTable's data is used in this column.",
					"type": "string",
					"pattern": "^[a-z][a-z_]*[a-z]$"
				},
				"color": {
					"$ref": "#/$defs/Color"
				}
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": {
							"const": "range"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Roll"
						}
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": {
							"const": "result"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Result"
						}
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": {
							"const": "summary"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Summary"
						}
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": {
							"const": "description"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Description"
						}
					}
				}
			]
		},
		"OracleTable": {
			"title": "Oracle table",
			"type": "object",
			"required": ["title", "table"],
			"additionalProperties": false,
			"properties": {
				"_id": {
					"$ref": "#/$defs/OracleTableID"
				},
				"title": {
					"$ref": "#/$defs/Title"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"rendering": {
					"$ref": "#/$defs/OracleTableRendering"
				},
				"match": {
					"title": "Oracle match behavior",
					"description": "A handful of oracles have special behavior on a match.",
					"type": "object",
					"required": ["text"],
					"properties": {
						"text": {
							"$ref": "#/$defs/MarkdownSentences"
						}
					}
				},
				"table": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRow"
					}
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"OracleTableColumn": {
			"title": "Oracle table column",
			"type": "object",
			"required": ["content_type"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range. 'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": {
					"$ref": "#/$defs/Label"
				}
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": {
							"const": "range"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Roll"
						}
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": {
							"const": "result"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Result"
						}
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": {
							"const": "summary"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Summary"
						}
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": {
							"const": "description"
						},
						"label": {
							"$ref": "#/$defs/Label",
							"default": "Description"
						}
					}
				}
			]
		},
		"OracleTableID": {
			"title": "Oracle table ID",
			"type": "string",
			"$comment": "{namespace}/oracles/{...collections}/{oracle}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}$"
		},
		"OracleTableRendering": {
			"title": "Oracle table rendering",
			"type": "object",
			"additionalProperties": false,
			"default": {
				"style": "table",
				"columns": {
					"roll": {
						"content_type": "range",
						"label": "Roll"
					},
					"result": {
						"content_type": "result",
						"label": "Result"
					}
				}
			},
			"properties": {
				"style": {
					"type": "string",
					"description": "The style used to render this table in the source material.\n\n        * embed_as_column: This table appears as a column of a table handled by its OracleCollection parent.\n        * embed_in_row: This table appears in its entirety within the row of another table. Canonical examples appear in the Ironsworn Rulebook and Ironsworn: Delve.\n        * table: A standard table, typically with a roll column and a result column.\n        ",
					"enum": ["embed_as_column", "embed_in_row", "table"],
					"default": "table"
				},
				"icon": {
					"$ref": "#/$defs/Icon"
				},
				"color": {
					"$ref": "#/$defs/Color"
				},
				"columns": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/OracleTableColumn"
						}
					},
					"default": {
						"roll": {
							"content_type": "range",
							"label": "Roll"
						},
						"result": {
							"content_type": "result",
							"label": "Result"
						}
					}
				}
			}
		},
		"OracleTableRoll": {
			"title": "OracleRoll",
			"type": "object",
			"description": "Parameters for an oracle roll.",
			"required": ["oracle"],
			"properties": {
				"oracle": {
					"$ref": "#/$defs/OracleTableID"
				},
				"times": {
					"description": "The number of times to roll.",
					"type": ["integer", "null"],
					"minimum": 1,
					"default": 1
				},
				"method": {
					"title": "Oracle roll method",
					"description": "\n      no_duplicates = Reroll duplicate OracleTableRows\n      allow_duplicates = Don't reroll duplicate OracleTableRows\n      make_it_worse = Don't reroll duplicate OracleTableRows; duplicates compound\n      ",
					"type": ["string", "null"],
					"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"],
					"default": "no_duplicates"
				}
			}
		},
		"OracleTableRow": {
			"title": "Oracle table row",
			"type": "object",
			"description": "Represents a row from an oracle table.",
			"required": ["low", "high", "result"],
			"properties": {
				"low": {
					"description": "The low end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"high": {
					"description": "The high end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"result": {
					"title": "Result text",
					"$ref": "#/$defs/MarkdownPhrase"
				},
				"summary": {
					"title": "Summary text",
					"description": "A secondary markdown string that must be presented to the user for the implementation to be complete, but may benefit from progressive disclosure (such as a collapsible element, popover/tooltip, etc).\n\n`null` is used in cases where an 'empty' `OracleTableRow.summary` exists (example: Starship Type, p. 326). In the book, these table cells are rendered with the text `--` (and this is the recommended placeholder for tabular display). For display as a single result (e.g. VTT roll output), however, `null` values can be safely omitted.",
					"anyOf": [
						{
							"$ref": "#/$defs/MarkdownSentences"
						},
						{
							"type": "null"
						}
					]
				},
				"embed_table": {
					"description": "A table to be rendered inside this table row.",
					"$ref": "#/$defs/OracleTableID"
				},
				"rolls": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRoll"
					}
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"_id": {
					"$ref": "#/$defs/OracleTableRowID"
				}
			}
		},
		"OracleTableRowID": {
			"title": "Oracle table row ID",
			"type": "string",
			"$comment": "{namespace}/oracles/{*...collections/{oracle}/{low}-{high}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}\\/[0-9]{1,3}-[0-9]{1,3}$"
		},
		"ConditionMeterID": {
			"title": "Condition meter ID",
			"type": "string",
			"description": "ID for a standard player character condition meter.",
			"enum": [
				"player/condition_meters/health",
				"player/condition_meters/spirit",
				"player/condition_meters/supply"
			]
		},
		"StatID": {
			"title": "Stat ID",
			"type": "string",
			"description": "ID for a standard player character stat.",
			"enum": [
				"player/stats/edge",
				"player/stats/heart",
				"player/stats/iron",
				"player/stats/shadow",
				"player/stats/wits"
			]
		},
		"EncounterClassic": {
			"title": "Encounter (Classic)",
			"type": "object",
			"description": "An encounter entry similar to those in Chapter 5 of classic Ironsworn.",
			"required": [
				"name",
				"nature",
				"rank",
				"features",
				"drives",
				"tactics",
				"description",
				"quest_starter"
			],
			"properties": {
				"name": {
					"$ref": "#/$defs/Label"
				},
				"nature": {
					"$ref": "#/$defs/EncounterNatureClassic"
				},
				"rank": {
					"$ref": "#/$defs/ChallengeRank"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownPhrase"
					}
				},
				"drives": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownPhrase"
					}
				},
				"tactics": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownPhrase"
					}
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"quest_starter": {
					"description": "A localizable markdown string describing the quest starter associated with this item.",
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"your_truths": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"_id": {
					"$ref": "#/$defs/EncounterClassicID"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"EncounterClassicID": {
			"title": "Encounter (Classic) ID",
			"type": "string",
			"$comment": "{namespace}/encounters/{nature}/{encounter}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"EncounterID": {
			"title": "Encounter ID",
			"oneOf": [
				{
					"type": "string",
					"$comment": "{namespace}/encounters/{nature}/{encounter}",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){2}$"
				},
				{
					"type": "string",
					"$comment": "{namespace}/encounters/{encounter}",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){1}$"
				}
			]
		},
		"EncounterNatureClassic": {
			"title": "Encounter nature (Classic)",
			"type": "string",
			"examples": [
				"Ironlander",
				"firstborn",
				"animal",
				"beast",
				"horror",
				"anomaly"
			]
		},
		"CustomStat": {
			"title": "Custom stat"
		},
		"MoveClassic": {
			"title": "Move (Classic)",
			"type": "object",
			"required": ["text", "name", "trigger"],
			"additionalProperties": false,
			"properties": {
				"_id": {
					"$ref": "#/$defs/MoveID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"trigger": {
					"$ref": "#/$defs/TriggerClassic"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/CustomStat"
						}
					}
				},
				"outcomes": {
					"$ref": "#/$defs/MoveOutcomes"
				},
				"text": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"asset": {
					"description": "The ID of the parent Asset of the move, if any.",
					"$ref": "#/$defs/AssetID"
				},
				"progress_move": {
					"description": "Whether or not the move is a Progress Move. Progress moves roll two challenge dice against a progress score.",
					"type": "boolean"
				},
				"variant_of": {
					"description": "The ID of the move that this move is a variant of, if any.",
					"$ref": "#/$defs/MoveID"
				},
				"oracles": {
					"description": "The ID of any oracles directly referenced by the move, or vice versa.",
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableID"
					}
				},
				"optional": {
					"description": "Whether or not the source material presents this rules item as optional.",
					"default": false,
					"type": "boolean"
				},
				"tags": {
					"description": "Arbitrary strings tags that describe optional metadata that doesn't fit in other properties.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"category": {
					"$ref": "#/$defs/MoveCategoryID",
					"description": "The ID of the move's category."
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"MoveID": {
			"title": "Move ID",
			"type": "string",
			"$comment": "{namespace}/moves/{moveCategory}/{move}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/moves(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"MoveOutcome": {
			"title": "Move outcome",
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownParagraph"
				}
			}
		},
		"MoveOutcomeMatchable": {
			"title": "Move outcome matchable",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/$defs/MoveOutcome"
				},
				{
					"properties": {
						"match": {
							"$ref": "#/$defs/MoveOutcome"
						}
					}
				}
			]
		},
		"MoveOutcomeType": {
			"title": "Move outcome type",
			"type": "string",
			"enum": ["miss", "weak_hit", "strong_hit"]
		},
		"MoveOutcomes": {
			"title": "Move outcomes",
			"type": "object",
			"required": ["miss", "weak_hit", "strong_hit"],
			"properties": {
				"miss": {
					"$ref": "#/$defs/MoveOutcomeMatchable"
				},
				"weak_hit": {
					"$ref": "#/$defs/MoveOutcome"
				},
				"strong_hit": {
					"$ref": "#/$defs/MoveOutcomeMatchable"
				}
			}
		},
		"RollableStatClassicID": {
			"title": "Rollable stat (Classic) ID",
			"oneOf": [
				{
					"$ref": "#/$defs/RollableStatIDCommon"
				},
				{
					"$ref": "#/$defs/ConditionMeterAliasClassic"
				}
			]
		},
		"RollableStatIDCommon": {
			"title": "Rollable stat id common",
			"oneOf": [
				{
					"$ref": "#/$defs/StatID"
				},
				{
					"$ref": "#/$defs/ConditionMeterID"
				}
			]
		},
		"TriggerBase": {
			"title": "Trigger base",
			"required": ["text"],
			"type": "object",
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownPhrase"
				},
				"options": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/TriggerOptionBase"
					}
				}
			}
		},
		"TriggerClassic": {
			"title": "Trigger (Classic)",
			"required": ["text"],
			"type": "object",
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownPhrase"
				},
				"options": {
					"type": "array",
					"oneOf": [
						{
							"items": {
								"$ref": "#/$defs/TriggerOptionProgressClassic"
							}
						},
						{
							"items": {
								"$ref": "#/$defs/TriggerOptionActionClassic"
							}
						}
					]
				}
			}
		},
		"TriggerOptionActionClassic": {
			"title": "Trigger option action (Classic)",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/$defs/TriggerOptionBase"
				},
				{
					"properties": {
						"using": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/RollableStatClassicID"
							}
						}
					}
				}
			]
		},
		"TriggerOptionBase": {
			"title": "Trigger option base",
			"type": "object",
			"required": ["roll_type", "using"],
			"properties": {
				"text": {
					"$ref": "#/$defs/MarkdownPhrase"
				},
				"method": {
					"title": "RollSelectionMethod",
					"type": "string",
					"oneOf": [
						{
							"enum": ["any", "highest", "lowest", "inherit", "all"]
						},
						{
							"$ref": "#/$defs/MoveOutcomeType"
						}
					],
					"default": "any"
				},
				"roll_type": {
					"type": "string",
					"enum": ["action_roll", "progress_roll"]
				},
				"using": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"TriggerOptionProgressClassic": {
			"title": "Trigger option progress (Classic)",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/$defs/TriggerOptionBase"
				},
				{
					"properties": {
						"using": {
							"type": "array",
							"items": {
								"$ref": "#/$defs/ProgressTypeClassic"
							}
						}
					}
				}
			]
		},
		"AssetTypeClassic": {
			"title": "Asset type (Classic)",
			"type": "object",
			"required": ["title", "contents"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/AssetTypeID"
				},
				"title": {
					"$ref": "#/$defs/Title"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/AssetClassic"
						}
					}
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"AssetTypeExtensionClassic": {
			"title": "Asset type extension (Classic)",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/AssetTypeID"
				},
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/$defs/AssetTypeID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/AssetClassic"
						}
					}
				}
			}
		},
		"AssetTypeID": {
			"title": "Asset type ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/assets(\\/[a-z][a-z_]*[a-z]){1}$",
			"$comment": "{namespace}/collections/assets/{name}"
		},
		"EncounterCollectionClassic": {
			"title": "Encounter collection (Classic)",
			"type": "object",
			"required": ["title", "contents"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/EncounterCollectionClassicID"
				},
				"title": {
					"$ref": "#/$defs/Title"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/EncounterClassic"
						}
					}
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"EncounterCollectionClassicID": {
			"title": "Encounter collection (Classic) ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/encounters(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"EncounterCollectionExtensionClassic": {
			"title": "Encounter collection extension (Classic)",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/EncounterCollectionClassicID"
				},
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/$defs/EncounterCollectionClassicID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/EncounterClassic"
						}
					}
				}
			}
		},
		"MoveCategoryClassic": {
			"title": "Move category (Classic)",
			"type": "object",
			"required": ["title", "contents"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/MoveCategoryID"
				},
				"title": {
					"$ref": "#/$defs/Title"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/MoveClassic"
						}
					}
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"MoveCategoryExtensionClassic": {
			"title": "Move category extension (Classic)",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/MoveCategoryID"
				},
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/$defs/MoveCategoryID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/MoveClassic"
						}
					}
				}
			}
		},
		"MoveCategoryID": {
			"title": "Move category ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/moves(\\/[a-z][a-z_]*[a-z]){1}$",
			"$comment": "{namespace}/collections/moves/{name}"
		},
		"OracleCollection": {
			"title": "Oracle collection",
			"type": "object",
			"required": ["title", "contents"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/OracleCollectionID"
				},
				"title": {
					"$ref": "#/$defs/Title"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/OracleTable"
						}
					}
				},
				"rendering": {
					"type": "object",
					"description": "Some oracle collections are rendered as a single table in the source material. If so, parameters for rendering that table are included here.",
					"properties": {
						"icon": {
							"$ref": "#/$defs/Icon"
						},
						"style": {
							"oneOf": [
								{
									"enum": ["multi_table"],
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"default": null
						},
						"columns": {
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*[a-z]$": {
									"description": "A column's default label is the title of the source table.",
									"$ref": "#/$defs/OracleCollectionColumn"
								}
							}
						}
					}
				},
				"collections": {
					"description": "OracleCollections contained by this OracleCollection.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{
									"$ref": "#/$defs/OracleCollection"
								},
								{
									"$ref": "#/$defs/OracleCollectionExtension"
								}
							]
						}
					}
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"OracleCollectionExtension": {
			"title": "Oracle collection extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/OracleCollectionID"
				},
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/$defs/OracleCollectionID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/OracleTable"
						}
					}
				}
			}
		},
		"OracleCollectionID": {
			"title": "Oracle collection ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/oracles(\\/[a-z][a-z_]*[a-z]){1,3}$"
		},
		"SettingTruth": {
			"title": "Setting truth",
			"type": "object",
			"required": ["name"],
			"properties": {
				"_id": {
					"$ref": "#/$defs/ID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"SettingTruthOption": {
			"title": "Setting truth option",
			"required": ["quest_starter"],
			"additionalProperties": false,
			"type": "object",
			"properties": {
				"quest_starter": {
					"$ref": "#/$defs/MarkdownParagraph"
				}
			}
		},
		"WorldTruthClassic": {
			"title": "World truth (Classic)",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/$defs/SettingTruth"
				},
				{
					"properties": {
						"options": {
							"type": "array",
							"maxItems": 3,
							"minItems": 3,
							"items": {
								"type": "object",
								"required": ["description", "quest_starter"],
								"properties": {
									"description": {
										"$ref": "#/$defs/MarkdownParagraphs"
									},
									"quest_starter": {
										"$ref": "#/$defs/MarkdownParagraph"
									}
								}
							}
						}
					}
				}
			]
		},
		"default": {
			"title": "Default",
			"SettingTruth": {
				"type": "object",
				"required": ["name", "source"],
				"properties": {
					"_id": {
						"$ref": "#/$defs/ID"
					},
					"name": {
						"$ref": "#/$defs/Label"
					},
					"source": {
						"$ref": "#/$defs/Source"
					}
				}
			},
			"SettingTruthOption": {
				"required": ["quest_starter"],
				"additionalProperties": false,
				"type": "object",
				"properties": {
					"quest_starter": {
						"$ref": "#/$defs/MarkdownParagraph"
					}
				}
			},
			"SettingTruthStarforged": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/$defs/SettingTruth"
					},
					{
						"properties": {
							"options": {
								"type": "array",
								"items": {
									"$ref": "#/$defs/OracleTableRow"
								}
							}
						}
					}
				]
			},
			"WorldTruthClassic": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/$defs/SettingTruth"
					},
					{
						"properties": {
							"options": {
								"type": "array",
								"maxItems": 3,
								"minItems": 3,
								"items": {
									"type": "object",
									"required": ["description", "quest_starter"],
									"properties": {
										"description": {
											"$ref": "#/$defs/MarkdownParagraphs"
										},
										"quest_starter": {
											"$ref": "#/$defs/MarkdownParagraph"
										}
									}
								}
							}
						}
					}
				]
			}
		},
		"RegionEntry": {
			"title": "Region entry",
			"type": "object",
			"description": "A region entry, like the Ironlands region entries found in classic Ironsworn.",
			"required": [
				"name",
				"summary",
				"features",
				"description",
				"quest_starter"
			],
			"properties": {
				"_id": {
					"$ref": "#/$defs/RegionEntryID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/MarkdownPhrase"
					}
				},
				"quest_starter": {
					"$ref": "#/$defs/MarkdownParagraph"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"RegionEntryID": {
			"title": "Region entry ID",
			"type": "string",
			"$comment": "{namespace}/regions/{region}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/regions(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"Rarity": {
			"title": "Rarity",
			"type": "object",
			"description": "A rarity, like those presented in Ironsworn: Delve.",
			"required": ["asset", "description", "name", "xp_cost"],
			"additionalProperties": false,
			"properties": {
				"_id": {
					"$ref": "#/$defs/RarityID"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"asset": {
					"description": "The asset enhanced by this rarity.",
					"$ref": "#/$defs/AssetID"
				},
				"icon": {
					"$ref": "#/$defs/Icon"
				},
				"xp_cost": {
					"description": "From Ironsworn: Delve, p. 174:\n\n    Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n    If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.",
					"type": "integer",
					"minimum": 3,
					"maximum": 5,
					"default": 3
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"RarityID": {
			"title": "Rarity ID",
			"type": "string",
			"$comment": "{namespace}/rarities/{rarity}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/rarities(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"DelveSite": {
			"title": "Delve site",
			"type": "object",
			"description": "A delve site with a theme, domain, and denizen table.",
			"required": ["name", "rank", "theme", "domain", "denizens"],
			"properties": {
				"name": {
					"$ref": "#/$defs/Label"
				},
				"rank": {
					"$ref": "#/$defs/ChallengeRank"
				},
				"theme": {
					"$ref": "#/$defs/DelveSiteThemeID"
				},
				"domain": {
					"$ref": "#/$defs/DelveSiteDomainID"
				},
				"denizens": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/$defs/DelveSiteDenizen"
							}
						},
						{
							"type": "array",
							"minItems": 12,
							"maxItems": 12,
							"items": [
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "very_common"
										},
										"low": {
											"const": 1
										},
										"high": {
											"const": 27
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "common"
										},
										"low": {
											"const": 28
										},
										"high": {
											"const": 41
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "common"
										},
										"low": {
											"const": 42
										},
										"high": {
											"const": 55
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "common"
										},
										"low": {
											"const": 56
										},
										"high": {
											"const": 69
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "uncommon"
										},
										"low": {
											"const": 70
										},
										"high": {
											"const": 75
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "uncommon"
										},
										"low": {
											"const": 76
										},
										"high": {
											"const": 81
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "uncommon"
										},
										"low": {
											"const": 82
										},
										"high": {
											"const": 87
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "uncommon"
										},
										"low": {
											"const": 88
										},
										"high": {
											"const": 93
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "rare"
										},
										"low": {
											"const": 94
										},
										"high": {
											"const": 95
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "rare"
										},
										"low": {
											"const": 96
										},
										"high": {
											"const": 97
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "rare"
										},
										"low": {
											"const": 98
										},
										"high": {
											"const": 99
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": {
											"const": "unforeseen"
										},
										"low": {
											"const": 100
										},
										"high": {
											"const": 100
										}
									}
								}
							]
						}
					]
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"_id": {
					"$ref": "#/$defs/DelveSiteID"
				},
				"suggestions": {
					"$ref": "#/$defs/Suggestions"
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"DelveSiteCard": {
			"title": "Delve site card",
			"description": "Schema shared by delve site themes and delve site domains.",
			"type": "object",
			"additionalProperties": false,
			"required": ["card_type", "name", "summary", "features", "dangers"],
			"properties": {
				"_id": {
					"type": "string"
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"card_type": {
					"$ref": "#/$defs/DelveSiteCardType"
				},
				"icon": {
					"$ref": "#/$defs/Icon"
				},
				"summary": {
					"$ref": "#/$defs/MarkdownSentences"
				},
				"source": {
					"$ref": "#/$defs/Source"
				},
				"description": {
					"$ref": "#/$defs/MarkdownParagraphs"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRow"
					}
				},
				"dangers": {
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableRow"
					}
				},
				"_source": {
					"$ref": "#/$defs/SourcePartial"
				}
			}
		},
		"DelveSiteCardType": {
			"title": "Delve site card type",
			"type": "string",
			"enum": ["theme", "domain"]
		},
		"DelveSiteDenizen": {
			"title": "Delve site denizen",
			"type": "object",
			"description": "A denizen entry in a delve site.",
			"required": ["encounter", "frequency", "low", "high"],
			"properties": {
				"encounter": {
					"description": "The ID of the relevant encounter, or `null` if no encounter has been specified.",
					"oneOf": [
						{
							"$ref": "#/$defs/EncounterClassicID"
						},
						{
							"type": "null"
						}
					]
				},
				"name": {
					"$ref": "#/$defs/Label"
				},
				"frequency": {
					"title": "Frequency keyword",
					"type": "string",
					"enum": ["very_common", "common", "uncommon", "rare", "unforeseen"]
				},
				"low": {
					"type": "integer",
					"minimum": 1,
					"maximum": 100
				},
				"high": {
					"type": "integer",
					"minimum": 1,
					"maximum": 100
				}
			}
		},
		"DelveSiteDomain": {
			"title": "Delve site domain",
			"type": "object",
			"description": "A delve site domain card.",
			"allOf": [
				{
					"$ref": "#/$defs/DelveSiteCard"
				},
				{
					"properties": {
						"_id": {
							"$ref": "#/$defs/DelveSiteDomainID"
						},
						"card_type": {
							"const": "domain"
						},
						"features": {
							"type": "array",
							"minItems": 12,
							"maxItems": 12,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 21
										},
										"high": {
											"const": 43
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 44
										},
										"high": {
											"const": 56
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 57
										},
										"high": {
											"const": 64
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 65
										},
										"high": {
											"const": 68
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 69
										},
										"high": {
											"const": 72
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 73
										},
										"high": {
											"const": 76
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 77
										},
										"high": {
											"const": 80
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 81
										},
										"high": {
											"const": 84
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 85
										},
										"high": {
											"const": 88
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 89
										},
										"high": {
											"const": 98
										},
										"result": {
											"$ref": "#/$defs/MarkdownPhrase",
											"default": "Something unusual or unexpected"
										},
										"suggestions": {
											"$ref": "#/$defs/Suggestions",
											"default": {
												"oracles": [
													"ironsworn/oracles/action_and_theme/action",
													"ironsworn/oracles/action_and_theme/theme",
													"ironsworn_delve/oracles/feature/aspect",
													"ironsworn_delve/oracles/feature/focus"
												]
											}
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 99
										},
										"high": {
											"const": 99
										},
										"result": {
											"$ref": "#/$defs/MarkdownPhrase",
											"default": "You transition into a new theme"
										},
										"suggestions": {
											"$ref": "#/$defs/Suggestions",
											"default": {
												"oracles": ["ironsworn_delve/oracles/site_nature/theme"]
											}
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 100
										},
										"high": {
											"const": 100
										},
										"result": {
											"$ref": "#/$defs/MarkdownPhrase",
											"default": "You transition into a new domain"
										},
										"suggestions": {
											"$ref": "#/$defs/Suggestions",
											"default": {
												"oracles": [
													"ironsworn_delve/oracles/site_nature/domain"
												]
											}
										}
									}
								}
							]
						},
						"dangers": {
							"type": "array",
							"minItems": 5,
							"maxItems": 5,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 31
										},
										"high": {
											"const": 33
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 34
										},
										"high": {
											"const": 36
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 37
										},
										"high": {
											"const": 39
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 40
										},
										"high": {
											"const": 42
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 43
										},
										"high": {
											"const": 45
										}
									}
								}
							]
						}
					}
				}
			]
		},
		"DelveSiteDomainID": {
			"title": "Delve site domain ID",
			"type": "string",
			"$comment": "{namespace}/site_domains/{siteDomain}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/site_domains(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"DelveSiteID": {
			"title": "Delve site ID",
			"type": "string",
			"$comment": "{namespace}/delve_sites/{delveSite}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/delve_sites(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"DelveSiteTheme": {
			"title": "Delve site theme",
			"type": "object",
			"description": "A delve site theme card.",
			"allOf": [
				{
					"$ref": "#/$defs/DelveSiteCard"
				},
				{
					"properties": {
						"_id": {
							"$ref": "#/$defs/DelveSiteThemeID"
						},
						"card_type": {
							"const": "theme"
						},
						"features": {
							"type": "array",
							"minItems": 5,
							"maxItems": 5,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 1
										},
										"high": {
											"const": 4
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 5
										},
										"high": {
											"const": 8
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 9
										},
										"high": {
											"const": 12
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 13
										},
										"high": {
											"const": 16
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 17
										},
										"high": {
											"const": 20
										}
									}
								}
							]
						},
						"dangers": {
							"type": "array",
							"minItems": 12,
							"maxItems": 12,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 1
										},
										"high": {
											"const": 5
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 6
										},
										"high": {
											"const": 10
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 11
										},
										"high": {
											"const": 12
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 13
										},
										"high": {
											"const": 14
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 15
										},
										"high": {
											"const": 16
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 17
										},
										"high": {
											"const": 18
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 19
										},
										"high": {
											"const": 20
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 21
										},
										"high": {
											"const": 22
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 23
										},
										"high": {
											"const": 24
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 25
										},
										"high": {
											"const": 26
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 27
										},
										"high": {
											"const": 28
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": {
											"const": 29
										},
										"high": {
											"const": 30
										}
									}
								}
							]
						}
					}
				}
			]
		},
		"DelveSiteThemeID": {
			"title": "Delve site theme ID",
			"type": "string",
			"$comment": "{namespace}/site_themes/{siteTheme}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/site_themes(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"Suggestions": {
			"title": "Suggestions",
			"description": "Related items that can be presented as useful shortcuts.",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"assets": {
					"title": "Suggested assets",
					"type": "array",
					"items": {
						"$ref": "#/$defs/AssetID"
					}
				},
				"moves": {
					"title": "Suggested moves",
					"type": "array",
					"items": {
						"$ref": "#/$defs/MoveID"
					}
				},
				"oracles": {
					"title": "Suggested oracle tables",
					"type": "array",
					"items": {
						"$ref": "#/$defs/OracleTableID"
					}
				},
				"regions": {
					"title": "Suggested regions",
					"type": "array",
					"items": {
						"$ref": "#/$defs/RegionEntryID"
					}
				},
				"encounters": {
					"title": "Suggested encounters",
					"type": "array",
					"items": {
						"$ref": "#/$defs/EncounterClassicID"
					}
				},
				"site_themes": {
					"title": "Suggested delve site themes",
					"type": "array",
					"items": {
						"$ref": "#/$defs/DelveSiteThemeID"
					}
				},
				"site_domains": {
					"title": "Suggested delve site domains",
					"type": "array",
					"items": {
						"$ref": "#/$defs/DelveSiteDomainID"
					}
				}
			}
		},
		"SourcePartial": {
			"description": "A source data stub that inherits data from ancestor elements during post-processing.",
			"type": "object",
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"uri": {
					"type": "string",
					"description": "The URI where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": {
						"type": "string",
						"examples": ["Shawn Tomkin"]
					}
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"description": "An absolute URI pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"type": ["string", "null"]
				}
			}
		}
	},
	"type": "object",
	"additionalProperties": false,
	"patternProperties": {
		"^[a-z0-9][a-z0-9_]+$": {
			"title": "Namespace",
			"type": "object",
			"additionalProperties": false,
			"required": ["_ruleset", "_source"],
			"properties": {
				"_ruleset": {
					"const": "classic"
				},
				"_source": {
					"$ref": "#/$defs/Source",
					"description": "Source information to be inherited by all eligible descendants. Descendant '_source' properties will override only the properties they specify; use the 'source' property if you'd prefer to replace the entire object."
				},
				"oracles": {
					"title": "Oracles",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/OracleCollection"
						}
					}
				},
				"moves": {
					"title": "Moves",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{
									"$ref": "#/$defs/MoveCategoryClassic"
								},
								{
									"$ref": "#/$defs/MoveCategoryExtensionClassic"
								}
							]
						}
					}
				},
				"assets": {
					"title": "Assets",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{
									"$ref": "#/$defs/AssetTypeClassic"
								},
								{
									"$ref": "#/$defs/AssetTypeExtensionClassic"
								}
							]
						}
					}
				},
				"encounters": {
					"title": "Encounters",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{
									"$ref": "#/$defs/EncounterCollectionClassic"
								},
								{
									"$ref": "#/$defs/EncounterCollectionExtensionClassic"
								}
							]
						}
					}
				},
				"world_truths": {
					"title": "World truths",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/WorldTruthClassic"
						}
					}
				},
				"regions": {
					"title": "Regions",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/RegionEntry"
						}
					}
				},
				"site_themes": {
					"title": "Delve site themes",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/DelveSiteTheme"
						}
					}
				},
				"site_domains": {
					"title": "Delve site domains",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/DelveSiteDomain"
						}
					}
				},
				"delve_sites": {
					"title": "Delve sites",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/DelveSite"
						}
					}
				},
				"rarities": {
					"title": "Rarities",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/$defs/Rarity"
						}
					}
				}
			}
		}
	}
}
