{
  "$schema": "http://json-schema.org/draft-07/schema",
  "description": "Schema definitions used for Datasworn and Dataforged (v2+).",
  "$defs": {
    "ImpactID": {
      "$comment": "{namespace}/impacts/{impactType}/{impact}",
      "type": "string"
    },
    "MarkdownSentences": {
      "type": "string"
    },
    "PlayerConditionMeterID": {
      "description": "A standard player character condition meter.",
      "enum": [
        "player/condition_meters/health",
        "player/condition_meters/spirit",
        "player/condition_meters/supply"
      ]
    },
    "PlayerStatID": {
      "description": "A standard player character stat.",
      "enum": [
        "player/stats/edge",
        "player/stats/heart",
        "player/stats/iron",
        "player/stats/shadow",
        "player/stats/wits"
      ]
    },
    "AssetAbilityID": {
      "type": "string"
    },
    "MoveID": {
      "anyOf": [
        {
          "$ref": "#/$defs/CoreMoveID"
        },
        {
          "$ref": "#/$defs/AssetMoveID"
        }
      ]
    },
    "DataforgedNamespace": {
      "type": "string"
    },
    "ID": {
      "type": "string",
      "pattern": "^[a-z0-9][a-z0-9_]*[a-z0-9](/[a-z0-9][a-z0-9_]*[a-z0-9])+$",
      "description": "A unique, human-readable ID."
    },
    "MoveCollectionID": {
      "$ref": "#/$defs/ID"
    },
    "CoreMoveID": {
      "$ref": "#/$defs/ID"
    },
    "AssetCollectionID": {
      "$comment": "{namespace}/assets/{assetType}",
      "$ref": "#/$defs/ID"
    },
    "AssetID": {
      "$ref": "#/$defs/ID",
      "$comment": "{namespace}/assets/{assetType}/{asset}"
    },
    "AssetMoveID": {
      "$ref": "#/$defs/ID",
      "$comment": "{namespace}/assets/{assetType}/{asset}/moves/{assetMove}"
    },
    "DelveSiteThemeID": {
      "$comment": "{namespace}/site_themes/{siteTheme}"
    },
    "DelveSiteDomainID": {
      "$comment": "{namespace}/site_domains/{siteDomain}",
      "$ref": "#/$defs/ID"
    },
    "IronlandsRegionID": {
      "$ref": "#/$defs/ID",
      "$comment": "{namespace}/regions/{region}"
    },
    "OracleCollectionID": {
      "$ref": "#/$defs/ID",
      "$comment": "{namespace}/oracles/{oracleSet}"
    },
    "OracleTableID": {
      "$ref": "#/$defs/ID",
      "$comment": "{namespace}/oracles/{oracleSet}/{oracle}",
      "pattern": "^[a-z0-9][a-z0-9_]*[a-z0-9]//oracles(//[a-z][a-z_]*[a-z]/){2,}$"
    },
    "EncounterNatureClassicID": {
      "$comment": "{namespace}/encounters/{nature}"
    },
    "EncounterClassicID": {
      "$comment": "{namespace}/encounters/{nature}/{encounter}",
      "$ref": "#/$defs/ID"
    },
    "EncounterVariantStarforgedID": {
      "$comment": "{namespace}/encounters/{encounter}/variants/{variant}",
      "$ref": "#/$defs/ID"
    },
    "EncounterStarforgedID": {
      "$comment": "{namespace}/encounters/{encounter}",
      "$ref": "#/$defs/ID"
    },
    "RarityID": {
      "$comment": "{namespace}/rarities/{rarity}",
      "$ref": "#/$defs/ID"
    },
    "AttributeID": {
      "$ref": "#/$defs/ID",
      "$comment": "\n      {namespace}/assets/{key}/{key}/attributes/{key}\n        *or*\n      {namespace}/assets/{key}/{key}/moves/{key}/attributes/{key}\n        *or*\n      {namespace}/moves/{key}/{key}/attributes/{key}\n      ",
      "pattern": "/(assets/[a-z_]+/[a-z_]+(/moves/[a-z_]+)?|moves/[a-z_]+/[a-z_]+)/attributes/[a-z_]+$"
    },
    "AssetAbilityBase": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Ironsworn companion assets provide names for their abilities. Starforged asset abilities do not have names.",
          "$ref": "#/$defs/Label"
        },
        "text": {
          "description": "The rules text for this asset ability.",
          "$ref": "#/$defs/LocalizedMarkdown"
        },
        "attachments": {
          "description": "Details on what attachments (other assets) are accepted by this asset.",
          "$comment": "#/$defs/AssetAttachment ... consider rewriting as an attribute? Could attachments be managed with e.g. a regex?"
        },
        "attributes": {
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "oneOf": [
                {
                  "$ref": "#/$defs/AttributeNumericOverride"
                },
                {
                  "$comment": "New condition meters require an ID.",
                  "oneOf": [
                    {
                      "$ref": "#/$defs/AttributeConditionMeter"
                    },
                    {
                      "$ref": "#/$defs/AttributeCounter"
                    },
                    {
                      "$ref": "#/$defs/AttributeText"
                    },
                    {
                      "$ref": "#/$defs/AttributeClock"
                    }
                  ]
                }
              ]
            }
          }
        },
        "moves": {
          "description": "Unique, self-contained moves added by this asset ability.",
          "type": "object",
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/Move"
            }
          }
        },
        "alter_moves": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/MoveExtensionBase"
          }
        },
        "alter_player": {
          "$ref": "#/$defs/PlayerExtension"
        },
        "_id": {
          "$ref": "#/$defs/AssetAbilityID"
        },
        "enabled": {
          "description": "Whether the asset ability is enabled or not. In most cases, the first asset ability defaults to 'true' and the others to 'false'. If none of an asset's abilities are set to 'true', the player can pick which the ability they start with when purchasing the asset.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "AssetAbility": {
      "title": "AssetAbility",
      "description": "Describes an asset ability.",
      "allOf": [
        {
          "$ref": "#/$defs/AssetAbilityBase"
        },
        {
          "required": [
            "text"
          ],
          "properties": {
            "alter_moves": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/MoveExtension"
              }
            },
            "extend_abilities": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/AssetAbilityExtension"
              }
            },
            "text": {
              "$ref": "#/$defs/AssetAbilityBase/properties/text"
            }
          }
        }
      ]
    },
    "AssetAbilityExtension": {
      "description": "Describes an upgrade to another asset ability. If a given property is omitted, assume it's the same as the original ability.",
      "allOf": [
        {
          "$ref": "#/$defs/AssetAbilityBase"
        },
        {
          "required": [
            "_ability"
          ],
          "properties": {
            "_ability": {
              "description": "The ID of the asset ability to be extended.",
              "$ref": "#/$defs/AssetAbilityID"
            }
          }
        }
      ]
    },
    "Asset": {
      "type": "object",
      "properties": {
        "_id": {
          "$ref": "#/$defs/ID",
          "pattern": "^[a-z_]+/assets/[a-z_]+/[a-z_]+$"
        },
        "attributes": {
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/Attribute"
            }
          }
        },
        "name": {
          "$ref": "#/$defs/Label"
        },
        "abilities": {
          "type": "array",
          "additionalItems": false,
          "items": [
            {
              "$ref": "#/$defs/AssetAbility"
            },
            {
              "$ref": "#/$defs/AssetAbility"
            },
            {
              "$ref": "#/$defs/AssetAbility"
            }
          ]
        },
        "requirement": {
          "description": "A markdown string representing the requirement text that appears at the top of some asset cards.",
          "$ref": "#/$defs/LocalizedMarkdown"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "attachments": {
          "description": "Details on what attachments (other assets) are accepted by this asset.",
          "$comment": "#/$defs/AssetAttachment"
        },
        "tags": {
          "type": "array",
          "items": {
            "examples": [
              "animal_companion",
              "beast_companion",
              "biological_companion",
              "deed",
              "ironlander_companion",
              "mechanical_companion"
            ],
            "type": "string"
          }
        },
        "usage": {
          "$comment": "#/$defs/AssetUsage",
          "description": "Information on the asset's usage, such as whether its abilities are shared amongst the player characters."
        }
      },
      "required": [
        "abilities",
        "name"
      ],
      "not": {
        "required": [
          "inputs"
        ],
        "properties": {
          "inputs": {
            "type": "object"
          }
        }
      }
    },
    "AssetExtension": {
      "title": "AssetExtension",
      "description": "Extends/alters existing assets data",
      "type": "object",
      "properties": {
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AssetID"
          }
        }
      }
    },
    "AssetCollection": {
      "title": "AssetCollection",
      "type": "object",
      "allOf": [
        {
          "title": "AssetCollection",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/CategoryMetadata"
            },
            {
              "required": [
                "contents",
                "description",
                "title"
              ],
              "properties": {
                "contents": {
                  "type": "object",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^[a-z][a-z_]*[a-z]$": {
                      "$ref": "#/$defs/Asset"
                    }
                  }
                },
                "description": {
                  "$ref": "#/$defs/Description"
                },
                "source": {
                  "$ref": "#/$defs/Source"
                },
                "title": {
                  "$ref": "#/$defs/Title"
                }
              }
            }
          ]
        },
        {
          "$ref": "#/$defs/CategoryMetadata"
        },
        {
          "required": [
            "contents",
            "description",
            "title"
          ],
          "properties": {
            "contents": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][a-z_]*[a-z]$": {
                  "$ref": "#/$defs/Asset"
                }
              }
            },
            "description": {
              "$ref": "#/$defs/Description"
            },
            "source": {
              "$ref": "#/$defs/Source"
            },
            "title": {
              "$ref": "#/$defs/Title"
            }
          }
        }
      ]
    },
    "AssetCollectionExtension": {
      "title": "AssetCollectionExtension",
      "description": "Extends a canonical asset type with additional assets.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "_extends",
        "contents"
      ],
      "properties": {
        "_extends": {
          "type": "string",
          "pattern": "^(starforged|ironsworn)/assets/[a-z][a-z_+]*[a-z]$",
          "examples": [
            "ironsworn/assets/companion",
            "ironsworn/assets/path",
            "ironsworn/assets/combat_talent",
            "ironsworn/assets/ritual",
            "starforged/assets/command_vehicle",
            "starforged/assets/module",
            "starforged/assets/support_vehicle",
            "starforged/assets/path",
            "starforged/assets/companion",
            "starforged/assets/deed"
          ]
        },
        "contents": {
          "type": "object",
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/Asset"
            }
          }
        }
      }
    },
    "AssetCollections": {
      "title": "AssetCollections",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][a-z_]*[a-z]$": {
          "oneOf": [
            {
              "$ref": "#/$defs/AssetCollectionExtension"
            },
            {
              "$ref": "#/$defs/AssetCollection"
            }
          ]
        }
      }
    },
    "ConditionMeterAlias": {
      "description": "Names of non-player condition meters (for e.g. companions and vehicles) that are referenced by moves and other assets.\nIf an asset condition meter can be used in this manner, the alias is included in its Aliases array.",
      "enum": [
        "companion_health",
        "vehicle_integrity",
        "command_vehicle_integrity",
        "support_vehicle_integrity",
        "incidental_vehicle_integrity",
        "attached_asset_meter"
      ]
    },
    "ConditionMeterType": {
      "oneOf": [
        {
          "$ref": "#/$defs/PlayerConditionMeterID"
        },
        {
          "$ref": "#/$defs/ConditionMeterAlias"
        }
      ]
    },
    "OracleRowLike": {
      "type": "object",
      "required": [
        "result",
        "high"
      ],
      "properties": {
        "low": {
          "description": "The high end of the dice range for this table row.",
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        },
        "high": {
          "description": "The low end of the dice range for this table row.",
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        }
      }
    },
    "OracleTableRoll": {
      "description": "Parameters for an oracle table roll.",
      "required": [
        "table"
      ],
      "properties": {
        "table": {
          "$ref": "#/$defs/OracleTableID"
        },
        "times": {
          "description": "The number of times to roll",
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "allow_duplicates": {
          "description": "TODO",
          "type": "boolean",
          "default": false
        },
        "make_it_worse": {
          "description": "TODO",
          "type": "boolean",
          "default": false
        }
      }
    },
    "OracleTableRow": {
      "type": "object",
      "required": [
        "result",
        "high"
      ],
      "oneOf": [
        {
          "properties": {
            "low": {
              "description": "The high end of the dice range for this table row.",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "high": {
              "description": "The low end of the dice range for this table row.",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          }
        },
        {
          "properties": {
            "low": {
              "type": "null"
            },
            "high": {
              "type": "null"
            }
          }
        }
      ],
      "additionalProperties": false,
      "properties": {
        "_id": {
          "$ref": "#/$defs/ID"
        },
        "low": {
          "description": "The low end of the dice range for this table row."
        },
        "high": {
          "description": "The high end of the dice range for this table row."
        },
        "result": {
          "description": "The primary result text for the row, annotated in Markdown.\nIn the book, this is frequently the only column aside from the roll column. Otherwise, it is the first column.\nSome tables label this column as something other than Result; see the parent (or grandparent) `Oracle.display` for more information.",
          "$ref": "#/$defs/LocalizedMarkdown"
        },
        "summary": {
          "description": "A secondary markdown string that must be presented to the user for the implementation to be complete, but may benefit from progressive disclosure (such as a collapsible element, popover/tooltip, etc).\n\n`null` is used in cases where an 'empty' `OracleTableRow.summary` exists (example: Starship Type, p. 326). In the book, these table cells are rendered with the text `--` (and this is the recommended placeholder for tabular display). For display as a single result (e.g. VTT roll output), however, `null` values can be safely omitted.",
          "oneOf": [
            {
              "$ref": "#/$defs/MarkdownSentences"
            },
            {
              "type": "null"
            }
          ]
        },
        "template": {
          "description": "TODO",
          "examples": [],
          "type": "object",
          "properties": {
            "result": {
              "$ref": "#/$defs/LocalizedTemplateString"
            },
            "summary": {
              "$ref": "#/$defs/LocalizedTemplateString"
            },
            "description": {
              "$ref": "#/$defs/LocalizedTemplateString"
            }
          }
        },
        "rolls": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/OracleTableRoll"
          }
        },
        "suggestions": {
          "$ref": "#/$defs/Suggestions"
        },
        "render": {
          "$ref": "#/$defs/RenderMetadata"
        }
      }
    },
    "OracleTable": {
      "required": [
        "table"
      ],
      "properties": {
        "title": {
          "$ref": "#/$defs/Title"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "summary": {
          "$ref": "#/$defs/MarkdownSentences"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "_id": {},
        "collections": {
          "title": "OracleCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/OracleCollection"
            }
          }
        },
        "contents": {
          "title": "OracleTables",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/OracleTable"
            }
          }
        },
        "sample_names": {
          "description": "A list of sample names for this oracle set. Only used by Planets.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content": {},
        "match": {
          "title": "OracleMatchBehaviour",
          "type": "object",
          "properties": {
            "_id": {
              "$ref": "#/$defs/ID"
            },
            "text": {
              "$ref": "#/$defs/LocalizedMarkdown"
            }
          },
          "additionalProperties": false,
          "required": [
            "text"
          ]
        },
        "requires": {
          "title": "OracleRequirements",
          "type": "object"
        },
        "render": {
          "title": "OracleTableRenderMetadata",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/RenderMetadata"
            },
            {
              "additionalProperties": false,
              "properties": {
                "columns": {
                  "type": "object",
                  "additionalProperties": {
                    "oneOf": [
                      {
                        "$comment": "#/$defs/TableColumnRoll"
                      },
                      {
                        "$comment": "#/$defs/TableColumnText"
                      }
                    ]
                  }
                },
                "column_of": {
                  "description": "If this oracle's `Table` should be rendered as a column of another table, it's indicated here.\n\nIf `undefined`, this table is rendered as a standalone table.\n\nIf this is set (and the rendering such 'embedded' columns is desired), then `Display.Table` may be safely ignored.",
                  "type": "string"
                },
                "embed_in": {
                  "description": "This table is displayed as embedded in a row of another table.",
                  "type": "string"
                },
                "source": {
                  "$ref": "#/$defs/Source"
                }
              }
            }
          ]
        },
        "table": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/OracleTableRow"
          }
        }
      },
      "title": "OracleCollection",
      "type": "object",
      "description": "Represents an oracle set: a grouping that can contain both {@link OracleTable}s and other instances of {@link OracleCollection}, but doesn't have its own `Table` key.\n\nSee {@link Oracle} if you need to type both {@link OracleTable} and {@link OracleCollection} to crawl the oracle hierarchy in search of a specific `_id`.",
      "additionalProperties": false
    },
    "OracleCollection": {
      "required": [
        "table"
      ],
      "properties": {
        "title": {
          "$ref": "#/$defs/Title"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "summary": {
          "$ref": "#/$defs/MarkdownSentences"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "_id": {},
        "collections": {
          "title": "OracleCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/OracleCollection"
            }
          }
        },
        "contents": {
          "title": "OracleTables",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/OracleTable"
            }
          }
        },
        "sample_names": {
          "description": "A list of sample names for this oracle set. Only used by Planets.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content": {},
        "match": {
          "title": "OracleMatchBehaviour",
          "type": "object",
          "properties": {
            "_id": {
              "$ref": "#/$defs/ID"
            },
            "text": {
              "$ref": "#/$defs/LocalizedMarkdown"
            }
          },
          "additionalProperties": false,
          "required": [
            "text"
          ]
        },
        "requires": {
          "title": "OracleRequirements",
          "type": "object"
        },
        "render": {
          "title": "OracleTableRenderMetadata",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/RenderMetadata"
            },
            {
              "additionalProperties": false,
              "properties": {
                "columns": {
                  "type": "object",
                  "additionalProperties": {
                    "oneOf": [
                      {
                        "$comment": "#/$defs/TableColumnRoll"
                      },
                      {
                        "$comment": "#/$defs/TableColumnText"
                      }
                    ]
                  }
                },
                "column_of": {
                  "description": "If this oracle's `Table` should be rendered as a column of another table, it's indicated here.\n\nIf `undefined`, this table is rendered as a standalone table.\n\nIf this is set (and the rendering such 'embedded' columns is desired), then `Display.Table` may be safely ignored.",
                  "type": "string"
                },
                "embed_in": {
                  "description": "This table is displayed as embedded in a row of another table.",
                  "type": "string"
                },
                "source": {
                  "$ref": "#/$defs/Source"
                }
              }
            }
          ]
        },
        "table": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/OracleTableRow"
          }
        }
      },
      "title": "OracleCollection",
      "type": "object",
      "description": "Represents an oracle set: a grouping that can contain both {@link OracleTable}s and other instances of {@link OracleCollection}, but doesn't have its own `Table` key.\n\nSee {@link Oracle} if you need to type both {@link OracleTable} and {@link OracleCollection} to crawl the oracle hierarchy in search of a specific `_id`.",
      "additionalProperties": false
    },
    "OracleContentMetadata": {
      "type": "object",
      "description": "Metadata that describes an oracle's semantic or lexical content.",
      "additionalProperties": false,
      "properties": {
        "part_of_speech": {
          "description": "The part of speech of this oracle.",
          "type": "array",
          "items": {
            "examples": [
              "adjective",
              "common_noun",
              "compound_noun",
              "fragment",
              "name",
              "noun",
              "plural",
              "possessive_case",
              "proper_noun",
              "proper_noun_fragment",
              "sentences",
              "verb"
            ],
            "type": "string"
          }
        },
        "tags": {
          "description": "Any arbitrary string tags associated with this oracle.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PlayerConditionMeterName": {
      "enum": [
        "health",
        "spirit",
        "supply"
      ]
    },
    "PlayerStat": {
      "type": "object",
      "properties": {
        "_id": {
          "$ref": "#/$defs/PlayerStatID"
        },
        "value": {
          "type": "integer",
          "minimum": 0,
          "maximum": 4
        }
      }
    },
    "PlayerCharacter": {
      "description": "Schema used by both classic and Starforged characters",
      "properties": {
        "stats": {
          "type": "object",
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/PlayerStat"
            }
          }
        },
        "condition_meters": {
          "type": "object",
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/AttributeConditionMeter"
            }
          }
        },
        "momentum": {
          "type": "object",
          "properties": {
            "min": {
              "type": "integer",
              "const": -6
            },
            "max": {
              "type": "integer",
              "default": 10,
              "maximum": 10,
              "minimum": -6
            },
            "value": {
              "type": "integer",
              "default": 2,
              "minimum": -6,
              "maximum": 10
            },
            "resetValue": {
              "type": "integer",
              "default": 2,
              "maximum": 10,
              "minimum": 0
            }
          }
        }
      }
    },
    "PlayerExtension": {
      "title": "PlayerExtension",
      "description": "Alters an attribute intrinsic to the player, such as a stat or condition meter.",
      "type": "object"
    },
    "CustomStat": {
      "type": "object",
      "required": [
        "label",
        "options"
      ],
      "properties": {
        "label": {
          "$ref": "#/$defs/Label"
        },
        "options": {
          "title": "CustomStatOptions",
          "type": "object",
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "title": "CustomStatOption",
              "type": "object",
              "required": [
                "label",
                "value"
              ],
              "properties": {
                "label": {
                  "$ref": "#/$defs/Label"
                },
                "value": {
                  "description": "The numeric value to be used as +stat when making an Action Roll.",
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "additionalProperties": false
    },
    "InputPosition": {
      "title": "InputPosition",
      "enum": [
        "card-top",
        "card-back",
        "card-bottom",
        "ability-1-right",
        "ability-2-right",
        "ability-3-right",
        "ability-1-bottom",
        "ability-2-bottom",
        "ability-3-bottom"
      ],
      "type": "string"
    },
    "Attribute": {
      "oneOf": [
        {
          "$ref": "#/$defs/AttributePlayerStat"
        },
        {
          "$ref": "#/$defs/AttributePlayerConditionMeter"
        },
        {
          "$ref": "#/$defs/AttributeText"
        },
        {
          "$ref": "#/$defs/AttributeImpact"
        },
        {
          "$ref": "#/$defs/AttributeConditionMeter"
        }
      ]
    },
    "AttributeClock": {
      "allOf": [
        {
          "$ref": "#/$defs/AttributeNumericBase"
        },
        {
          "required": [
            "attribute_type",
            "min",
            "value",
            "max"
          ],
          "properties": {
            "attribute_type": {
              "const": "clock"
            },
            "min": {
              "const": 0
            },
            "value": {
              "default": 0
            },
            "max": {
              "title": "ClockSegments",
              "type": "integer",
              "multipleOf": 2,
              "minimum": 4,
              "maximum": 10
            }
          }
        }
      ]
    },
    "AttributeConditionMeter": {
      "allOf": [
        {
          "$ref": "#/$defs/AttributeNumericBase"
        },
        {
          "required": [
            "label",
            "position",
            "attribute_type",
            "min",
            "value",
            "max"
          ],
          "properties": {
            "label": {
              "$ref": "#/$defs/Label"
            },
            "position": {
              "const": "card-bottom"
            },
            "attribute_type": {
              "const": "condition_meter"
            },
            "value": {
              "type": "integer"
            },
            "max": {
              "type": "integer"
            },
            "min": {
              "const": 0
            }
          }
        }
      ]
    },
    "AttributePlayerConditionMeter": {
      "description": "A select element with predefined options to pick a standard player character condition meter.",
      "allOf": [
        {
          "$ref": "#/$defs/AttributeBase"
        },
        {
          "required": [
            "attribute_type",
            "value",
            "options",
            "position"
          ],
          "properties": {
            "attribute_type": {
              "const": "player_condition_meter"
            },
            "position": {
              "default": "card-top"
            },
            "value": {
              "description": "The current value of this attribute. In Dataforged/Datasworn's data, this will almost always be `null`, but other values are provided to ensure that types generated from the schema can be used at run-time or for static typing.",
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/$defs/PlayerConditionMeterID"
                }
              ],
              "default": null
            },
            "options": {
              "type": "object",
              "patternProperties": {
                "^[a-z][a-z_]*[a-z]$": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "$ref": "#/$defs/Label"
                    },
                    "value": {
                      "$ref": "#/$defs/PlayerConditionMeterID"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "AttributeText": {
      "description": "A text attribute that accepts a user-provided string value. Recommended HTML element: <input type='text'>",
      "allOf": [
        {
          "$ref": "#/$defs/AttributeBase"
        },
        {
          "required": [
            "attribute_type",
            "position",
            "value"
          ],
          "properties": {
            "attribute_type": {
              "const": "text"
            },
            "position": {
              "default": "card-top"
            },
            "value": {
              "type": [
                "null",
                "string"
              ],
              "default": null
            }
          }
        }
      ]
    },
    "AttributePlayerStat": {
      "description": "An attribute with predefined options to pick a standard player character stat. Recommended HTML element: <select>",
      "allOf": [
        {
          "$ref": "#/$defs/AttributeBase"
        },
        {
          "required": [
            "attribute_type",
            "position",
            "value",
            "options"
          ],
          "properties": {
            "attribute_type": {
              "const": "player_stat"
            },
            "position": {
              "default": "card-top"
            },
            "value": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/$defs/PlayerStatID"
                }
              ],
              "default": null
            },
            "options": {
              "type": "object",
              "patternProperties": {
                "^[a-z][a-z_]*[a-z]$": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "$ref": "#/$defs/Label"
                    },
                    "value": {
                      "$ref": "#/$defs/PlayerStatID"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "AttributeSetter": {
      "propertyNames": {
        "$ref": "#/$defs/AttributeID"
      },
      "patternProperties": {
        "^.*$": {
          "$ref": "#/$defs/PlayerStatID"
        }
      }
    },
    "AttributeNumericType": {
      "type": "string",
      "enum": [
        "condition_meter",
        "clock",
        "counter"
      ]
    },
    "AttributeCounter": {
      "allOf": [
        {
          "$ref": "#/$defs/AttributeNumericBase"
        },
        {
          "properties": {
            "attribute_type": {
              "const": "counter"
            },
            "min": {
              "type": "integer",
              "default": 0
            },
            "max": {
              "type": [
                "null",
                "integer"
              ],
              "default": null
            },
            "value": {
              "type": "integer",
              "default": 0
            }
          }
        }
      ]
    },
    "AttributeNumericBase": {
      "description": "Schema from which other numeric attributes are derived. Shouldn't be used directly.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/AttributeBase"
        },
        {
          "required": [
            "min",
            "max",
            "value",
            "attribute_type"
          ],
          "properties": {
            "attribute_type": {
              "$ref": "#/$defs/AttributeNumericType"
            },
            "min": {
              "type": "integer"
            },
            "max": {
              "type": [
                "integer",
                "null"
              ]
            },
            "value": {
              "type": [
                "integer",
                "null"
              ]
            }
          }
        }
      ]
    },
    "AttributeNumericOverride": {
      "description": "Adjusts an existing numeric input, usually a condition meter",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "_extends"
      ],
      "properties": {
        "_extends": {
          "$ref": "#/$defs/AttributeID"
        },
        "min": {
          "type": "integer"
        },
        "max": {
          "type": "integer"
        },
        "value": {
          "type": "integer"
        }
      }
    },
    "AttributeImpact": {
      "allOf": [
        {
          "$ref": "#/$defs/AttributeBase"
        },
        {
          "required": [
            "attribute_type"
          ],
          "properties": {
            "attribute_type": {
              "const": "impact"
            }
          }
        }
      ]
    },
    "AttributeBase": {
      "type": "object",
      "required": [
        "attribute_type",
        "position",
        "label"
      ],
      "properties": {
        "_id": {
          "$ref": "#/$defs/AttributeID"
        },
        "label": {
          "$ref": "#/$defs/Label"
        },
        "position": {
          "$ref": "#/$defs/InputPosition"
        },
        "attribute_type": {
          "oneOf": [
            {
              "$ref": "#/$defs/AttributeNumericType"
            },
            {
              "type": "string",
              "enum": [
                "player_stat",
                "player_condition_meter",
                "impact",
                "text"
              ]
            }
          ]
        }
      }
    },
    "RegionEntry": {
      "type": "object",
      "required": [
        "quest_starter",
        "features",
        "summary",
        "description"
      ],
      "properties": {
        "_id": {
          "$ref": "#/$defs/ID"
        },
        "name": {
          "$ref": "#/$defs/Label"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "tags": {
          "$ref": "#/$defs/Tags"
        },
        "summary": {
          "$ref": "#/$defs/MarkdownSentences"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/LocalizedMarkdown"
          }
        },
        "quest_starter": {
          "$ref": "#/$defs/QuestStarter"
        }
      },
      "description": "Schema common to Encounter entries in *Ironsworn* and *Ironsworn: Starforged*.",
      "allOf": [
        {
          "$ref": "#/$defs/EncounterStub"
        },
        {
          "required": [
            "drives",
            "tactics"
          ],
          "properties": {
            "drives": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/LocalizedMarkdown"
              }
            },
            "tactics": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/LocalizedMarkdown"
              }
            }
          }
        }
      ]
    },
    "EncounterStub": {
      "required": [
        "rank",
        "name",
        "description",
        "nature"
      ],
      "properties": {
        "rank": {
          "$ref": "#/$defs/ChallengeRank"
        },
        "name": {
          "$ref": "#/$defs/Label"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "nature": {
          "type": "string"
        }
      }
    },
    "Encounter": {
      "type": "object",
      "required": [
        "quest_starter",
        "features",
        "summary",
        "description"
      ],
      "properties": {
        "_id": {
          "$ref": "#/$defs/ID"
        },
        "name": {
          "$ref": "#/$defs/Label"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "tags": {
          "$ref": "#/$defs/Tags"
        },
        "summary": {
          "$ref": "#/$defs/MarkdownSentences"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/LocalizedMarkdown"
          }
        },
        "quest_starter": {
          "$ref": "#/$defs/QuestStarter"
        }
      },
      "description": "Schema common to Encounter entries in *Ironsworn* and *Ironsworn: Starforged*.",
      "allOf": [
        {
          "$ref": "#/$defs/EncounterStub"
        },
        {
          "required": [
            "drives",
            "tactics"
          ],
          "properties": {
            "drives": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/LocalizedMarkdown"
              }
            },
            "tactics": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/LocalizedMarkdown"
              }
            }
          }
        }
      ]
    },
    "EncounterClassic": {
      "title": "EncounterClassic",
      "allOf": [
        {
          "$ref": "#/$defs/Encounter"
        },
        {
          "properties": {
            "nature": {
              "$ref": "#/$defs/EncounterTypeClassic"
            }
          }
        }
      ]
    },
    "EncounterStarforged": {
      "title": "EncounterStarforged",
      "allOf": [
        {
          "$ref": "#/$defs/Encounter"
        },
        {
          "properties": {
            "nature": {
              "$ref": "#/$defs/EncounterTypeStarforged"
            },
            "variants": {
              "title": "EncounterVariantsStarforged",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][a-z_]*[a-z]$": {
                  "$ref": "#/$defs/EncounterVariantStarforged"
                }
              }
            }
          }
        }
      ]
    },
    "EncounterVariantStarforged": {
      "title": "EncounterVariantStarforged",
      "allOf": [
        {
          "$ref": "#/$defs/Encounter"
        },
        {
          "properties": {
            "nature": {
              "$ref": "#/$defs/EncounterTypeStarforged"
            }
          }
        }
      ]
    },
    "EncounterTypeStarforged": {
      "title": "EncounterTypeStarforged",
      "type": "string",
      "examples": [
        "creature",
        "horror",
        "human",
        "machine",
        "monster",
        "vehicle"
      ]
    },
    "EncounterTypeClassic": {
      "title": "EncounterTypeClassic",
      "type": "string",
      "examples": [
        "Ironlander",
        "firstborn",
        "animal",
        "beast",
        "horror",
        "anomaly"
      ]
    },
    "EncounterNatureClassic": {
      "title": "EncounterNatureClassic",
      "properties": {
        "name": {
          "$ref": "#/$defs/Label"
        },
        "nature": {
          "$ref": "#/$defs/EncounterTypeClassic"
        }
      }
    },
    "DelveSite": {
      "type": "object",
      "required": [
        "name",
        "source",
        "rank",
        "theme",
        "domain",
        "denizens"
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/Label"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "rank": {
          "$ref": "#/$defs/ChallengeRank"
        },
        "theme": {
          "$ref": "#/$defs/DelveSiteThemeID"
        },
        "domain": {
          "$ref": "#/$defs/DelveSiteDomainID"
        },
        "denizens": {
          "type": "array",
          "allOf": [
            {
              "items": {
                "$ref": "#/$defs/DelveSiteDenizen"
              }
            },
            {
              "additionalItems": false,
              "items": [
                {
                  "properties": {
                    "frequency": {
                      "const": "very_common"
                    },
                    "low": {
                      "const": 1
                    },
                    "high": {
                      "const": 27
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "common"
                    },
                    "low": {
                      "const": 28
                    },
                    "high": {
                      "const": 41
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "common"
                    },
                    "low": {
                      "const": 42
                    },
                    "high": {
                      "const": 55
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "common"
                    },
                    "low": {
                      "const": 56
                    },
                    "high": {
                      "const": 69
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "uncommon"
                    },
                    "low": {
                      "const": 70
                    },
                    "high": {
                      "const": 75
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "uncommon"
                    },
                    "low": {
                      "const": 76
                    },
                    "high": {
                      "const": 81
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "uncommon"
                    },
                    "low": {
                      "const": 82
                    },
                    "high": {
                      "const": 87
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "uncommon"
                    },
                    "low": {
                      "const": 88
                    },
                    "high": {
                      "const": 93
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "rare"
                    },
                    "low": {
                      "const": 94
                    },
                    "high": {
                      "const": 95
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "rare"
                    },
                    "low": {
                      "const": 96
                    },
                    "high": {
                      "const": 97
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "rare"
                    },
                    "low": {
                      "const": 98
                    },
                    "high": {
                      "const": 99
                    }
                  }
                },
                {
                  "properties": {
                    "frequency": {
                      "const": "unforeseen"
                    },
                    "low": {
                      "const": 100
                    },
                    "high": {
                      "const": 100
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "Rarity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "asset",
        "source",
        "xp_cost",
        "description"
      ],
      "properties": {
        "_id": {
          "$ref": "#/$defs/RarityID"
        },
        "name": {
          "$ref": "#/$defs/Label"
        },
        "icon": {
          "$ref": "#/$defs/Icon"
        },
        "asset": {
          "$ref": "#/$defs/AssetID"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "xp_cost": {
          "type": "integer",
          "minimum": 3,
          "maximum": 5
        },
        "description": {
          "$ref": "#/$defs/Description"
        }
      }
    },
    "DelveSiteDenizenRarity": {
      "enum": [
        "very_common",
        "common",
        "uncommon",
        "rare",
        "unforeseen"
      ]
    },
    "DelveSiteDenizen": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/OracleRowLike"
        },
        {
          "required": [
            "frequency",
            "encounter"
          ],
          "properties": {
            "name": {
              "description": "A name for the encounter, if it differs from the original entry's default name.",
              "$ref": "#/$defs/Label"
            },
            "frequency": {
              "$ref": "#/$defs/DelveSiteDenizenRarity"
            },
            "encounter": {
              "default": null,
              "oneOf": [
                {
                  "$ref": "#/$defs/EncounterClassicID"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      ]
    },
    "DelveCardType": {
      "type": "string",
      "enum": [
        "theme",
        "domain"
      ]
    },
    "DelveCardBase": {
      "description": "Schema shared by delve site themes and delve site domains.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "$ref": "#/$defs/Label"
        },
        "card_type": {
          "$ref": "#/$defs/DelveCardType"
        },
        "summary": {
          "$ref": "#/$defs/MarkdownSentences"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "features": {
          "items": {
            "$ref": "#/$defs/OracleTableRow"
          }
        },
        "dangers": {
          "items": {
            "$ref": "#/$defs/OracleTableRow"
          }
        }
      }
    },
    "DelveSiteDomain": {
      "allOf": [
        {
          "$ref": "#/$defs/DelveCardBase"
        },
        {
          "properties": {
            "card_type": {
              "const": "domain"
            },
            "features": {
              "additionalItems": false,
              "items": [
                {
                  "properties": {
                    "low": {
                      "const": 21
                    },
                    "high": {
                      "const": 43
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 44
                    },
                    "high": {
                      "const": 56
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 57
                    },
                    "high": {
                      "const": 64
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 65
                    },
                    "high": {
                      "const": 68
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 69
                    },
                    "high": {
                      "const": 72
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 73
                    },
                    "high": {
                      "const": 76
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 77
                    },
                    "high": {
                      "const": 80
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 81
                    },
                    "high": {
                      "const": 84
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 85
                    },
                    "high": {
                      "const": 88
                    }
                  }
                }
              ]
            },
            "dangers": {
              "additionalItems": false,
              "items": [
                {
                  "properties": {
                    "low": {
                      "const": 31
                    },
                    "high": {
                      "const": 33
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 34
                    },
                    "high": {
                      "const": 36
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 37
                    },
                    "high": {
                      "const": 39
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 40
                    },
                    "high": {
                      "const": 42
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 43
                    },
                    "high": {
                      "const": 45
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "DelveSiteTheme": {
      "allOf": [
        {
          "$ref": "#/$defs/DelveCardBase"
        },
        {
          "properties": {
            "card_type": {
              "const": "theme"
            },
            "features": {
              "additionalItems": false,
              "items": [
                {
                  "properties": {
                    "low": {
                      "const": 1
                    },
                    "high": {
                      "const": 4
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 5
                    },
                    "high": {
                      "const": 8
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 9
                    },
                    "high": {
                      "const": 12
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 13
                    },
                    "high": {
                      "const": 16
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 17
                    },
                    "high": {
                      "const": 20
                    }
                  }
                }
              ]
            },
            "dangers": {
              "additionalItems": false,
              "items": [
                {
                  "properties": {
                    "low": {
                      "const": 1
                    },
                    "high": {
                      "const": 5
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 6
                    },
                    "high": {
                      "const": 10
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 11
                    },
                    "high": {
                      "const": 12
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 13
                    },
                    "high": {
                      "const": 14
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 15
                    },
                    "high": {
                      "const": 16
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 17
                    },
                    "high": {
                      "const": 18
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 19
                    },
                    "high": {
                      "const": 20
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 21
                    },
                    "high": {
                      "const": 22
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 23
                    },
                    "high": {
                      "const": 24
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 25
                    },
                    "high": {
                      "const": 26
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 27
                    },
                    "high": {
                      "const": 28
                    }
                  }
                },
                {
                  "properties": {
                    "low": {
                      "const": 29
                    },
                    "high": {
                      "const": 30
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "Localizable": {
      "description": "A localizable string of plain text.",
      "type": "string"
    },
    "Label": {
      "$ref": "#/$defs/Localizable",
      "description": "A localizable string of plain text used to provide a player-facing label for this element."
    },
    "LocalizedMarkdown": {
      "$ref": "#/$defs/Localizable",
      "description": "A localizable string formatted in markdown. This usually represents a direct excerpt from the source material."
    },
    "LocalizedTemplateString": {
      "description": "A localizable markdown string template where variables are provided by rolling an oracle table.",
      "$ref": "#/$defs/LocalizedMarkdown"
    },
    "QuestStarter": {
      "description": "A localizable markdown string describing the quest starter associated with this item.",
      "$ref": "#/$defs/LocalizedMarkdown"
    },
    "Summary": {
      "description": "A player-facing markdown summary of the item. Summary is shorter than {@link HasDescription| Description}, when they're both present.",
      "$ref": "#/$defs/LocalizedMarkdown"
    },
    "Description": {
      "$ref": "#/$defs/LocalizedMarkdown",
      "description": "A player-facing markdown description of the item, consisting of one or more paragraphs."
    },
    "CategoryMetadata": {
      "type": "object",
      "required": [
        "title",
        "source"
      ],
      "properties": {
        "_id": {
          "$ref": "#/$defs/ID"
        },
        "title": {
          "$ref": "#/$defs/Title"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "summary": {
          "$ref": "#/$defs/MarkdownSentences"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "tags": {
          "$ref": "#/$defs/Tags"
        }
      }
    },
    "Game": {
      "enum": [
        "starforged",
        "classic"
      ]
    },
    "NamespaceKey": {
      "description": "The name of the dataset, used as a key in the root data object and to compose Dataforged's string ID. This *must* be unique; if you need override behaviour, you can use properties like _extends.",
      "type": "string",
      "pattern": "^[a-z0-9][a-z0-9_+]*[a-z0-9]$",
      "examples": [
        "starforged",
        "ironsworn",
        "ironsworn_delve",
        "sundered_isles"
      ]
    },
    "Color": {
      "description": "A hexadecimal color associated with this item, for use as e.g. an accent color when rendering it.",
      "type": "string",
      "pattern": "^#([\\dA-f]{2}){3}$",
      "format": "color"
    },
    "License": {
      "description": "The URI pointing to the license which this item's *text* content falls under. If this is null, no license is specified -- use with caution.",
      "type": [
        "string",
        "null"
      ],
      "format": "uri",
      "default": "https://creativecommons.org/licenses/by-nc-sa/4.0",
      "examples": [
        "https://creativecommons.org/licenses/by-nc-sa/4.0",
        "https://creativecommons.org/licenses/by/4.0"
      ]
    },
    "Title": {
      "required": [
        "canonical"
      ],
      "additionalProperties": false,
      "properties": {
        "_id": {
          "$ref": "#/$defs/ID"
        },
        "canonical": {
          "description": "The title of this item, which here is defined as the associated header text *exactly* as it appears on the page (though it should be rendered in title case appropriate to the language, not all-caps).\n\nFor items that represent a single table column, this is the label that appears at the top of the column.\n\nUse this title if you want high fidelity to the book. For most interactive UX, it's recommended to use {@link Title.standard} instead.",
          "$ref": "#/$defs/Label"
        },
        "short": {
          "description": "The shortest title for this item that remains distinct amongst its siblings.\n\n Unless you're very pressed for space, most UX should use {@link Title.standard} instead.",
          "$ref": "#/$defs/Label"
        },
        "standard": {
          "description": "The recommended title for most implementations.\n\nThis is usually the same as the canonical title, but editorializes a bit by trimming out things like \"Oracle 15\" in some classic Ironsworn oracles (because *nobody* remembers it as \"Oracle 15\").",
          "$ref": "#/$defs/Label"
        }
      }
    },
    "Icon": {
      "description": "The URI of an SVG vector icon.",
      "type": "string",
      "format": "uri-reference",
      "pattern": ".svg$"
    },
    "Image": {
      "description": "The URI of a WEBP image.",
      "type": "string",
      "format": "uri-reference",
      "pattern": ".webp$"
    },
    "Source": {
      "description": "Information on this item's source. For 'canonical' content, this is usually a book with a page number, but it might also be a link to a web site.",
      "type": "object",
      "required": [
        "authors",
        "license",
        "title",
        "date",
        "uri"
      ],
      "additionalProperties": false,
      "examples": [
        {
          "title": "Ironsworn Assets Master Set",
          "authors": [
            "Shawn Tomkin"
          ],
          "license": "https://creativecommons.org/licenses/by/4.0",
          "date": "2023-01-15",
          "uri": "https://ironswornrpg.com"
        }
      ],
      "properties": {
        "title": {
          "description": "The title of the source.\n\nFor 'canonical' content, use one of the enumerated `SourceTitle` strings.\n\nFor 3rd-party content (including homebrew) that's been released as part of a titled document, use the title of that document (e.g. \"Steelforged\", \"Ironsmith\").\n\nIf the source has no particular title (for instance, it's a single custom element in a VTT implementation), use \"Custom\".",
          "type": "string",
          "examples": [
            "Ironsworn: Starforged Rulebook",
            "Ironsworn Rulebook",
            "Ironsworn: Delve",
            "Ironsworn: Starforged Assets",
            "Ironsworn Assets Master Set"
          ]
        },
        "authors": {
          "description": "The author(s) of this item. For 'canonical' content, this one's usually pretty obvious 😉 However, it's included so that homebrew content can use the same interface/schema.",
          "default": [
            "Shawn Tomkin"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "page": {
          "description": "The page on which the item appears most prominently in the source material (if it's in a format that uses page numbers).",
          "type": "integer",
          "minimum": 1
        },
        "uri": {
          "description": "The URI where the source material is available.",
          "type": "string",
          "format": "uri",
          "examples": [
            "https://ironswornrpg.com"
          ]
        },
        "date": {
          "description": "The date when the source document's content was last updated.",
          "format": "date",
          "type": "string"
        },
        "license": {
          "$ref": "#/$defs/License"
        }
      }
    },
    "Tags": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z][a-z_0-9]*[a-z0-9]$"
      }
    },
    "Suggestions": {
      "type": "object",
      "description": "\"Non-canonical\" suggestions of related items. They might be convenient to present to the user, but in most implementations rolling them automatically is not recommended.",
      "additionalProperties": false,
      "properties": {
        "rolls": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/OracleTableID"
          }
        },
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/IronlandsRegionID"
          }
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AssetID"
          }
        },
        "site_themes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/DelveSiteThemeID"
          }
        },
        "site_domains": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/DelveSiteDomainID"
          }
        }
      }
    },
    "RenderMetadata": {
      "description": "Contains data relevant to rendering the item.",
      "properties": {
        "icon": {
          "$ref": "#/$defs/Icon"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Image"
          }
        },
        "color": {
          "$ref": "#/$defs/Color"
        }
      }
    },
    "MoveExtension": {
      "title": "MoveExtension",
      "allOf": [
        {
          "$ref": "#/$defs/MoveExtensionBase"
        },
        {
          "required": [
            "_moves"
          ],
          "properties": {
            "_moves": {
              "$ref": "#/$defs/MoveExtensionBase/properties/_moves"
            }
          }
        }
      ]
    },
    "MoveExtensionBase": {
      "description": "Describes changes made to moves by asset abilities.",
      "type": "object",
      "properties": {
        "_moves": {
          "description": "The ID of the affected moves. Use 'null' if it can apply to any move.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/MoveID"
          },
          "default": null
        },
        "trigger": {
          "$ref": "#/$defs/Trigger"
        }
      }
    },
    "MoveCollection": {
      "title": "MoveCollection",
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/$defs/Title"
        },
        "color": {
          "$ref": "#/$defs/Color"
        },
        "description": {
          "$ref": "#/$defs/Description"
        },
        "source": {
          "$ref": "#/$defs/Source"
        },
        "moves": {
          "title": "Moves",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/Move"
            }
          }
        }
      }
    },
    "Move": {
      "type": "object",
      "required": [
        "text",
        "name",
        "trigger"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "$ref": "#/$defs/Label"
        },
        "trigger": {
          "$ref": "#/$defs/Trigger"
        },
        "attributes": {
          "type": "object",
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/CustomStat"
            }
          }
        },
        "outcomes": {
          "$ref": "#/$defs/MoveOutcomes"
        },
        "text": {
          "$ref": "#/$defs/LocalizedMarkdown"
        },
        "suggestions": {
          "$ref": "#/$defs/Suggestions"
        },
        "asset": {
          "description": "The ID of the parent Asset of the move, if any.",
          "$ref": "#/$defs/AssetID"
        },
        "progress_move": {
          "description": "Whether or not the move is a Progress Move. Progress moves roll two challenge dice against a progress score.",
          "type": "boolean"
        },
        "variant_of": {
          "description": "The ID of the move that this move is a variant of, if any.",
          "$ref": "#/$defs/MoveID"
        },
        "oracles": {
          "description": "The ID of any oracles directly referenced by the move, or vice versa.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/OracleTableID"
          }
        },
        "optional": {
          "description": "Whether or not the source material presents this rules item as optional.",
          "default": false,
          "type": "boolean"
        },
        "tags": {
          "description": "Arbitrary strings tags that describe optional metadata that doesn't fit in other properties.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "description": "The ID of the move's category.",
          "$ref": "#/$defs/MoveCollectionID"
        },
        "source": {
          "$ref": "#/$defs/Source"
        }
      }
    },
    "TriggerOptionAction": {
      "allOf": [
        {
          "$ref": "#/$defs/TriggerOption"
        },
        {
          "properties": {
            "using": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/PlayerStatID"
                  },
                  {
                    "$ref": "#/$defs/PlayerConditionMeterID"
                  },
                  {
                    "$ref": "#/$defs/ConditionMeterAlias"
                  },
                  {
                    "$ref": "#/$defs/AttributeID"
                  }
                ]
              }
            },
            "roll_type": {
              "const": "action_roll"
            }
          }
        }
      ]
    },
    "TriggerOptionProgress": {
      "allOf": [
        {
          "$ref": "#/$defs/TriggerOption"
        },
        {
          "properties": {
            "using": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ProgressTrackType"
              }
            },
            "roll_type": {
              "const": "progress_roll"
            }
          }
        }
      ]
    },
    "MoveOutcomeType": {
      "enum": [
        "miss",
        "weak_hit",
        "strong_hit"
      ]
    },
    "MoveOutcomeWithMatch": {
      "allOf": [
        {
          "$ref": "#/$defs/MoveOutcome"
        },
        {
          "properties": {
            "match": {
              "$ref": "#/$defs/MoveOutcome"
            }
          }
        }
      ]
    },
    "MoveOutcome": {
      "type": "object",
      "properties": {
        "text": {
          "$ref": "#/$defs/LocalizedMarkdown"
        }
      }
    },
    "MoveOutcomes": {
      "type": "object",
      "properties": {
        "miss": {
          "$ref": "#/$defs/MoveOutcomeWithMatch"
        },
        "weak_hit": {
          "$ref": "#/$defs/MoveOutcome"
        },
        "strong_hit": {
          "$ref": "#/$defs/MoveOutcomeWithMatch"
        }
      }
    },
    "TriggerOptionBase": {
      "type": "object",
      "properties": {
        "method": {
          "title": "RollMethod",
          "type": "string",
          "description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled.\n\n`any`: When rolling with this move trigger option, the user picks which stat to use.\n\n`all`: When rolling with this move trigger option, *every* stat or progress track of the `using` key is rolled.\n\n`highest`: When rolling with this move trigger option, use the highest/best option from the `using` key.\n\n`lowest`: When rolling with this move trigger option, use the lowest/worst option from the `using` key.\n\n`inherit`: This move trigger option has no roll method of its own, and must inherit its roll from another move trigger option. If the parent's `Using` is defined, the inherited roll must use one of those stats/progress tracks.\n\n`strong_hit`: The move trigger option results in an automatic strong hit - no roll required.\n\n`weak_hit`: The move trigger option results in an automatic weak hit - no roll required.\n\n`miss`: The move trigger options results in an automatic miss - no roll required.",
          "default": "any",
          "enum": [
            "all",
            "any",
            "highest",
            "inherit",
            "lowest",
            "strong_hit",
            "weak_hit",
            "miss"
          ]
        },
        "text": {
          "$ref": "#/$defs/LocalizedMarkdown"
        },
        "using": {
          "type": "array",
          "description": "The stat(s) or progress track(s) that may be rolled with this move trigger option.",
          "items": {
            "type": "string"
          }
        },
        "roll_type": {
          "title": "RollType",
          "enum": [
            "action_roll",
            "progress_roll"
          ]
        }
      }
    },
    "TriggerOption": {
      "title": "TriggerOption",
      "oneOf": [
        {
          "items": {
            "$ref": "#/$defs/TriggerOptionAction"
          }
        },
        {
          "items": {
            "$ref": "#/$defs/TriggerOptionProgress"
          }
        }
      ]
    },
    "Trigger": {
      "title": "Trigger",
      "type": "object",
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/TriggerOption"
          }
        },
        "text": {
          "description": "A markdown string containing the primary trigger text for this move.\n\nSecondary triggers (for specific stats or uses of an asset ability) are described in `Options`.",
          "type": "string"
        },
        "by": {
          "description": "Information on who can trigger this item. Usually this is just the player, but some asset abilities can trigger from an Ally's move.",
          "additionalProperties": false,
          "properties": {
            "player": {
              "type": "boolean",
              "default": true
            },
            "ally": {
              "type": "boolean",
              "default": false
            }
          }
        }
      },
      "additionalProperties": false
    },
    "ChallengeRank": {
      "type": "integer",
      "description": "A numeric challenge rank: 1 = troublesome; 2 = dangerous; 3 = formidable; 4 = extreme; 5 = epic.",
      "enum": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    "ProgressTrackStarforgedType": {
      "enum": [
        "discoveries_legacy",
        "bonds_legacy",
        "quests_legacy",
        "vow",
        "combat",
        "expedition",
        "connection",
        "scene_challenge"
      ]
    },
    "ProgressTrackClassicType": {
      "enum": [
        "vow",
        "combat",
        "journey",
        "bonds",
        "delve",
        "scene_challenge"
      ]
    },
    "ProgressTrackType": {
      "anyOf": [
        {
          "$ref": "#/$defs/ProgressTrackStarforgedType"
        },
        {
          "$ref": "#/$defs/ProgressTrackClassicType"
        }
      ]
    },
    "SettingTruth": {
      "type": "object",
      "required": [
        "name",
        "source"
      ],
      "properties": {
        "_id": {
          "$ref": "#/$defs/ID"
        },
        "name": {
          "$ref": "#/$defs/Label"
        },
        "source": {
          "$ref": "#/$defs/Source"
        }
      }
    },
    "SettingTruthOption": {
      "required": [
        "quest_starter"
      ],
      "additionalProperties": false,
      "properties": {
        "quest_starter": {
          "$ref": "#/$defs/QuestStarter"
        }
      }
    },
    "SettingTruthStarforged": {
      "allOf": [
        {
          "$ref": "#/$defs/SettingTruth"
        },
        {
          "properties": {
            "options": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/OracleTableRow"
              }
            }
          }
        }
      ]
    },
    "WorldTruthClassic": {
      "allOf": [
        {
          "$ref": "#/$defs/SettingTruth"
        },
        {
          "properties": {
            "options": {
              "type": "array",
              "maxItems": 3,
              "minItems": 3,
              "items": {
                "type": "object",
                "required": [
                  "description",
                  "quest_starter"
                ],
                "properties": {
                  "description": {
                    "$ref": "#/$defs/Description"
                  },
                  "quest_starter": {
                    "$ref": "#/$defs/QuestStarter"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "NamespaceClassic": {
      "additionalProperties": false,
      "properties": {
        "assets": {
          "title": "AssetCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/AssetCollection"
            }
          }
        },
        "moves": {
          "title": "MoveCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/MoveCollection"
            }
          }
        },
        "oracles": {
          "title": "OracleCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/OracleCollection"
            }
          }
        },
        "_ruleset": {
          "const": "starforged"
        },
        "world_truths": {
          "title": "WorldTruthsClassic",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/WorldTruthClassic"
            }
          }
        },
        "encounters": {
          "title": "EncountersStarforged",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/EncounterStarforged"
            }
          }
        },
        "regions": {
          "title": "Regions",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/RegionEntry"
            }
          }
        },
        "rarities": {
          "title": "Rarities",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/Rarity"
            }
          }
        },
        "site_domains": {
          "title": "DelveSiteDomains",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/DelveSiteDomain"
            }
          }
        },
        "site_themes": {
          "title": "DelveSiteThemes",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/DelveSiteTheme"
            }
          }
        },
        "delve_sites": {
          "title": "DelveSites",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/DelveSite"
            }
          }
        },
        "setting_truths": {
          "title": "SettingTruthsStarforged",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/SettingTruthStarforged"
            }
          }
        }
      }
    },
    "NamespaceStarforged": {
      "additionalProperties": false,
      "properties": {
        "assets": {
          "title": "AssetCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/AssetCollection"
            }
          }
        },
        "moves": {
          "title": "MoveCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/MoveCollection"
            }
          }
        },
        "oracles": {
          "title": "OracleCollections",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/OracleCollection"
            }
          }
        },
        "_ruleset": {
          "const": "starforged"
        },
        "world_truths": {
          "title": "WorldTruthsClassic",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/WorldTruthClassic"
            }
          }
        },
        "encounters": {
          "title": "EncountersStarforged",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/EncounterStarforged"
            }
          }
        },
        "regions": {
          "title": "Regions",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/RegionEntry"
            }
          }
        },
        "rarities": {
          "title": "Rarities",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/Rarity"
            }
          }
        },
        "site_domains": {
          "title": "DelveSiteDomains",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/DelveSiteDomain"
            }
          }
        },
        "site_themes": {
          "title": "DelveSiteThemes",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/DelveSiteTheme"
            }
          }
        },
        "delve_sites": {
          "title": "DelveSites",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/DelveSite"
            }
          }
        },
        "setting_truths": {
          "title": "SettingTruthsStarforged",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-z][a-z_]*[a-z]$": {
              "$ref": "#/$defs/SettingTruthStarforged"
            }
          }
        }
      }
    }
  },
  "oneOf": [
    {
      "title": "Datasworn",
      "required": [
        "_ruleset"
      ],
      "properties": {
        "_ruleset": {
          "const": "classic"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z0-9][a-z0-9_]*[a-z0-9]$": {
          "$ref": "#/$defs/NamespaceClassic"
        }
      }
    },
    {
      "$comment": "Don't edit this by hand -- use the files in ./src/schema-ts instead.",
      "title": "Dataforged",
      "required": [
        "_ruleset"
      ],
      "properties": {
        "_ruleset": {
          "const": "starforged"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z0-9][a-z0-9_]*[a-z0-9]$": {
          "$ref": "#/$defs/NamespaceStarforged"
        }
      }
    }
  ]
}