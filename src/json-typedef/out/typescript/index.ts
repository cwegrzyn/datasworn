// Code generated by jtd-codegen for TypeScript v0.2.1

export type Dataforged = any;

export interface Asset {
  abilities: AssetAbility[];
  id: Id;
  name: Label;
  source: Source;
  attachments?: AssetAttachment;
  controls?: { [key: string]: AssetControlField };

  /**
   * If `true`, this asset counts as an impact (Starforged) or a debility
   * (classic Ironsworn).
   */
  count_as_impact?: boolean;
  options?: { [key: string]: AssetOptionField };
  requirement?: MarkdownString;

  /**
   * Most assets only benefit to their owner, but certain assets (like
   * Starforged's module and command vehicle assets) are shared amongst the
   * player's allies, too.
   */
  shared?: boolean;
}

export interface AssetAbility {
  enabled: boolean;
  id: Id;
  text: MarkdownString;
  controls?: { [key: string]: AssetAbilityControlField };
  extend_asset?: AssetExtension;
  extend_moves?: MoveExtension[];
  moves?: { [key: string]: Move };
  name?: Label;
  options?: { [key: string]: AssetOptionField };
}

export type AssetAbilityControlField = AssetAbilityControlFieldCheckbox | AssetAbilityControlFieldClock | AssetAbilityControlFieldCounter;

export interface AssetAbilityControlFieldCheckbox {
  field_type: "checkbox";
  id: Id;
  label: Label;
  value: (boolean | null);
}

export interface AssetAbilityControlFieldClock {
  field_type: "clock";
  id: Id;
  label: Label;
  max: number;
  min: number;
  value: number;
}

export interface AssetAbilityControlFieldCounter {
  field_type: "counter";
  id: Id;
  label: Label;
  max: (number | null);
  min: number;
  value: number;
}

/**
 * Describes which assets can be attached to this asset. The "canonical" example
 * for this are Starforged's Module assets, which can be equipped by Command
 * Vehicle assets. See p. 55 of Starforged for more info.
 */
export interface AssetAttachment {
  /**
   * Regular expressions matching the IDs of assets that can be attached to
   * this asset.
   */
  patterns: RegularExpression[];

  /**
   * The maximum number of attached assets. Omitted if there's no upper limit to
   * the number of attached assets.
   */
  max?: number;
}

/**
 * Asset controls are fields that are expected to change throughout the asset's
 * lifespan. The most common example are the condition meters on certain assets.
 * A more complex example is the distinct mechanical modes on Ironsworn's
 * 'Armored'.
 */
export type AssetControlField = AssetControlFieldCheckbox | AssetControlFieldChoicesExtendAsset | AssetControlFieldConditionMeter;

export interface AssetControlFieldCheckbox {
  field_type: "checkbox";
  id: Id;
  label: Label;
  value: (boolean | null);
}

export interface AssetControlFieldChoicesExtendAssetChoice {
  id: Id;
  label: Label;
  value: AssetExtension;
  selected?: boolean;
}

export interface AssetControlFieldChoicesExtendAsset {
  field_type: "choices_extend_asset";
  choices: { [key: string]: AssetControlFieldChoicesExtendAssetChoice };
  id: Id;
  label: Label;
}

export interface AssetControlFieldConditionMeter {
  field_type: "condition_meter";
  id: Id;
  label: Label;
  max: number;
  min: number;
  value: number;
}

export interface AssetExtensionAttachments {
  max?: number;
  patterns?: RegularExpression[];
}

export interface AssetExtensionControl {
  max?: number;
  min?: number;
}

/**
 * Describes changes applied to an asset, usually by another asset. Assume that
 * unspecified/null properties are unchanged.
 */
export interface AssetExtension {
  attachments?: AssetExtensionAttachments;

  /**
   * Use the same key as the original control. Currently, only condition meters
   * may be extended in this way.
   */
  controls?: { [key: string]: AssetExtensionControl };
  count_as_impact?: boolean;
}

export interface AssetExtensionChoice {
  id: Id;
  label: Label;
  value: AssetExtension;
}

export interface AssetExtensionForeignAttachments {
  max?: number;
  patterns?: RegularExpression[];
}

export interface AssetExtensionForeignControl {
  max?: number;
  min?: number;
}

/**
 * Describes changes applied to an asset, usually by another asset. Assume that
 * unspecified/null properties are unchanged.
 */
export interface AssetExtensionForeign {
  _extends: Id;
  id: Id;
  attachments?: AssetExtensionForeignAttachments;

  /**
   * Use the same key as the original control. Currently, only condition meters
   * may be extended in this way.
   */
  controls?: { [key: string]: AssetExtensionForeignControl };
  count_as_impact?: boolean;
}

/**
 * Asset options are fields that are usually only set once, typically when the
 * player purchases the asset. The most common examples are the "Name" fields
 * on companion assets. A more complex example is the choice of stats on the
 * Devotant asset.
 */
export type AssetOptionField = AssetOptionFieldChoicesExtendAsset | AssetOptionFieldChoicesNumber | AssetOptionFieldChoicesStatId | AssetOptionFieldText;

export interface AssetOptionFieldChoicesExtendAssetChoice {
  id: Id;
  label: Label;
  value: AssetExtension;
  selected?: boolean;
}

export interface AssetOptionFieldChoicesExtendAsset {
  field_type: "choices_extend_asset";
  choices: { [key: string]: AssetOptionFieldChoicesExtendAssetChoice };
  id: Id;
  label: Label;
}

export interface AssetOptionFieldChoicesNumberChoice {
  id: Id;
  label: Label;
  value: number;
  selected?: boolean;
}

export interface AssetOptionFieldChoicesNumber {
  field_type: "choices_number";
  choices: { [key: string]: AssetOptionFieldChoicesNumberChoice };
  id: Id;
  label: Label;
}

export interface AssetOptionFieldChoicesStatIdChoice {
  id: Id;
  label: Label;
  value: StatId;
  selected?: boolean;
}

export interface AssetOptionFieldChoicesStatId {
  field_type: "choices_stat_id";
  choices: { [key: string]: AssetOptionFieldChoicesStatIdChoice };
  id: Id;
  label: Label;
}

export interface AssetOptionFieldText {
  field_type: "text";
  id: Id;
  label: Label;
  value?: string;
}

export type ChallengeRank = number;

/**
 * A valid CSS color.
 */
export type Color = string;

export enum DelveSiteDenizenFrequency {
  Common = "common",
  Rare = "rare",
  Uncommon = "uncommon",
  Unforeseen = "unforeseen",
  VeryCommon = "very_common",
}

export interface DelveSiteDenizen {
  frequency: DelveSiteDenizenFrequency;
  high: number;
  low: number;
  encounter?: Id;
  name?: Label;
}

export enum DelveSiteDomainCardType {
  Domain = "domain",
}

export interface DelveSiteDomain {
  card_type: DelveSiteDomainCardType;
  dangers: FeatureOrDanger[];
  features: FeatureOrDanger[];
  id: Id;
  name: Label;
  source: Source;
  summary: MarkdownString;
  description?: MarkdownString;
  icon?: SvgImageUrl;
  suggestions?: Suggestions;
}

export enum DelveSiteThemeCardType {
  Theme = "theme",
}

export interface DelveSiteTheme {
  card_type: DelveSiteThemeCardType;
  dangers: FeatureOrDanger[];
  features: FeatureOrDanger[];
  id: Id;
  name: Label;
  source: Source;
  summary: MarkdownString;
  description?: MarkdownString;
  icon?: SvgImageUrl;
  suggestions?: Suggestions;
}

export type EncounterNatureClassic = string;

export type EncounterNatureStarforged = string;

export interface EncounterStarforged {
  description: MarkdownString;
  drives: MarkdownString[];
  features: MarkdownString[];
  id: Id;
  name: Label;
  nature: EncounterNatureStarforged;
  quest_starter: MarkdownString;
  rank: ChallengeRank;
  source: Source;
  summary: MarkdownString;
  tactics: MarkdownString[];
  suggestions?: Suggestions;
  variants?: { [key: string]: EncounterVariantStarforged };
}

export interface EncounterVariantStarforged {
  description: MarkdownString;
  id: Id;
  name: Label;
  nature: EncounterNatureStarforged;
  rank: ChallengeRank;
}

export interface FeatureOrDanger {
  high: number;
  id: Id;
  low: number;
  result: MarkdownString;
  description?: MarkdownString;
  embed_table?: Id;
  icon?: SvgImageUrl;
  rolls?: OracleTableRoll[];
  suggestions?: Suggestions;
  summary?: MarkdownString;
  template?: OracleRollTemplate;
}

export type Id = string;

/**
 * A user-facing text label or name.
 */
export type Label = string;

/**
 * A rich text string in Markdown. Usually this is a direct excerpt from the
 * rules text.
 * 
 *       The custom syntax `{{table:some_oracle_table_id}}` represents a
 * markdown table rendered from oracle data.
 */
export type MarkdownString = string;

export interface Move {
  id: Id;
  name: Label;
  outcomes: MoveOutcomes;
  source: Source;
  text: MarkdownString;
  trigger: Trigger;
  suggestions?: Suggestions;
}

export interface MoveCategory {
  canonical_name: Label;
  color: Color;
  contents: { [key: string]: Move };
  id: Id;
  name: Label;
  source: Source;
  summary: MarkdownString;
  description?: MarkdownString;
  suggestions?: Suggestions;
}

export interface MoveExtension {
  id: Id;
  trigger: TriggerExtension;
  _extends?: Id[];
  outcomes?: MoveOutcomesExtension;
  text?: MarkdownString;
}

export interface MoveOutcome {
  text: MarkdownString;
  count_as?: MoveOutcomeType;
  reroll?: MoveReroll;
}

export interface MoveOutcomeExtensionReroll {
  method?: MoveRerollMethod;
  text?: MarkdownString;
}

export interface MoveOutcomeExtension {
  count_as?: MoveOutcomeType;
  reroll?: MoveOutcomeExtensionReroll;
  text?: MarkdownString;
}

export interface MoveOutcomeMatchable {
  text: MarkdownString;
  count_as?: MoveOutcomeType;
  match?: MoveOutcome;
  reroll?: MoveReroll;
}

export interface MoveOutcomeMatchableExtensionReroll {
  method?: MoveRerollMethod;
  text?: MarkdownString;
}

export interface MoveOutcomeMatchableExtension {
  count_as?: MoveOutcomeType;
  match?: MoveOutcomeExtension;
  reroll?: MoveOutcomeMatchableExtensionReroll;
  text?: MarkdownString;
}

export enum MoveOutcomeType {
  /**
   * The player's score doesn't beat any challenge dice.
   */
  Miss = "miss",

  /**
   * The player's score beats both of the challenge dice.
   */
  StrongHit = "strong_hit",

  /**
   * The player's score beats one of the challenge dice.
   */
  WeakHit = "weak_hit",
}

export interface MoveOutcomes {
  miss: MoveOutcomeMatchable;
  strong_hit: MoveOutcomeMatchable;
  weak_hit: MoveOutcome;
}

export interface MoveOutcomesExtension {
  miss?: MoveOutcomeMatchableExtension;
  strong_hit?: MoveOutcomeMatchableExtension;
  weak_hit?: MoveOutcomeExtension;
}

export interface MoveReroll {
  method: MoveRerollMethod;
  text?: MarkdownString;
}

export enum MoveRerollMethod {
  /**
   * Reroll the action die
   */
  ActionDie = "action_die",

  /**
   * Reroll all dice
   */
  All = "all",

  /**
   * Reroll any dice
   */
  Any = "any",

  /**
   * Reroll any challenge dice
   */
  ChallengeDice = "challenge_dice",

  /**
   * Reroll one challenge die
   */
  ChallengeDie = "challenge_die",
}

export interface OracleCollection {
  canonical_name: Label;
  contents: { [key: string]: OracleTable };
  id: Id;
  name: Label;
  source: Source;
  summary: MarkdownString;
  collections?: { [key: string]: OracleCollection };
  color?: Color;
  description?: MarkdownString;
  rendering?: OracleCollectionRendering;
  sample_names?: Label[];
  suggestions?: Suggestions;
  template?: OracleRollTemplate;
}

export interface OracleCollectionColumn {
  content_type: OracleColumnContentType;
  table_key: string;
  color?: Color;
  label?: Label;
}

export interface OracleCollectionRendering {
  columns: { [key: string]: OracleCollectionColumn };
  color?: Color;
  style?: (OracleCollectionStyle | null);
}

export enum OracleCollectionStyle {
  MultiTable = "multi_table",
}

export enum OracleColumnContentType {
  Description = "description",
  Range = "range",
  Result = "result",
  Summary = "summary",
}

export interface OracleRollTemplate {
  description?: TemplateString;
  result?: TemplateString;
  summary?: TemplateString;
}

export interface OracleTable {
  canonical_name: Label;
  id: Id;
  name: Label;
  source: Source;
  table: OracleTableRow[];
  description?: MarkdownString;
  match?: OracleTableMatchBehavior;
  rendering?: OracleTableRendering;
  suggestions?: Suggestions;
  summary?: MarkdownString;
}

export interface OracleTableColumn {
  content_type: OracleColumnContentType;
  label?: Label;
}

export interface OracleTableMatchBehavior {
  text: MarkdownString;
}

export interface OracleTableRendering {
  color?: Color;
  columns?: { [key: string]: OracleTableColumn };
  icon?: SvgImageUrl;
  style?: OracleTableStyle;
}

export interface OracleTableRoll {
  oracle: Id;
  method?: OracleTableRollMethod;
  times?: number;
}

export enum OracleTableRollMethod {
  KeepDuplicates = "keep_duplicates",
  MakeItWorse = "make_it_worse",
  NoDuplicates = "no_duplicates",
}

export interface OracleTableRow {
  high: (number | null);
  id: Id;
  low: (number | null);
  result: MarkdownString;
  description?: MarkdownString;
  embed_table?: Id;
  icon?: SvgImageUrl;
  rolls?: OracleTableRoll[];
  suggestions?: Suggestions;
  summary?: MarkdownString;
  template?: OracleRollTemplate;
}

export enum OracleTableStyle {
  EmbedAsColumn = "embed_as_column",
  EmbedInRow = "embed_in_row",
  Table = "table",
}

export enum ProgressType {
  /**
   * A player's Bonds legacy track(Starforged ruleset only)
   */
  BondsLegacy = "bonds_legacy",

  /**
   * A player's bonds progress track (Ironsworn ruleset only)
   */
  BondsProgress = "bonds_progress",

  /**
   * A combat progress track, started with Enter the Fray.
   */
  CombatProgress = "combat_progress",

  /**
   * A connection progress track, started with Make a Connection (Starforged
   * ruleset only)
   */
  ConnectionProgress = "connection_progress",

  /**
   * A delve site progress track, started with Discover a Site (Ironsworn
   * ruleset only)
   */
  DelveProgress = "delve_progress",

  /**
   * A player's Discoveries legacy track(Starforged ruleset only)
   */
  DiscoveriesLegacy = "discoveries_legacy",

  /**
   * An expedition progress track, started with Undertake an Expedition
   * (Starforged ruleset only)
   */
  ExpeditionProgress = "expedition_progress",

  /**
   * A journey progress track, started with Undertake a Journey (Ironsworn
   * ruleset only)
   */
  JourneyProgress = "journey_progress",

  /**
   * A player's Quests legacy track (Starforged ruleset only)
   */
  QuestsLegacy = "quests_legacy",

  /**
   * A scene challenge progress track
   */
  SceneChallengeProgress = "scene_challenge_progress",

  /**
   * A vow progress track, started with Swear an Iron Vow
   */
  VowProgress = "vow_progress",
}

export interface Rarity {
  asset: Id;
  description: MarkdownString;
  id: Id;
  name: Label;
  source: Source;
  xp_cost: number;
  icon?: SvgImageUrl;
  suggestions?: Suggestions;
}

export interface RegionEntry {
  description: MarkdownString;
  features: MarkdownString[];
  id: Id;
  name: Label;
  quest_starter: MarkdownString;
  source: Source;
  summary: MarkdownString;
  suggestions?: Suggestions;
}

export type RegularExpression = string;

export enum RollMethod {
  /**
   * When rolling with this move trigger option, *every* stat or progress track
   * of the `using` key is rolled
   */
  All = "all",

  /**
   * When rolling with this move trigger option, the player picks which stat
   * to use.
   */
  Any = "any",

  /**
   * When rolling with this move trigger option, use the highest/best option
   * from the `using` key.
   */
  Highest = "highest",

  /**
   * When rolling with this move trigger option, use the lowest/worst option
   * from the `using` key.
   */
  Lowest = "lowest",

  /**
   * Take an automatic miss instead of rolling.
   */
  Miss = "miss",

  /**
   * Take an automatic strong hit instead of rolling.
   */
  StrongHit = "strong_hit",

  /**
   * Take an automatic weak hit instead of rolling.
   */
  WeakHit = "weak_hit",
}

export interface SettingTruth {
  id: Id;
  name: Label;
  options: SettingTruthOption[];
  source: Source;
  icon?: SvgImageUrl;
  suggestions?: Suggestions;
}

export interface SettingTruthOption {
  description: MarkdownString;
  id: Id;
  quest_starter: MarkdownString;
  summary: MarkdownString;
}

export interface Source {
  authors: string[];
  date: string;
  license: Url;
  title: string;
  url: Url;
  page?: number;
}

/**
 * A player stat (e.g. `player/stats/edge`), a player condition meter (e.g.
 * `player/meters/health`), or an ID pointing to an asset option or asset
 * control whose value is to be used.
 */
export type StatId = string;

export interface Suggestions {
  assets?: Id[];
  moves?: Id[];
  oracles?: Id[];
}

/**
 * A relative URL pointing to an SVG image.
 */
export type SvgImageUrl = string;

/**
 * A rich text string in Markdown with replaced values from oracle roll results.
 * 
 *       The custom syntax `{{some_row_key:some_oracle_table_id}}`
 * should be replaced by the `some_row_key` string of a rolled
 * oracle table. This is usually the `result` key, for example
 * `{{result:starforged/oracles/core/action}}`
 */
export type TemplateString = string;

export type Trigger = TriggerActionRoll | TriggerProgressRoll;

export interface TriggerActionRoll {
  roll_type: "action_roll";
  text: MarkdownString;
  options?: TriggerOptionAction[];
}

export interface TriggerProgressRoll {
  roll_type: "progress_roll";
  text: MarkdownString;
  options?: TriggerOptionProgress[];
}

/**
 * Information on who can trigger this trigger option. Usually this is just the
 * player, but some asset abilities can trigger from an ally's move.
 */
export interface TriggerBy {
  ally: boolean;
  player: boolean;
}

export type TriggerExtension = TriggerExtensionActionRoll | TriggerExtensionProgressRoll;

export interface TriggerExtensionActionRoll {
  roll_type: "action_roll";
  options: TriggerOptionAction[];
}

export interface TriggerExtensionProgressRoll {
  roll_type: "progress_roll";
  options: TriggerOptionProgress[];
}

export interface TriggerOptionAction {
  by?: TriggerBy;
  choices?: TriggerOptionChoiceAction[];
  method?: RollMethod;
  text?: MarkdownString;
}

export type TriggerOptionChoiceAction = TriggerOptionChoiceActionCustom | TriggerOptionChoiceActionStat;

export interface TriggerOptionChoiceActionCustom {
  using: "custom";
  label: Label;
  value: number;
}

export interface TriggerOptionChoiceActionStat {
  using: "stat";
  ref: StatId;
}

export interface TriggerOptionChoiceProgress {
  using: ProgressType;
}

export interface TriggerOptionProgress {
  by?: TriggerBy;
  choices?: TriggerOptionChoiceProgress[];
  method?: RollMethod;
  text?: MarkdownString;
}

/**
 * An absolute URL pointing to a web site.
 */
export type Url = string;

/**
 * A relative URL pointing to a WEBP image.
 */
export type WebpImageUrl = string;

export interface WorldTruth {
  id: Id;
  name: Label;
  options: WorldTruthOption[];
  source: Source;
  icon?: SvgImageUrl;
  suggestions?: Suggestions;
}

export interface WorldTruthOption {
  description: MarkdownString;
  id: Id;
  quest_starter: MarkdownString;
}
