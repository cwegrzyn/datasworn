# Code generated by jtd-codegen for Ruby v0.1.1

require 'json'
require 'time'

module Datasworn

  class Dataforged
    attr_accessor :value

    def self.from_json_data(data)
      out = Dataforged.new
      out.value = Datasworn.from_json_data(Object, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class ActionRollMethod
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    ALL = new("all")
    HIGHEST = new("highest")
    LOWEST = new("lowest")
    MISS = new("miss")
    PLAYER_CHOICE = new("player_choice")
    STRONG_HIT = new("strong_hit")
    WEAK_HIT = new("weak_hit")

    def self.from_json_data(data)
      {
        "all" => ALL,
        "highest" => HIGHEST,
        "lowest" => LOWEST,
        "miss" => MISS,
        "player_choice" => PLAYER_CHOICE,
        "strong_hit" => STRONG_HIT,
        "weak_hit" => WEAK_HIT,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class ActionRollOption
    attr_accessor :using

    def self.from_json_data(data)
      {
        "asset_control" => ActionRollOptionAssetControl,
        "asset_option" => ActionRollOptionAssetOption,
        "attached_asset_control" => ActionRollOptionAttachedAssetControl,
        "attached_asset_option" => ActionRollOptionAttachedAssetOption,
        "condition_meter" => ActionRollOptionConditionMeter,
        "custom" => ActionRollOptionCustom,
        "stat" => ActionRollOptionStat,
      }[data["using"]].from_json_data(data)
    end
  end

  class ActionRollOptionAssetControl < ActionRollOption
    attr_accessor :assets
    attr_accessor :control

    def self.from_json_data(data)
      out = ActionRollOptionAssetControl.new
      out.using = "asset_control"
      out.assets = Datasworn::from_json_data(Array[AssetIdwildcard], data["assets"])
      out.control = Datasworn::from_json_data(DictKey, data["control"])
      out
    end

    def to_json_data
      data = { "using" => "asset_control" }
      data["assets"] = Datasworn::to_json_data(assets)
      data["control"] = Datasworn::to_json_data(control)
      data
    end
  end

  class ActionRollOptionAssetOption < ActionRollOption
    attr_accessor :assets
    attr_accessor :option

    def self.from_json_data(data)
      out = ActionRollOptionAssetOption.new
      out.using = "asset_option"
      out.assets = Datasworn::from_json_data(Array[AssetIdwildcard], data["assets"])
      out.option = Datasworn::from_json_data(DictKey, data["option"])
      out
    end

    def to_json_data
      data = { "using" => "asset_option" }
      data["assets"] = Datasworn::to_json_data(assets)
      data["option"] = Datasworn::to_json_data(option)
      data
    end
  end

  class ActionRollOptionAttachedAssetControl < ActionRollOption
    attr_accessor :control

    def self.from_json_data(data)
      out = ActionRollOptionAttachedAssetControl.new
      out.using = "attached_asset_control"
      out.control = Datasworn::from_json_data(DictKey, data["control"])
      out
    end

    def to_json_data
      data = { "using" => "attached_asset_control" }
      data["control"] = Datasworn::to_json_data(control)
      data
    end
  end

  class ActionRollOptionAttachedAssetOption < ActionRollOption
    attr_accessor :option

    def self.from_json_data(data)
      out = ActionRollOptionAttachedAssetOption.new
      out.using = "attached_asset_option"
      out.option = Datasworn::from_json_data(DictKey, data["option"])
      out
    end

    def to_json_data
      data = { "using" => "attached_asset_option" }
      data["option"] = Datasworn::to_json_data(option)
      data
    end
  end

  class ActionRollOptionConditionMeter < ActionRollOption
    attr_accessor :condition_meter

    def self.from_json_data(data)
      out = ActionRollOptionConditionMeter.new
      out.using = "condition_meter"
      out.condition_meter = Datasworn::from_json_data(PlayerConditionMeter, data["condition_meter"])
      out
    end

    def to_json_data
      data = { "using" => "condition_meter" }
      data["condition_meter"] = Datasworn::to_json_data(condition_meter)
      data
    end
  end

  class ActionRollOptionCustom < ActionRollOption
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = ActionRollOptionCustom.new
      out.using = "custom"
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(Integer, data["value"])
      out
    end

    def to_json_data
      data = { "using" => "custom" }
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class ActionRollOptionStat < ActionRollOption
    attr_accessor :stat

    def self.from_json_data(data)
      out = ActionRollOptionStat.new
      out.using = "stat"
      out.stat = Datasworn::from_json_data(PlayerStat, data["stat"])
      out
    end

    def to_json_data
      data = { "using" => "stat" }
      data["stat"] = Datasworn::to_json_data(stat)
      data
    end
  end

  class ActionRollUsing
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    ASSET_CONTROL = new("asset_control")
    ASSET_OPTION = new("asset_option")
    ATTACHED_ASSET_CONTROL = new("attached_asset_control")
    ATTACHED_ASSET_OPTION = new("attached_asset_option")
    CONDITION_METER = new("condition_meter")
    CUSTOM = new("custom")
    STAT = new("stat")

    def self.from_json_data(data)
      {
        "asset_control" => ASSET_CONTROL,
        "asset_option" => ASSET_OPTION,
        "attached_asset_control" => ATTACHED_ASSET_CONTROL,
        "attached_asset_option" => ATTACHED_ASSET_OPTION,
        "condition_meter" => CONDITION_METER,
        "custom" => CUSTOM,
        "stat" => STAT,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class Asset
    attr_accessor :abilities

    # A localized category label for this asset. This is the surtitle above the
    # asset's name on the card.
    attr_accessor :asset_type

    # If `true`, this asset counts as an impact (Starforged) or a debility
    # (classic Ironsworn).
    attr_accessor :count_as_impact
    attr_accessor :id
    attr_accessor :name

    # Most assets only benefit to their owner, but certain assets (like
    # Starforged's module and command vehicle assets) are shared amongst the
    # player's allies, too.
    attr_accessor :shared
    attr_accessor :source
    attr_accessor :attachments
    attr_accessor :canonical_name
    attr_accessor :color

    # Controls are condition meters, clocks, counters, and other asset input
    # fields whose values are expected to change throughout the life of the
    # asset.
    attr_accessor :controls
    attr_accessor :icon

    # Options are asset input fields which are set once, usually when the
    # character takes the asset. The most common example is the "name" field on
    # companion assets. A more complex example is the choice of a god's stat for
    # the Devotant asset.
    attr_accessor :options
    attr_accessor :requirement
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = Asset.new
      out.abilities = Datasworn::from_json_data(Array[AssetAbility], data["abilities"])
      out.asset_type = Datasworn::from_json_data(Label, data["asset_type"])
      out.count_as_impact = Datasworn::from_json_data(TrueClass, data["count_as_impact"])
      out.id = Datasworn::from_json_data(AssetID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.shared = Datasworn::from_json_data(TrueClass, data["shared"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.attachments = Datasworn::from_json_data(AssetAttachment, data["attachments"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.controls = Datasworn::from_json_data(Hash[String, AssetControlField], data["controls"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.options = Datasworn::from_json_data(Hash[String, AssetOptionField], data["options"])
      out.requirement = Datasworn::from_json_data(MarkdownString, data["requirement"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = {}
      data["abilities"] = Datasworn::to_json_data(abilities)
      data["asset_type"] = Datasworn::to_json_data(asset_type)
      data["count_as_impact"] = Datasworn::to_json_data(count_as_impact)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["shared"] = Datasworn::to_json_data(shared)
      data["source"] = Datasworn::to_json_data(source)
      data["attachments"] = Datasworn::to_json_data(attachments) unless attachments.nil?
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["controls"] = Datasworn::to_json_data(controls) unless controls.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["options"] = Datasworn::to_json_data(options) unless options.nil?
      data["requirement"] = Datasworn::to_json_data(requirement) unless requirement.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class AssetAbility
    # Is this asset ability enabled?
    attr_accessor :enabled
    attr_accessor :id
    attr_accessor :text

    # Fields whose values are expected to change over the life of the asset.
    attr_accessor :controls

    # Changes made to the asset, when this ability is enabled.
    attr_accessor :enhance_asset

    # Describes changes made to various moves by this asset ability. Usually
    # these require specific trigger conditions.
    attr_accessor :enhance_moves

    # Unique moves added by this asset ability.
    attr_accessor :moves
    attr_accessor :name

    # Fields that are expected to be set once and remain the same through the
    # life of the asset.
    attr_accessor :options

    def self.from_json_data(data)
      out = AssetAbility.new
      out.enabled = Datasworn::from_json_data(TrueClass, data["enabled"])
      out.id = Datasworn::from_json_data(AssetAbilityID, data["id"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out.controls = Datasworn::from_json_data(Hash[String, AssetAbilityControlField], data["controls"])
      out.enhance_asset = Datasworn::from_json_data(AssetEnhancement, data["enhance_asset"])
      out.enhance_moves = Datasworn::from_json_data(Array[MoveEnhancement], data["enhance_moves"])
      out.moves = Datasworn::from_json_data(Hash[String, Move], data["moves"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.options = Datasworn::from_json_data(Hash[String, AssetAbilityOptionField], data["options"])
      out
    end

    def to_json_data
      data = {}
      data["enabled"] = Datasworn::to_json_data(enabled)
      data["id"] = Datasworn::to_json_data(id)
      data["text"] = Datasworn::to_json_data(text)
      data["controls"] = Datasworn::to_json_data(controls) unless controls.nil?
      data["enhance_asset"] = Datasworn::to_json_data(enhance_asset) unless enhance_asset.nil?
      data["enhance_moves"] = Datasworn::to_json_data(enhance_moves) unless enhance_moves.nil?
      data["moves"] = Datasworn::to_json_data(moves) unless moves.nil?
      data["name"] = Datasworn::to_json_data(name) unless name.nil?
      data["options"] = Datasworn::to_json_data(options) unless options.nil?
      data
    end
  end

  class AssetAbilityControlField
    attr_accessor :field_type

    def self.from_json_data(data)
      {
        "checkbox" => AssetAbilityControlFieldCheckbox,
        "clock" => AssetAbilityControlFieldClock,
        "counter" => AssetAbilityControlFieldCounter,
      }[data["field_type"]].from_json_data(data)
    end
  end

  class AssetAbilityControlFieldCheckbox < AssetAbilityControlField
    attr_accessor :disables_asset
    attr_accessor :id
    attr_accessor :is_impact
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetAbilityControlFieldCheckbox.new
      out.field_type = "checkbox"
      out.disables_asset = Datasworn::from_json_data(TrueClass, data["disables_asset"])
      out.id = Datasworn::from_json_data(AssetAbilityControlFieldID, data["id"])
      out.is_impact = Datasworn::from_json_data(TrueClass, data["is_impact"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(TrueClass, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "checkbox" }
      data["disables_asset"] = Datasworn::to_json_data(disables_asset)
      data["id"] = Datasworn::to_json_data(id)
      data["is_impact"] = Datasworn::to_json_data(is_impact)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  # A clock with 4, 6, 8, or 10 segments.
  class AssetAbilityControlFieldClock < AssetAbilityControlField
    attr_accessor :id
    attr_accessor :max
    attr_accessor :min
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetAbilityControlFieldClock.new
      out.field_type = "clock"
      out.id = Datasworn::from_json_data(AssetAbilityControlFieldID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(Integer, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "clock" }
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  # A counter that starts at zero, with an optional maximum value.
  class AssetAbilityControlFieldCounter < AssetAbilityControlField
    attr_accessor :id
    attr_accessor :max
    attr_accessor :min
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetAbilityControlFieldCounter.new
      out.field_type = "counter"
      out.id = Datasworn::from_json_data(AssetAbilityControlFieldID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(Integer, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "counter" }
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetAbilityControlFieldID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetAbilityControlFieldID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetAbilityID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetAbilityID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetAbilityOptionField
    attr_accessor :field_type

    def self.from_json_data(data)
      {
        "text" => AssetAbilityOptionFieldText,
      }[data["field_type"]].from_json_data(data)
    end
  end

  # Represents an input that accepts plain text.
  class AssetAbilityOptionFieldText < AssetAbilityOptionField
    attr_accessor :id
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetAbilityOptionFieldText.new
      out.field_type = "text"
      out.id = Datasworn::from_json_data(AssetAbilityOptionFieldID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(String, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "text" }
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetAbilityOptionFieldID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetAbilityOptionFieldID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # Describes which assets can be attached to this asset. Example: Starforged's
  # Module assets, which can be equipped by Command Vehicle assets. See p. 55 of
  # Starforged for more info.
  class AssetAttachment
    # Asset IDs (which may be wildcards) that may be attached to this asset
    attr_accessor :assets
    attr_accessor :max

    def self.from_json_data(data)
      out = AssetAttachment.new
      out.assets = Datasworn::from_json_data(Array[AssetIdwildcard], data["assets"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out
    end

    def to_json_data
      data = {}
      data["assets"] = Datasworn::to_json_data(assets)
      data["max"] = Datasworn::to_json_data(max)
      data
    end
  end

  class AssetConditionMeterControlField
    attr_accessor :field_type

    def self.from_json_data(data)
      {
        "card_flip" => AssetConditionMeterControlFieldCardFlip,
        "checkbox" => AssetConditionMeterControlFieldCheckbox,
      }[data["field_type"]].from_json_data(data)
    end
  end

  class AssetConditionMeterControlFieldCardFlip < AssetConditionMeterControlField
    attr_accessor :disables_asset
    attr_accessor :id
    attr_accessor :is_impact
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetConditionMeterControlFieldCardFlip.new
      out.field_type = "card_flip"
      out.disables_asset = Datasworn::from_json_data(TrueClass, data["disables_asset"])
      out.id = Datasworn::from_json_data(AssetConditionMeterControlFieldID, data["id"])
      out.is_impact = Datasworn::from_json_data(TrueClass, data["is_impact"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(TrueClass, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "card_flip" }
      data["disables_asset"] = Datasworn::to_json_data(disables_asset)
      data["id"] = Datasworn::to_json_data(id)
      data["is_impact"] = Datasworn::to_json_data(is_impact)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetConditionMeterControlFieldCheckbox < AssetConditionMeterControlField
    attr_accessor :disables_asset
    attr_accessor :id
    attr_accessor :is_impact
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetConditionMeterControlFieldCheckbox.new
      out.field_type = "checkbox"
      out.disables_asset = Datasworn::from_json_data(TrueClass, data["disables_asset"])
      out.id = Datasworn::from_json_data(AssetConditionMeterControlFieldID, data["id"])
      out.is_impact = Datasworn::from_json_data(TrueClass, data["is_impact"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(TrueClass, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "checkbox" }
      data["disables_asset"] = Datasworn::to_json_data(disables_asset)
      data["id"] = Datasworn::to_json_data(id)
      data["is_impact"] = Datasworn::to_json_data(is_impact)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetConditionMeterControlFieldID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetConditionMeterControlFieldID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetControlField
    attr_accessor :field_type

    def self.from_json_data(data)
      {
        "card_flip" => AssetControlFieldCardFlip,
        "checkbox" => AssetControlFieldCheckbox,
        "condition_meter" => AssetControlFieldConditionMeter,
        "select_enhancement" => AssetControlFieldSelectEnhancement,
      }[data["field_type"]].from_json_data(data)
    end
  end

  class AssetControlFieldCardFlip < AssetControlField
    attr_accessor :disables_asset
    attr_accessor :id
    attr_accessor :is_impact
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetControlFieldCardFlip.new
      out.field_type = "card_flip"
      out.disables_asset = Datasworn::from_json_data(TrueClass, data["disables_asset"])
      out.id = Datasworn::from_json_data(AssetControlFieldID, data["id"])
      out.is_impact = Datasworn::from_json_data(TrueClass, data["is_impact"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(TrueClass, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "card_flip" }
      data["disables_asset"] = Datasworn::to_json_data(disables_asset)
      data["id"] = Datasworn::to_json_data(id)
      data["is_impact"] = Datasworn::to_json_data(is_impact)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetControlFieldCheckbox < AssetControlField
    attr_accessor :disables_asset
    attr_accessor :id
    attr_accessor :is_impact
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetControlFieldCheckbox.new
      out.field_type = "checkbox"
      out.disables_asset = Datasworn::from_json_data(TrueClass, data["disables_asset"])
      out.id = Datasworn::from_json_data(AssetControlFieldID, data["id"])
      out.is_impact = Datasworn::from_json_data(TrueClass, data["is_impact"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(TrueClass, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "checkbox" }
      data["disables_asset"] = Datasworn::to_json_data(disables_asset)
      data["id"] = Datasworn::to_json_data(id)
      data["is_impact"] = Datasworn::to_json_data(is_impact)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  # Provides hints for moves that interact with this condition meter, such as
  # suffer and recovery moves.
  class AssetControlFieldConditionMeterMoves
    # The ID(s) of recovery moves associated with this meter.
    attr_accessor :recover

    # The ID(s) of suffer moves associated with the condition meter. If the
    # suffer move makes an action roll, this condition meter value should be
    # made available as a roll option.
    attr_accessor :suffer

    def self.from_json_data(data)
      out = AssetControlFieldConditionMeterMoves.new
      out.recover = Datasworn::from_json_data(Array[MoveIdwildcard], data["recover"])
      out.suffer = Datasworn::from_json_data(Array[MoveIdwildcard], data["suffer"])
      out
    end

    def to_json_data
      data = {}
      data["recover"] = Datasworn::to_json_data(recover) unless recover.nil?
      data["suffer"] = Datasworn::to_json_data(suffer) unless suffer.nil?
      data
    end
  end

  # Some assets provide a special condition meter of their own. The most common
  # example is the health meters on companion assets. Asset condition meters
  # may also include their own controls, such as the checkboxes that Starforged
  # companion assets use to indicate they are "out of action".
  class AssetControlFieldConditionMeter < AssetControlField
    attr_accessor :id
    attr_accessor :max
    attr_accessor :min
    attr_accessor :name
    attr_accessor :value
    attr_accessor :controls
    attr_accessor :moves

    def self.from_json_data(data)
      out = AssetControlFieldConditionMeter.new
      out.field_type = "condition_meter"
      out.id = Datasworn::from_json_data(AssetControlFieldID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(Integer, data["value"])
      out.controls = Datasworn::from_json_data(Hash[String, AssetConditionMeterControlField], data["controls"])
      out.moves = Datasworn::from_json_data(AssetControlFieldConditionMeterMoves, data["moves"])
      out
    end

    def to_json_data
      data = { "field_type" => "condition_meter" }
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data["controls"] = Datasworn::to_json_data(controls) unless controls.nil?
      data["moves"] = Datasworn::to_json_data(moves) unless moves.nil?
      data
    end
  end

  class AssetControlFieldSelectEnhancementChoice
    attr_accessor :option_type

    def self.from_json_data(data)
      {
        "option" => AssetControlFieldSelectEnhancementChoiceOption,
        "option_group" => AssetControlFieldSelectEnhancementChoiceOptionGroup,
      }[data["option_type"]].from_json_data(data)
    end
  end

  # The current value of this input.
  class AssetControlFieldSelectEnhancementChoiceOptionValue
    attr_accessor :enhance_asset
    attr_accessor :enhance_moves

    def self.from_json_data(data)
      out = AssetControlFieldSelectEnhancementChoiceOptionValue.new
      out.enhance_asset = Datasworn::from_json_data(AssetEnhancement, data["enhance_asset"])
      out.enhance_moves = Datasworn::from_json_data(Array[MoveEnhancement], data["enhance_moves"])
      out
    end

    def to_json_data
      data = {}
      data["enhance_asset"] = Datasworn::to_json_data(enhance_asset) unless enhance_asset.nil?
      data["enhance_moves"] = Datasworn::to_json_data(enhance_moves) unless enhance_moves.nil?
      data
    end
  end

  # Represents an option in a list of choices.
  class AssetControlFieldSelectEnhancementChoiceOption < AssetControlFieldSelectEnhancementChoice
    attr_accessor :name
    attr_accessor :value
    attr_accessor :selected

    def self.from_json_data(data)
      out = AssetControlFieldSelectEnhancementChoiceOption.new
      out.option_type = "option"
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(AssetControlFieldSelectEnhancementChoiceOptionValue, data["value"])
      out.selected = Datasworn::from_json_data(TrueClass, data["selected"])
      out
    end

    def to_json_data
      data = { "option_type" => "option" }
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data["selected"] = Datasworn::to_json_data(selected) unless selected.nil?
      data
    end
  end

  class AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    OPTION = new("option")

    def self.from_json_data(data)
      {
        "option" => OPTION,
      }[data]
    end

    def to_json_data
      value
    end
  end

  # The current value of this input.
  class AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceValue
    attr_accessor :enhance_asset
    attr_accessor :enhance_moves

    def self.from_json_data(data)
      out = AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceValue.new
      out.enhance_asset = Datasworn::from_json_data(AssetEnhancement, data["enhance_asset"])
      out.enhance_moves = Datasworn::from_json_data(Array[MoveEnhancement], data["enhance_moves"])
      out
    end

    def to_json_data
      data = {}
      data["enhance_asset"] = Datasworn::to_json_data(enhance_asset) unless enhance_asset.nil?
      data["enhance_moves"] = Datasworn::to_json_data(enhance_moves) unless enhance_moves.nil?
      data
    end
  end

  # Represents an option in a list of choices.
  class AssetControlFieldSelectEnhancementChoiceOptionGroupChoice
    # A label for this input. In some contexts it may be undesirable to render
    # this text, but it should always be exposed to assistive technology (e.g.
    # with `aria-label` in HTML).
    attr_accessor :name
    attr_accessor :option_type

    # The current value of this input.
    attr_accessor :value

    # Is this option currently selected?
    attr_accessor :selected

    def self.from_json_data(data)
      out = AssetControlFieldSelectEnhancementChoiceOptionGroupChoice.new
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.option_type = Datasworn::from_json_data(AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceOptionType, data["option_type"])
      out.value = Datasworn::from_json_data(AssetControlFieldSelectEnhancementChoiceOptionGroupChoiceValue, data["value"])
      out.selected = Datasworn::from_json_data(TrueClass, data["selected"])
      out
    end

    def to_json_data
      data = {}
      data["name"] = Datasworn::to_json_data(name)
      data["option_type"] = Datasworn::to_json_data(option_type)
      data["value"] = Datasworn::to_json_data(value)
      data["selected"] = Datasworn::to_json_data(selected) unless selected.nil?
      data
    end
  end

  # Represents a grouping of options in a list of choices.
  class AssetControlFieldSelectEnhancementChoiceOptionGroup < AssetControlFieldSelectEnhancementChoice
    attr_accessor :choices
    attr_accessor :name

    def self.from_json_data(data)
      out = AssetControlFieldSelectEnhancementChoiceOptionGroup.new
      out.option_type = "option_group"
      out.choices = Datasworn::from_json_data(Hash[String, AssetControlFieldSelectEnhancementChoiceOptionGroupChoice], data["choices"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out
    end

    def to_json_data
      data = { "option_type" => "option_group" }
      data["choices"] = Datasworn::to_json_data(choices)
      data["name"] = Datasworn::to_json_data(name)
      data
    end
  end

  # Select from player and/or asset enhancements. Use it to describe modal
  # abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder
  # (Sundered Isles).
  class AssetControlFieldSelectEnhancement < AssetControlField
    attr_accessor :choices
    attr_accessor :id
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetControlFieldSelectEnhancement.new
      out.field_type = "select_enhancement"
      out.choices = Datasworn::from_json_data(Hash[String, AssetControlFieldSelectEnhancementChoice], data["choices"])
      out.id = Datasworn::from_json_data(AssetControlFieldID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(DictKey, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "select_enhancement" }
      data["choices"] = Datasworn::to_json_data(choices)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetControlFieldEnhancement
    attr_accessor :field_type

    def self.from_json_data(data)
      {
        "condition_meter" => AssetControlFieldEnhancementConditionMeter,
      }[data["field_type"]].from_json_data(data)
    end
  end

  # Some assets provide a special condition meter of their own. The most common
  # example is the health meters on companion assets. Asset condition meters
  # may also include their own controls, such as the checkboxes that Starforged
  # companion assets use to indicate they are "out of action".
  class AssetControlFieldEnhancementConditionMeter < AssetControlFieldEnhancement
    attr_accessor :max

    def self.from_json_data(data)
      out = AssetControlFieldEnhancementConditionMeter.new
      out.field_type = "condition_meter"
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out
    end

    def to_json_data
      data = { "field_type" => "condition_meter" }
      data["max"] = Datasworn::to_json_data(max)
      data
    end
  end

  class AssetControlFieldID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetControlFieldID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetControlFieldIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetControlFieldIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # Describes enhancements made to this asset in a partial asset object. The
  # changes should be applied recursively; only the values that are specified
  # should be changed.
  class AssetEnhancement
    attr_accessor :attachments

    # Controls are condition meters, clocks, counters, and other asset input
    # fields whose values are expected to change throughout the life of the
    # asset.
    attr_accessor :controls

    # If `true`, this asset counts as an impact (Starforged) or a debility
    # (classic Ironsworn).
    attr_accessor :count_as_impact

    # Most assets only benefit to their owner, but certain assets (like
    # Starforged's module and command vehicle assets) are shared amongst the
    # player's allies, too.
    attr_accessor :shared
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = AssetEnhancement.new
      out.attachments = Datasworn::from_json_data(AssetAttachment, data["attachments"])
      out.controls = Datasworn::from_json_data(Hash[String, AssetControlFieldEnhancement], data["controls"])
      out.count_as_impact = Datasworn::from_json_data(TrueClass, data["count_as_impact"])
      out.shared = Datasworn::from_json_data(TrueClass, data["shared"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = {}
      data["attachments"] = Datasworn::to_json_data(attachments) unless attachments.nil?
      data["controls"] = Datasworn::to_json_data(controls) unless controls.nil?
      data["count_as_impact"] = Datasworn::to_json_data(count_as_impact) unless count_as_impact.nil?
      data["shared"] = Datasworn::to_json_data(shared) unless shared.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class AssetID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetOptionField
    attr_accessor :field_type

    def self.from_json_data(data)
      {
        "select_enhancement" => AssetOptionFieldSelectEnhancement,
        "select_stat" => AssetOptionFieldSelectStat,
        "text" => AssetOptionFieldText,
      }[data["field_type"]].from_json_data(data)
    end
  end

  class AssetOptionFieldSelectEnhancementChoice
    attr_accessor :option_type

    def self.from_json_data(data)
      {
        "option" => AssetOptionFieldSelectEnhancementChoiceOption,
        "option_group" => AssetOptionFieldSelectEnhancementChoiceOptionGroup,
      }[data["option_type"]].from_json_data(data)
    end
  end

  # The current value of this input.
  class AssetOptionFieldSelectEnhancementChoiceOptionValue
    attr_accessor :enhance_asset
    attr_accessor :enhance_moves

    def self.from_json_data(data)
      out = AssetOptionFieldSelectEnhancementChoiceOptionValue.new
      out.enhance_asset = Datasworn::from_json_data(AssetEnhancement, data["enhance_asset"])
      out.enhance_moves = Datasworn::from_json_data(Array[MoveEnhancement], data["enhance_moves"])
      out
    end

    def to_json_data
      data = {}
      data["enhance_asset"] = Datasworn::to_json_data(enhance_asset) unless enhance_asset.nil?
      data["enhance_moves"] = Datasworn::to_json_data(enhance_moves) unless enhance_moves.nil?
      data
    end
  end

  # Represents an option in a list of choices.
  class AssetOptionFieldSelectEnhancementChoiceOption < AssetOptionFieldSelectEnhancementChoice
    attr_accessor :name
    attr_accessor :value
    attr_accessor :selected

    def self.from_json_data(data)
      out = AssetOptionFieldSelectEnhancementChoiceOption.new
      out.option_type = "option"
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(AssetOptionFieldSelectEnhancementChoiceOptionValue, data["value"])
      out.selected = Datasworn::from_json_data(TrueClass, data["selected"])
      out
    end

    def to_json_data
      data = { "option_type" => "option" }
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data["selected"] = Datasworn::to_json_data(selected) unless selected.nil?
      data
    end
  end

  class AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    OPTION = new("option")

    def self.from_json_data(data)
      {
        "option" => OPTION,
      }[data]
    end

    def to_json_data
      value
    end
  end

  # The current value of this input.
  class AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceValue
    attr_accessor :enhance_asset
    attr_accessor :enhance_moves

    def self.from_json_data(data)
      out = AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceValue.new
      out.enhance_asset = Datasworn::from_json_data(AssetEnhancement, data["enhance_asset"])
      out.enhance_moves = Datasworn::from_json_data(Array[MoveEnhancement], data["enhance_moves"])
      out
    end

    def to_json_data
      data = {}
      data["enhance_asset"] = Datasworn::to_json_data(enhance_asset) unless enhance_asset.nil?
      data["enhance_moves"] = Datasworn::to_json_data(enhance_moves) unless enhance_moves.nil?
      data
    end
  end

  # Represents an option in a list of choices.
  class AssetOptionFieldSelectEnhancementChoiceOptionGroupChoice
    # A label for this input. In some contexts it may be undesirable to render
    # this text, but it should always be exposed to assistive technology (e.g.
    # with `aria-label` in HTML).
    attr_accessor :name
    attr_accessor :option_type

    # The current value of this input.
    attr_accessor :value

    # Is this option currently selected?
    attr_accessor :selected

    def self.from_json_data(data)
      out = AssetOptionFieldSelectEnhancementChoiceOptionGroupChoice.new
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.option_type = Datasworn::from_json_data(AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceOptionType, data["option_type"])
      out.value = Datasworn::from_json_data(AssetOptionFieldSelectEnhancementChoiceOptionGroupChoiceValue, data["value"])
      out.selected = Datasworn::from_json_data(TrueClass, data["selected"])
      out
    end

    def to_json_data
      data = {}
      data["name"] = Datasworn::to_json_data(name)
      data["option_type"] = Datasworn::to_json_data(option_type)
      data["value"] = Datasworn::to_json_data(value)
      data["selected"] = Datasworn::to_json_data(selected) unless selected.nil?
      data
    end
  end

  # Represents a grouping of options in a list of choices.
  class AssetOptionFieldSelectEnhancementChoiceOptionGroup < AssetOptionFieldSelectEnhancementChoice
    attr_accessor :choices
    attr_accessor :name

    def self.from_json_data(data)
      out = AssetOptionFieldSelectEnhancementChoiceOptionGroup.new
      out.option_type = "option_group"
      out.choices = Datasworn::from_json_data(Hash[String, AssetOptionFieldSelectEnhancementChoiceOptionGroupChoice], data["choices"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out
    end

    def to_json_data
      data = { "option_type" => "option_group" }
      data["choices"] = Datasworn::to_json_data(choices)
      data["name"] = Datasworn::to_json_data(name)
      data
    end
  end

  # Select from player and/or asset enhancements. Use it to describe modal
  # abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder
  # (Sundered Isles).
  class AssetOptionFieldSelectEnhancement < AssetOptionField
    attr_accessor :choices
    attr_accessor :id
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetOptionFieldSelectEnhancement.new
      out.field_type = "select_enhancement"
      out.choices = Datasworn::from_json_data(Hash[String, AssetOptionFieldSelectEnhancementChoice], data["choices"])
      out.id = Datasworn::from_json_data(AssetOptionFieldID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(DictKey, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "select_enhancement" }
      data["choices"] = Datasworn::to_json_data(choices)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetOptionFieldSelectStatChoice
    attr_accessor :option_type

    def self.from_json_data(data)
      {
        "option" => AssetOptionFieldSelectStatChoiceOption,
        "option_group" => AssetOptionFieldSelectStatChoiceOptionGroup,
      }[data["option_type"]].from_json_data(data)
    end
  end

  # Represents an option in a list of choices.
  class AssetOptionFieldSelectStatChoiceOption < AssetOptionFieldSelectStatChoice
    attr_accessor :name
    attr_accessor :value
    attr_accessor :selected

    def self.from_json_data(data)
      out = AssetOptionFieldSelectStatChoiceOption.new
      out.option_type = "option"
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(PlayerStat, data["value"])
      out.selected = Datasworn::from_json_data(TrueClass, data["selected"])
      out
    end

    def to_json_data
      data = { "option_type" => "option" }
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data["selected"] = Datasworn::to_json_data(selected) unless selected.nil?
      data
    end
  end

  class AssetOptionFieldSelectStatChoiceOptionGroupChoiceOptionType
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    OPTION = new("option")

    def self.from_json_data(data)
      {
        "option" => OPTION,
      }[data]
    end

    def to_json_data
      value
    end
  end

  # Represents an option in a list of choices.
  class AssetOptionFieldSelectStatChoiceOptionGroupChoice
    # A label for this input. In some contexts it may be undesirable to render
    # this text, but it should always be exposed to assistive technology (e.g.
    # with `aria-label` in HTML).
    attr_accessor :name
    attr_accessor :option_type

    # The current value of this input.
    attr_accessor :value

    # Is this option currently selected?
    attr_accessor :selected

    def self.from_json_data(data)
      out = AssetOptionFieldSelectStatChoiceOptionGroupChoice.new
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.option_type = Datasworn::from_json_data(AssetOptionFieldSelectStatChoiceOptionGroupChoiceOptionType, data["option_type"])
      out.value = Datasworn::from_json_data(PlayerStat, data["value"])
      out.selected = Datasworn::from_json_data(TrueClass, data["selected"])
      out
    end

    def to_json_data
      data = {}
      data["name"] = Datasworn::to_json_data(name)
      data["option_type"] = Datasworn::to_json_data(option_type)
      data["value"] = Datasworn::to_json_data(value)
      data["selected"] = Datasworn::to_json_data(selected) unless selected.nil?
      data
    end
  end

  # Represents a grouping of options in a list of choices.
  class AssetOptionFieldSelectStatChoiceOptionGroup < AssetOptionFieldSelectStatChoice
    attr_accessor :choices
    attr_accessor :name

    def self.from_json_data(data)
      out = AssetOptionFieldSelectStatChoiceOptionGroup.new
      out.option_type = "option_group"
      out.choices = Datasworn::from_json_data(Hash[String, AssetOptionFieldSelectStatChoiceOptionGroupChoice], data["choices"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out
    end

    def to_json_data
      data = { "option_type" => "option_group" }
      data["choices"] = Datasworn::to_json_data(choices)
      data["name"] = Datasworn::to_json_data(name)
      data
    end
  end

  # Represents a list of mutually exclusive choices.
  class AssetOptionFieldSelectStat < AssetOptionField
    attr_accessor :choices
    attr_accessor :id
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetOptionFieldSelectStat.new
      out.field_type = "select_stat"
      out.choices = Datasworn::from_json_data(Hash[String, AssetOptionFieldSelectStatChoice], data["choices"])
      out.id = Datasworn::from_json_data(AssetOptionFieldID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(DictKey, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "select_stat" }
      data["choices"] = Datasworn::to_json_data(choices)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  # Represents an input that accepts plain text.
  class AssetOptionFieldText < AssetOptionField
    attr_accessor :id
    attr_accessor :name
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetOptionFieldText.new
      out.field_type = "text"
      out.id = Datasworn::from_json_data(AssetOptionFieldID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.value = Datasworn::from_json_data(String, data["value"])
      out
    end

    def to_json_data
      data = { "field_type" => "text" }
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["value"] = Datasworn::to_json_data(value)
      data
    end
  end

  class AssetOptionFieldID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetOptionFieldID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetOptionFieldIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetOptionFieldIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AssetType
    attr_accessor :contents
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :canonical_name
    attr_accessor :color
    attr_accessor :description

    # This collection's content enhances the identified collection, rather than
    # being a standalone collection of its own.
    attr_accessor :enhances
    attr_accessor :icon
    attr_accessor :images

    # This collection replaces the identified collection. References to the
    # replaced collection can be considered equivalent to this collection.
    attr_accessor :replaces
    attr_accessor :suggestions
    attr_accessor :summary

    def self.from_json_data(data)
      out = AssetType.new
      out.contents = Datasworn::from_json_data(Hash[String, Asset], data["contents"])
      out.id = Datasworn::from_json_data(AssetTypeID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.enhances = Datasworn::from_json_data(AssetTypeID, data["enhances"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.images = Datasworn::from_json_data(Array[WebpimageURL], data["images"])
      out.replaces = Datasworn::from_json_data(AssetTypeID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["contents"] = Datasworn::to_json_data(contents)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["images"] = Datasworn::to_json_data(images) unless images.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class AssetTypeID
    attr_accessor :value

    def self.from_json_data(data)
      out = AssetTypeID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class Atlas
    attr_accessor :collections
    attr_accessor :contents
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :canonical_name
    attr_accessor :color
    attr_accessor :description

    # This collection's content enhances the identified collection, rather than
    # being a standalone collection of its own.
    attr_accessor :enhances
    attr_accessor :icon
    attr_accessor :images

    # This collection replaces the identified collection. References to the
    # replaced collection can be considered equivalent to this collection.
    attr_accessor :replaces
    attr_accessor :suggestions
    attr_accessor :summary

    def self.from_json_data(data)
      out = Atlas.new
      out.collections = Datasworn::from_json_data(Hash[String, Atlas], data["collections"])
      out.contents = Datasworn::from_json_data(Hash[String, AtlasEntry], data["contents"])
      out.id = Datasworn::from_json_data(AtlasID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.enhances = Datasworn::from_json_data(AtlasID, data["enhances"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.images = Datasworn::from_json_data(Array[WebpimageURL], data["images"])
      out.replaces = Datasworn::from_json_data(AtlasID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["collections"] = Datasworn::to_json_data(collections)
      data["contents"] = Datasworn::to_json_data(contents)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["images"] = Datasworn::to_json_data(images) unless images.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  # An atlas entry, like the Ironlands region entries found in classic
  # Ironsworn.
  class AtlasEntry
    attr_accessor :description
    attr_accessor :features
    attr_accessor :id
    attr_accessor :name
    attr_accessor :quest_starter
    attr_accessor :source
    attr_accessor :canonical_name
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :your_truth

    def self.from_json_data(data)
      out = AtlasEntry.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.features = Datasworn::from_json_data(Array[MarkdownString], data["features"])
      out.id = Datasworn::from_json_data(AtlasEntryID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.quest_starter = Datasworn::from_json_data(MarkdownString, data["quest_starter"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.your_truth = Datasworn::from_json_data(MarkdownString, data["your_truth"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["features"] = Datasworn::to_json_data(features)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["quest_starter"] = Datasworn::to_json_data(quest_starter)
      data["source"] = Datasworn::to_json_data(source)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["your_truth"] = Datasworn::to_json_data(your_truth) unless your_truth.nil?
      data
    end
  end

  class AtlasEntryID
    attr_accessor :value

    def self.from_json_data(data)
      out = AtlasEntryID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AtlasEntryIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = AtlasEntryIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AtlasID
    attr_accessor :value

    def self.from_json_data(data)
      out = AtlasID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class AtlasIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = AtlasIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A CSS color value. See: https://developer.mozilla.org/en-
  # US/docs/Web/CSS/color_value
  class Csscolor
    attr_accessor :value

    def self.from_json_data(data)
      out = Csscolor.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # Challenge rank, represented as an integer:
  class ChallengeRank
    attr_accessor :value

    def self.from_json_data(data)
      out = ChallengeRank.new
      out.value = Datasworn.from_json_data(Integer, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class ConditionMeterRule
    attr_accessor :description

    # The maximum value of this meter.
    attr_accessor :max

    # The minimum value of this meter.
    attr_accessor :min

    # A label for this input. In some contexts it may be undesirable to render
    # this text, but it should always be exposed to assistive technology (e.g.
    # with `aria-label` in HTML).
    attr_accessor :name
    attr_accessor :shared

    def self.from_json_data(data)
      out = ConditionMeterRule.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.shared = Datasworn::from_json_data(TrueClass, data["shared"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["name"] = Datasworn::to_json_data(name)
      data["shared"] = Datasworn::to_json_data(shared)
      data
    end
  end

  class ConditionMeterRuleID
    attr_accessor :value

    def self.from_json_data(data)
      out = ConditionMeterRuleID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A delve site with a theme, domain, and denizen table.
  class DelveSite
    attr_accessor :denizens
    attr_accessor :description
    attr_accessor :domain
    attr_accessor :id
    attr_accessor :name
    attr_accessor :rank
    attr_accessor :source
    attr_accessor :theme
    attr_accessor :canonical_name

    # An additional theme or domain card ID, for use with optional rules in
    # Ironsworn: Delve.
    attr_accessor :extra_card
    attr_accessor :icon

    # The ID of an atlas entry representing the region in which this delve site
    # is located.
    attr_accessor :region
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = DelveSite.new
      out.denizens = Datasworn::from_json_data(Array[DelveSiteDenizen], data["denizens"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.domain = Datasworn::from_json_data(DelveSiteDomainID, data["domain"])
      out.id = Datasworn::from_json_data(DelveSiteID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.rank = Datasworn::from_json_data(ChallengeRank, data["rank"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.theme = Datasworn::from_json_data(DelveSiteThemeID, data["theme"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.extra_card = Datasworn::from_json_data(String, data["extra_card"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.region = Datasworn::from_json_data(AtlasEntryID, data["region"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = {}
      data["denizens"] = Datasworn::to_json_data(denizens)
      data["description"] = Datasworn::to_json_data(description)
      data["domain"] = Datasworn::to_json_data(domain)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["rank"] = Datasworn::to_json_data(rank)
      data["source"] = Datasworn::to_json_data(source)
      data["theme"] = Datasworn::to_json_data(theme)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["extra_card"] = Datasworn::to_json_data(extra_card) unless extra_card.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["region"] = Datasworn::to_json_data(region) unless region.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class DelveSiteDenizen
    attr_accessor :frequency
    attr_accessor :id
    attr_accessor :max
    attr_accessor :min
    attr_accessor :name

    # The ID of the relevant NPC entry, if one is specified.
    attr_accessor :npc

    def self.from_json_data(data)
      out = DelveSiteDenizen.new
      out.frequency = Datasworn::from_json_data(DelveSiteDenizenFrequency, data["frequency"])
      out.id = Datasworn::from_json_data(DelveSiteDenizenID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.npc = Datasworn::from_json_data(NpcID, data["npc"])
      out
    end

    def to_json_data
      data = {}
      data["frequency"] = Datasworn::to_json_data(frequency)
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["name"] = Datasworn::to_json_data(name) unless name.nil?
      data["npc"] = Datasworn::to_json_data(npc) unless npc.nil?
      data
    end
  end

  class DelveSiteDenizenFrequency
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    COMMON = new("common")
    RARE = new("rare")
    UNCOMMON = new("uncommon")
    UNFORESEEN = new("unforeseen")
    VERY_COMMON = new("very_common")

    def self.from_json_data(data)
      {
        "common" => COMMON,
        "rare" => RARE,
        "uncommon" => UNCOMMON,
        "unforeseen" => UNFORESEEN,
        "very_common" => VERY_COMMON,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class DelveSiteDenizenID
    attr_accessor :value

    def self.from_json_data(data)
      out = DelveSiteDenizenID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class DelveSiteDomainCardType
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    DOMAIN = new("domain")

    def self.from_json_data(data)
      {
        "domain" => DOMAIN,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class DelveSiteDomain
    attr_accessor :card_type
    attr_accessor :dangers
    attr_accessor :features
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :summary
    attr_accessor :canonical_name
    attr_accessor :description
    attr_accessor :icon

    # An oracle table ID containing place name elements. For examples, see
    # oracle ID `delve/oracles/site_name/place/barrow`, and its siblings in
    # oracle collection ID `delve/collections/oracles/site_name/place`. These
    # oracles are used by the site name oracle from Ironsworn: Delve (ID:
    # delve/oracles/site_name/format) to create random names for delve sites.
    attr_accessor :name_oracle
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = DelveSiteDomain.new
      out.card_type = Datasworn::from_json_data(DelveSiteDomainCardType, data["card_type"])
      out.dangers = Datasworn::from_json_data(Array[DelveSiteDomainDangerRow], data["dangers"])
      out.features = Datasworn::from_json_data(Array[DelveSiteDomainFeatureRow], data["features"])
      out.id = Datasworn::from_json_data(DelveSiteDomainID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.name_oracle = Datasworn::from_json_data(OracleTableID, data["name_oracle"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = {}
      data["card_type"] = Datasworn::to_json_data(card_type)
      data["dangers"] = Datasworn::to_json_data(dangers)
      data["features"] = Datasworn::to_json_data(features)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["summary"] = Datasworn::to_json_data(summary)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["name_oracle"] = Datasworn::to_json_data(name_oracle) unless name_oracle.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class DelveSiteDomainDangerRow
    attr_accessor :id

    # High end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :max

    # Low end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :min
    attr_accessor :result
    attr_accessor :description
    attr_accessor :embed_table
    attr_accessor :i18n
    attr_accessor :icon
    attr_accessor :rolls
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :template

    def self.from_json_data(data)
      out = DelveSiteDomainDangerRow.new
      out.id = Datasworn::from_json_data(DomainDangerRowID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.result = Datasworn::from_json_data(MarkdownString, data["result"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.embed_table = Datasworn::from_json_data(OracleTableID, data["embed_table"])
      out.i18n = Datasworn::from_json_data(I18nHints, data["i18n"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.rolls = Datasworn::from_json_data(Array[OracleTableRoll], data["rolls"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.template = Datasworn::from_json_data(OracleRollTemplate, data["template"])
      out
    end

    def to_json_data
      data = {}
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["result"] = Datasworn::to_json_data(result)
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["embed_table"] = Datasworn::to_json_data(embed_table) unless embed_table.nil?
      data["i18n"] = Datasworn::to_json_data(i18n) unless i18n.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["rolls"] = Datasworn::to_json_data(rolls) unless rolls.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["template"] = Datasworn::to_json_data(template) unless template.nil?
      data
    end
  end

  class DelveSiteDomainFeatureRow
    attr_accessor :id

    # High end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :max

    # Low end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :min
    attr_accessor :result
    attr_accessor :description
    attr_accessor :embed_table
    attr_accessor :i18n
    attr_accessor :icon
    attr_accessor :rolls
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :template

    def self.from_json_data(data)
      out = DelveSiteDomainFeatureRow.new
      out.id = Datasworn::from_json_data(DomainFeatureRowID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.result = Datasworn::from_json_data(MarkdownString, data["result"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.embed_table = Datasworn::from_json_data(OracleTableID, data["embed_table"])
      out.i18n = Datasworn::from_json_data(I18nHints, data["i18n"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.rolls = Datasworn::from_json_data(Array[OracleTableRoll], data["rolls"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.template = Datasworn::from_json_data(OracleRollTemplate, data["template"])
      out
    end

    def to_json_data
      data = {}
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["result"] = Datasworn::to_json_data(result)
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["embed_table"] = Datasworn::to_json_data(embed_table) unless embed_table.nil?
      data["i18n"] = Datasworn::to_json_data(i18n) unless i18n.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["rolls"] = Datasworn::to_json_data(rolls) unless rolls.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["template"] = Datasworn::to_json_data(template) unless template.nil?
      data
    end
  end

  class DelveSiteDomainID
    attr_accessor :value

    def self.from_json_data(data)
      out = DelveSiteDomainID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class DelveSiteID
    attr_accessor :value

    def self.from_json_data(data)
      out = DelveSiteID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class DelveSiteThemeCardType
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    THEME = new("theme")

    def self.from_json_data(data)
      {
        "theme" => THEME,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class DelveSiteTheme
    attr_accessor :card_type
    attr_accessor :dangers
    attr_accessor :features
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :summary
    attr_accessor :canonical_name
    attr_accessor :description
    attr_accessor :icon
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = DelveSiteTheme.new
      out.card_type = Datasworn::from_json_data(DelveSiteThemeCardType, data["card_type"])
      out.dangers = Datasworn::from_json_data(Array[DelveSiteThemeDangerRow], data["dangers"])
      out.features = Datasworn::from_json_data(Array[DelveSiteThemeFeatureRow], data["features"])
      out.id = Datasworn::from_json_data(DelveSiteThemeID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = {}
      data["card_type"] = Datasworn::to_json_data(card_type)
      data["dangers"] = Datasworn::to_json_data(dangers)
      data["features"] = Datasworn::to_json_data(features)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["summary"] = Datasworn::to_json_data(summary)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class DelveSiteThemeDangerRow
    attr_accessor :id

    # High end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :max

    # Low end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :min
    attr_accessor :result
    attr_accessor :description
    attr_accessor :embed_table
    attr_accessor :i18n
    attr_accessor :icon
    attr_accessor :rolls
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :template

    def self.from_json_data(data)
      out = DelveSiteThemeDangerRow.new
      out.id = Datasworn::from_json_data(ThemeDangerRowID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.result = Datasworn::from_json_data(MarkdownString, data["result"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.embed_table = Datasworn::from_json_data(OracleTableID, data["embed_table"])
      out.i18n = Datasworn::from_json_data(I18nHints, data["i18n"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.rolls = Datasworn::from_json_data(Array[OracleTableRoll], data["rolls"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.template = Datasworn::from_json_data(OracleRollTemplate, data["template"])
      out
    end

    def to_json_data
      data = {}
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["result"] = Datasworn::to_json_data(result)
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["embed_table"] = Datasworn::to_json_data(embed_table) unless embed_table.nil?
      data["i18n"] = Datasworn::to_json_data(i18n) unless i18n.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["rolls"] = Datasworn::to_json_data(rolls) unless rolls.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["template"] = Datasworn::to_json_data(template) unless template.nil?
      data
    end
  end

  class DelveSiteThemeFeatureRow
    attr_accessor :id

    # High end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :max

    # Low end of the dice range for this table row. `null` represents an
    # unrollable row, included only for rendering purposes.
    attr_accessor :min
    attr_accessor :result
    attr_accessor :description
    attr_accessor :embed_table
    attr_accessor :i18n
    attr_accessor :icon
    attr_accessor :rolls
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :template

    def self.from_json_data(data)
      out = DelveSiteThemeFeatureRow.new
      out.id = Datasworn::from_json_data(ThemeFeatureRowID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.result = Datasworn::from_json_data(MarkdownString, data["result"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.embed_table = Datasworn::from_json_data(OracleTableID, data["embed_table"])
      out.i18n = Datasworn::from_json_data(I18nHints, data["i18n"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.rolls = Datasworn::from_json_data(Array[OracleTableRoll], data["rolls"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.template = Datasworn::from_json_data(OracleRollTemplate, data["template"])
      out
    end

    def to_json_data
      data = {}
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["result"] = Datasworn::to_json_data(result)
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["embed_table"] = Datasworn::to_json_data(embed_table) unless embed_table.nil?
      data["i18n"] = Datasworn::to_json_data(i18n) unless i18n.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["rolls"] = Datasworn::to_json_data(rolls) unless rolls.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["template"] = Datasworn::to_json_data(template) unless template.nil?
      data
    end
  end

  class DelveSiteThemeID
    attr_accessor :value

    def self.from_json_data(data)
      out = DelveSiteThemeID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class DiceNotation
    attr_accessor :value

    def self.from_json_data(data)
      out = DiceNotation.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A key used in a Datasworn dictionary object.
  class DictKey
    attr_accessor :value

    def self.from_json_data(data)
      out = DictKey.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class DomainDangerRowID
    attr_accessor :value

    def self.from_json_data(data)
      out = DomainDangerRowID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class DomainFeatureRowID
    attr_accessor :value

    def self.from_json_data(data)
      out = DomainFeatureRowID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class I18nHint
    attr_accessor :part_of_speech

    def self.from_json_data(data)
      out = I18nHint.new
      out.part_of_speech = Datasworn::from_json_data(PartOfSpeech, data["part_of_speech"])
      out
    end

    def to_json_data
      data = {}
      data["part_of_speech"] = Datasworn::to_json_data(part_of_speech) unless part_of_speech.nil?
      data
    end
  end

  class I18nHintsTemplate
    attr_accessor :description
    attr_accessor :result
    attr_accessor :summary

    def self.from_json_data(data)
      out = I18nHintsTemplate.new
      out.description = Datasworn::from_json_data(I18nHint, data["description"])
      out.result = Datasworn::from_json_data(I18nHint, data["result"])
      out.summary = Datasworn::from_json_data(I18nHint, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["result"] = Datasworn::to_json_data(result) unless result.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class I18nHints
    attr_accessor :description
    attr_accessor :result
    attr_accessor :summary
    attr_accessor :template

    def self.from_json_data(data)
      out = I18nHints.new
      out.description = Datasworn::from_json_data(I18nHint, data["description"])
      out.result = Datasworn::from_json_data(I18nHint, data["result"])
      out.summary = Datasworn::from_json_data(I18nHint, data["summary"])
      out.template = Datasworn::from_json_data(I18nHintsTemplate, data["template"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["result"] = Datasworn::to_json_data(result) unless result.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["template"] = Datasworn::to_json_data(template) unless template.nil?
      data
    end
  end

  class ImpactCategory
    attr_accessor :contents
    attr_accessor :description
    attr_accessor :name

    def self.from_json_data(data)
      out = ImpactCategory.new
      out.contents = Datasworn::from_json_data(Hash[String, ImpactRule], data["contents"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out
    end

    def to_json_data
      data = {}
      data["contents"] = Datasworn::to_json_data(contents)
      data["description"] = Datasworn::to_json_data(description)
      data["name"] = Datasworn::to_json_data(name)
      data
    end
  end

  class ImpactRule
    attr_accessor :description
    attr_accessor :name
    attr_accessor :permanent
    attr_accessor :prevents_recovery
    attr_accessor :shared

    def self.from_json_data(data)
      out = ImpactRule.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.permanent = Datasworn::from_json_data(TrueClass, data["permanent"])
      out.prevents_recovery = Datasworn::from_json_data(Array[DictKey], data["prevents_recovery"])
      out.shared = Datasworn::from_json_data(TrueClass, data["shared"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["name"] = Datasworn::to_json_data(name)
      data["permanent"] = Datasworn::to_json_data(permanent)
      data["prevents_recovery"] = Datasworn::to_json_data(prevents_recovery)
      data["shared"] = Datasworn::to_json_data(shared)
      data
    end
  end

  class ImpactRuleCollectionID
    attr_accessor :value

    def self.from_json_data(data)
      out = ImpactRuleCollectionID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class ImpactRuleID
    attr_accessor :value

    def self.from_json_data(data)
      out = ImpactRuleID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A localized plain text name or label.
  class Label
    attr_accessor :value

    def self.from_json_data(data)
      out = Label.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # Localized text, formatted in Markdown.
  # 
  # It uses some custom syntax; e.g. `{{table:some_oracle_table_id}}` indicates
  # that the referenced oracle table is rendered there part of the source
  # material.
  class MarkdownString
    attr_accessor :value

    def self.from_json_data(data)
      out = MarkdownString.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class Move
    attr_accessor :roll_type

    def self.from_json_data(data)
      {
        "action_roll" => MoveActionRoll,
        "no_roll" => MoveNoRoll,
        "progress_roll" => MoveProgressRoll,
        "special_track" => MoveSpecialTrack,
      }[data["roll_type"]].from_json_data(data)
    end
  end

  # A move that makes an action roll.
  class MoveActionRoll < Move
    attr_accessor :id
    attr_accessor :name
    attr_accessor :outcomes
    attr_accessor :source
    attr_accessor :text
    attr_accessor :trigger
    attr_accessor :canonical_name
    attr_accessor :oracles
    attr_accessor :replaces
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = MoveActionRoll.new
      out.roll_type = "action_roll"
      out.id = Datasworn::from_json_data(MoveID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.outcomes = Datasworn::from_json_data(MoveOutcomes, data["outcomes"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out.trigger = Datasworn::from_json_data(TriggerActionRoll, data["trigger"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.oracles = Datasworn::from_json_data(Array[OracleTableID], data["oracles"])
      out.replaces = Datasworn::from_json_data(MoveID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = { "roll_type" => "action_roll" }
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["outcomes"] = Datasworn::to_json_data(outcomes)
      data["source"] = Datasworn::to_json_data(source)
      data["text"] = Datasworn::to_json_data(text)
      data["trigger"] = Datasworn::to_json_data(trigger)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["oracles"] = Datasworn::to_json_data(oracles) unless oracles.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class MoveNoRoll < Move
    attr_accessor :id
    attr_accessor :name
    attr_accessor :outcomes
    attr_accessor :source
    attr_accessor :text
    attr_accessor :trigger
    attr_accessor :canonical_name
    attr_accessor :oracles
    attr_accessor :replaces
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = MoveNoRoll.new
      out.roll_type = "no_roll"
      out.id = Datasworn::from_json_data(MoveID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.outcomes = Datasworn::from_json_data(Object, data["outcomes"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out.trigger = Datasworn::from_json_data(TriggerNoRoll, data["trigger"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.oracles = Datasworn::from_json_data(Array[OracleTableID], data["oracles"])
      out.replaces = Datasworn::from_json_data(MoveID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = { "roll_type" => "no_roll" }
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["outcomes"] = Datasworn::to_json_data(outcomes)
      data["source"] = Datasworn::to_json_data(source)
      data["text"] = Datasworn::to_json_data(text)
      data["trigger"] = Datasworn::to_json_data(trigger)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["oracles"] = Datasworn::to_json_data(oracles) unless oracles.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  # A progress move that rolls on a standard progress track type (defined by the
  # move object).
  class MoveProgressRoll < Move
    attr_accessor :id
    attr_accessor :name
    attr_accessor :outcomes
    attr_accessor :source
    attr_accessor :text
    attr_accessor :track_label
    attr_accessor :trigger
    attr_accessor :canonical_name
    attr_accessor :oracles
    attr_accessor :replaces
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = MoveProgressRoll.new
      out.roll_type = "progress_roll"
      out.id = Datasworn::from_json_data(MoveID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.outcomes = Datasworn::from_json_data(MoveOutcomes, data["outcomes"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out.track_label = Datasworn::from_json_data(Label, data["track_label"])
      out.trigger = Datasworn::from_json_data(TriggerProgressRoll, data["trigger"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.oracles = Datasworn::from_json_data(Array[OracleTableID], data["oracles"])
      out.replaces = Datasworn::from_json_data(MoveID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = { "roll_type" => "progress_roll" }
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["outcomes"] = Datasworn::to_json_data(outcomes)
      data["source"] = Datasworn::to_json_data(source)
      data["text"] = Datasworn::to_json_data(text)
      data["track_label"] = Datasworn::to_json_data(track_label)
      data["trigger"] = Datasworn::to_json_data(trigger)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["oracles"] = Datasworn::to_json_data(oracles) unless oracles.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class MoveSpecialTrack < Move
    attr_accessor :id
    attr_accessor :name
    attr_accessor :outcomes
    attr_accessor :source
    attr_accessor :text
    attr_accessor :trigger
    attr_accessor :canonical_name
    attr_accessor :oracles
    attr_accessor :replaces
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = MoveSpecialTrack.new
      out.roll_type = "special_track"
      out.id = Datasworn::from_json_data(MoveID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.outcomes = Datasworn::from_json_data(MoveOutcomes, data["outcomes"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out.trigger = Datasworn::from_json_data(TriggerSpecialTrack, data["trigger"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.oracles = Datasworn::from_json_data(Array[OracleTableID], data["oracles"])
      out.replaces = Datasworn::from_json_data(MoveID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = { "roll_type" => "special_track" }
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["outcomes"] = Datasworn::to_json_data(outcomes)
      data["source"] = Datasworn::to_json_data(source)
      data["text"] = Datasworn::to_json_data(text)
      data["trigger"] = Datasworn::to_json_data(trigger)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["oracles"] = Datasworn::to_json_data(oracles) unless oracles.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class MoveCategory
    attr_accessor :contents
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :canonical_name
    attr_accessor :color
    attr_accessor :description

    # This collection's content enhances the identified collection, rather than
    # being a standalone collection of its own.
    attr_accessor :enhances
    attr_accessor :icon
    attr_accessor :images

    # This collection replaces the identified collection. References to the
    # replaced collection can be considered equivalent to this collection.
    attr_accessor :replaces
    attr_accessor :suggestions
    attr_accessor :summary

    def self.from_json_data(data)
      out = MoveCategory.new
      out.contents = Datasworn::from_json_data(Hash[String, Move], data["contents"])
      out.id = Datasworn::from_json_data(MoveCategoryID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.enhances = Datasworn::from_json_data(MoveCategoryID, data["enhances"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.images = Datasworn::from_json_data(Array[WebpimageURL], data["images"])
      out.replaces = Datasworn::from_json_data(MoveCategoryID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["contents"] = Datasworn::to_json_data(contents)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["images"] = Datasworn::to_json_data(images) unless images.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class MoveCategoryID
    attr_accessor :value

    def self.from_json_data(data)
      out = MoveCategoryID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class MoveEnhancement
    attr_accessor :roll_type

    def self.from_json_data(data)
      {
        "action_roll" => MoveEnhancementActionRoll,
        "no_roll" => MoveEnhancementNoRoll,
        "progress_roll" => MoveEnhancementProgressRoll,
        "special_track" => MoveEnhancementSpecialTrack,
      }[data["roll_type"]].from_json_data(data)
    end
  end

  class MoveEnhancementActionRoll < MoveEnhancement
    attr_accessor :enhances
    attr_accessor :trigger

    def self.from_json_data(data)
      out = MoveEnhancementActionRoll.new
      out.roll_type = "action_roll"
      out.enhances = Datasworn::from_json_data(Array[MoveIdwildcard], data["enhances"])
      out.trigger = Datasworn::from_json_data(TriggerActionRollEnhancement, data["trigger"])
      out
    end

    def to_json_data
      data = { "roll_type" => "action_roll" }
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["trigger"] = Datasworn::to_json_data(trigger) unless trigger.nil?
      data
    end
  end

  class MoveEnhancementNoRoll < MoveEnhancement
    attr_accessor :enhances
    attr_accessor :trigger

    def self.from_json_data(data)
      out = MoveEnhancementNoRoll.new
      out.roll_type = "no_roll"
      out.enhances = Datasworn::from_json_data(Array[MoveIdwildcard], data["enhances"])
      out.trigger = Datasworn::from_json_data(TriggerNoRollEnhancement, data["trigger"])
      out
    end

    def to_json_data
      data = { "roll_type" => "no_roll" }
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["trigger"] = Datasworn::to_json_data(trigger) unless trigger.nil?
      data
    end
  end

  class MoveEnhancementProgressRoll < MoveEnhancement
    attr_accessor :enhances
    attr_accessor :trigger

    def self.from_json_data(data)
      out = MoveEnhancementProgressRoll.new
      out.roll_type = "progress_roll"
      out.enhances = Datasworn::from_json_data(Array[MoveIdwildcard], data["enhances"])
      out.trigger = Datasworn::from_json_data(TriggerProgressRollEnhancement, data["trigger"])
      out
    end

    def to_json_data
      data = { "roll_type" => "progress_roll" }
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["trigger"] = Datasworn::to_json_data(trigger) unless trigger.nil?
      data
    end
  end

  class MoveEnhancementSpecialTrack < MoveEnhancement
    attr_accessor :enhances
    attr_accessor :trigger

    def self.from_json_data(data)
      out = MoveEnhancementSpecialTrack.new
      out.roll_type = "special_track"
      out.enhances = Datasworn::from_json_data(Array[MoveIdwildcard], data["enhances"])
      out.trigger = Datasworn::from_json_data(TriggerSpecialTrackEnhancement, data["trigger"])
      out
    end

    def to_json_data
      data = { "roll_type" => "special_track" }
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["trigger"] = Datasworn::to_json_data(trigger) unless trigger.nil?
      data
    end
  end

  # A move ID, for a standard move or a unique asset move
  class MoveID
    attr_accessor :value

    def self.from_json_data(data)
      out = MoveID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A move ID with wildcards
  class MoveIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = MoveIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class MoveOutcome
    attr_accessor :text

    def self.from_json_data(data)
      out = MoveOutcome.new
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["text"] = Datasworn::to_json_data(text)
      data
    end
  end

  class MoveOutcomeType
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    MISS = new("miss")
    STRONG_HIT = new("strong_hit")
    WEAK_HIT = new("weak_hit")

    def self.from_json_data(data)
      {
        "miss" => MISS,
        "strong_hit" => STRONG_HIT,
        "weak_hit" => WEAK_HIT,
      }[data]
    end

    def to_json_data
      value
    end
  end

  # A standalone localized description for each move outcome (miss, weak hit,
  # or strong hit). This is for for e.g. VTT implementations, where it's often
  # useful to display only the rules text relevant to a roll result.
  # 
  #   This often requires light editorialization to create text that can stand
  # alone without reference to the rest of the move. For example, 'as above'
  # (in reference to another move outcome) shouldn't be used here; instead, the
  # relevant text should be repeated.
  class MoveOutcomes
    attr_accessor :miss
    attr_accessor :strong_hit
    attr_accessor :weak_hit

    def self.from_json_data(data)
      out = MoveOutcomes.new
      out.miss = Datasworn::from_json_data(MoveOutcome, data["miss"])
      out.strong_hit = Datasworn::from_json_data(MoveOutcome, data["strong_hit"])
      out.weak_hit = Datasworn::from_json_data(MoveOutcome, data["weak_hit"])
      out
    end

    def to_json_data
      data = {}
      data["miss"] = Datasworn::to_json_data(miss)
      data["strong_hit"] = Datasworn::to_json_data(strong_hit)
      data["weak_hit"] = Datasworn::to_json_data(weak_hit)
      data
    end
  end

  class MoveRollType
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    ACTION_ROLL = new("action_roll")
    NO_ROLL = new("no_roll")
    PROGRESS_ROLL = new("progress_roll")
    SPECIAL_TRACK = new("special_track")

    def self.from_json_data(data)
      {
        "action_roll" => ACTION_ROLL,
        "no_roll" => NO_ROLL,
        "progress_roll" => PROGRESS_ROLL,
        "special_track" => SPECIAL_TRACK,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class NamespaceID
    attr_accessor :value

    def self.from_json_data(data)
      out = NamespaceID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A non-player character entry, similar to those in Chapter 5 of the Ironsworn
  # Rulebook, or Chapter 4 of Starforged.
  class Npc
    attr_accessor :description
    attr_accessor :drives
    attr_accessor :features
    attr_accessor :id
    attr_accessor :name
    attr_accessor :nature
    attr_accessor :quest_starter
    attr_accessor :rank
    attr_accessor :source
    attr_accessor :tactics
    attr_accessor :canonical_name
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :variants
    attr_accessor :your_truth

    def self.from_json_data(data)
      out = Npc.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.drives = Datasworn::from_json_data(Array[MarkdownString], data["drives"])
      out.features = Datasworn::from_json_data(Array[MarkdownString], data["features"])
      out.id = Datasworn::from_json_data(NpcID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.nature = Datasworn::from_json_data(NpcNature, data["nature"])
      out.quest_starter = Datasworn::from_json_data(MarkdownString, data["quest_starter"])
      out.rank = Datasworn::from_json_data(ChallengeRank, data["rank"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.tactics = Datasworn::from_json_data(Array[MarkdownString], data["tactics"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.variants = Datasworn::from_json_data(Hash[String, NpcVariant], data["variants"])
      out.your_truth = Datasworn::from_json_data(MarkdownString, data["your_truth"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["drives"] = Datasworn::to_json_data(drives)
      data["features"] = Datasworn::to_json_data(features)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["nature"] = Datasworn::to_json_data(nature)
      data["quest_starter"] = Datasworn::to_json_data(quest_starter)
      data["rank"] = Datasworn::to_json_data(rank)
      data["source"] = Datasworn::to_json_data(source)
      data["tactics"] = Datasworn::to_json_data(tactics)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["variants"] = Datasworn::to_json_data(variants) unless variants.nil?
      data["your_truth"] = Datasworn::to_json_data(your_truth) unless your_truth.nil?
      data
    end
  end

  class NpcCollection
    attr_accessor :contents
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :canonical_name
    attr_accessor :color
    attr_accessor :description

    # This collection's content enhances the identified collection, rather than
    # being a standalone collection of its own.
    attr_accessor :enhances
    attr_accessor :icon
    attr_accessor :images

    # This collection replaces the identified collection. References to the
    # replaced collection can be considered equivalent to this collection.
    attr_accessor :replaces
    attr_accessor :suggestions
    attr_accessor :summary

    def self.from_json_data(data)
      out = NpcCollection.new
      out.contents = Datasworn::from_json_data(Hash[String, Npc], data["contents"])
      out.id = Datasworn::from_json_data(NpcCollectionID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.enhances = Datasworn::from_json_data(NpcCollectionID, data["enhances"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.images = Datasworn::from_json_data(Array[WebpimageURL], data["images"])
      out.replaces = Datasworn::from_json_data(NpcCollectionID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["contents"] = Datasworn::to_json_data(contents)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["images"] = Datasworn::to_json_data(images) unless images.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class NpcCollectionID
    attr_accessor :value

    def self.from_json_data(data)
      out = NpcCollectionID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class NpcID
    attr_accessor :value

    def self.from_json_data(data)
      out = NpcID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class NpcIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = NpcIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A localized category label describing the nature of this NPC.
  # 
  # In Ironsworn classic, this is probably the singular form of the parent
  # collection's name.
  # 
  # For Starforged, see the table on p. 258 for examples.
  class NpcNature
    attr_accessor :value

    def self.from_json_data(data)
      out = NpcNature.new
      out.value = Datasworn.from_json_data(Label, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class NpcVariant
    attr_accessor :description
    attr_accessor :id
    attr_accessor :name
    attr_accessor :nature
    attr_accessor :rank
    attr_accessor :summary

    def self.from_json_data(data)
      out = NpcVariant.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.id = Datasworn::from_json_data(NpcVariantID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.nature = Datasworn::from_json_data(NpcNature, data["nature"])
      out.rank = Datasworn::from_json_data(ChallengeRank, data["rank"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["nature"] = Datasworn::to_json_data(nature)
      data["rank"] = Datasworn::to_json_data(rank)
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class NpcVariantID
    attr_accessor :value

    def self.from_json_data(data)
      out = NpcVariantID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class OracleCollection
    attr_accessor :collections
    attr_accessor :contents
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :canonical_name
    attr_accessor :color
    attr_accessor :description

    # This collection's content enhances the identified collection, rather than
    # being a standalone collection of its own.
    attr_accessor :enhances
    attr_accessor :icon
    attr_accessor :images
    attr_accessor :rendering

    # This collection replaces the identified collection. References to the
    # replaced collection can be considered equivalent to this collection.
    attr_accessor :replaces
    attr_accessor :suggestions
    attr_accessor :summary

    def self.from_json_data(data)
      out = OracleCollection.new
      out.collections = Datasworn::from_json_data(Hash[String, OracleCollection], data["collections"])
      out.contents = Datasworn::from_json_data(Hash[String, OracleTable], data["contents"])
      out.id = Datasworn::from_json_data(OracleCollectionID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.enhances = Datasworn::from_json_data(OracleCollectionID, data["enhances"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.images = Datasworn::from_json_data(Array[WebpimageURL], data["images"])
      out.rendering = Datasworn::from_json_data(OracleCollectionRendering, data["rendering"])
      out.replaces = Datasworn::from_json_data(OracleCollectionID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["collections"] = Datasworn::to_json_data(collections)
      data["contents"] = Datasworn::to_json_data(contents)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["enhances"] = Datasworn::to_json_data(enhances) unless enhances.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["images"] = Datasworn::to_json_data(images) unless images.nil?
      data["rendering"] = Datasworn::to_json_data(rendering) unless rendering.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class OracleCollectionID
    attr_accessor :value

    def self.from_json_data(data)
      out = OracleCollectionID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class OracleCollectionRendering
    attr_accessor :columns
    attr_accessor :color
    attr_accessor :table_style

    def self.from_json_data(data)
      out = OracleCollectionRendering.new
      out.columns = Datasworn::from_json_data(Hash[String, OracleCollectionTableColumn], data["columns"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.table_style = Datasworn::from_json_data(OracleCollectionStyle, data["table_style"])
      out
    end

    def to_json_data
      data = {}
      data["columns"] = Datasworn::to_json_data(columns)
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["table_style"] = Datasworn::to_json_data(table_style) unless table_style.nil?
      data
    end
  end

  class OracleCollectionStyle
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    COLLECTION = new("collection")
    MULTI_TABLE = new("multi_table")

    def self.from_json_data(data)
      {
        "collection" => COLLECTION,
        "multi_table" => MULTI_TABLE,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class OracleCollectionTableColumn
    attr_accessor :content_type

    # The key of the OracleTable (within this collection), whose data is used to
    # render this column.
    attr_accessor :table_key

    # The thematic color for this column.
    attr_accessor :color

    # The column's header text.
    attr_accessor :name

    def self.from_json_data(data)
      out = OracleCollectionTableColumn.new
      out.content_type = Datasworn::from_json_data(OracleTableColumnContentKey, data["content_type"])
      out.table_key = Datasworn::from_json_data(DictKey, data["table_key"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out
    end

    def to_json_data
      data = {}
      data["content_type"] = Datasworn::to_json_data(content_type)
      data["table_key"] = Datasworn::to_json_data(table_key)
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["name"] = Datasworn::to_json_data(name) unless name.nil?
      data
    end
  end

  # Provides string templates that may be used in place of the static
  # row text from `OracleTableRow#result`, `OracleTableRow#summary`, and
  # `OracleTableRow#description`.
  # 
  #   These strings are formatted in Markdown, but use a special syntax
  # for their placeholders: `{{result:some_oracle_table_id}}`. The
  # placeholder should be replaced with the value of a rolled (or selected)
  # `OracleTableRow#result` from the target oracle table ID.
  class OracleRollTemplate
    # A string template that may be used in place of OracleTableRow#description.
    attr_accessor :description

    # A string template that may be used in place of OracleTableRow#result.
    attr_accessor :result

    # A string template that may be used in place of OracleTableRow#summary.
    attr_accessor :summary

    def self.from_json_data(data)
      out = OracleRollTemplate.new
      out.description = Datasworn::from_json_data(TemplateString, data["description"])
      out.result = Datasworn::from_json_data(TemplateString, data["result"])
      out.summary = Datasworn::from_json_data(TemplateString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["result"] = Datasworn::to_json_data(result) unless result.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class OracleTable
    attr_accessor :dice
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source
    attr_accessor :table
    attr_accessor :canonical_name

    # A longer description of the oracle table's intended usage, which might
    # include multiple paragraphs. If it's only a couple sentences, use the
    # `summary` key instead.
    attr_accessor :description
    attr_accessor :icon
    attr_accessor :images
    attr_accessor :match
    attr_accessor :rendering

    # Indicates that this table replaces the identified table. References to the
    # replaced table can be considered equivalent to this table.
    attr_accessor :replaces
    attr_accessor :suggestions

    # A brief summary of the oracle table's intended usage, no more than a few
    # sentences in length. This is intended for use in application tooltips
    # and similar sorts of hints. Longer text should use the "description" key
    # instead.
    attr_accessor :summary

    def self.from_json_data(data)
      out = OracleTable.new
      out.dice = Datasworn::from_json_data(DiceNotation, data["dice"])
      out.id = Datasworn::from_json_data(OracleTableID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.table = Datasworn::from_json_data(Array[OracleTableRow], data["table"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.images = Datasworn::from_json_data(Array[WebpimageURL], data["images"])
      out.match = Datasworn::from_json_data(OracleTableMatchBehavior, data["match"])
      out.rendering = Datasworn::from_json_data(OracleTableRendering, data["rendering"])
      out.replaces = Datasworn::from_json_data(OracleTableID, data["replaces"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out
    end

    def to_json_data
      data = {}
      data["dice"] = Datasworn::to_json_data(dice)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["table"] = Datasworn::to_json_data(table)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["images"] = Datasworn::to_json_data(images) unless images.nil?
      data["match"] = Datasworn::to_json_data(match) unless match.nil?
      data["rendering"] = Datasworn::to_json_data(rendering) unless rendering.nil?
      data["replaces"] = Datasworn::to_json_data(replaces) unless replaces.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data
    end
  end

  class OracleTableColumn
    attr_accessor :content_type

    # The thematic color for this column.
    attr_accessor :color

    # The column's header text.
    attr_accessor :name

    def self.from_json_data(data)
      out = OracleTableColumn.new
      out.content_type = Datasworn::from_json_data(OracleTableColumnContentKey, data["content_type"])
      out.color = Datasworn::from_json_data(Csscolor, data["color"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out
    end

    def to_json_data
      data = {}
      data["content_type"] = Datasworn::to_json_data(content_type)
      data["color"] = Datasworn::to_json_data(color) unless color.nil?
      data["name"] = Datasworn::to_json_data(name) unless name.nil?
      data
    end
  end

  # The value(s) from each OracleTableRow that is rendered in this column.
  class OracleTableColumnContentKey
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    DESCRIPTION = new("description")
    RESULT = new("result")
    ROLL = new("roll")
    SUMMARY = new("summary")

    def self.from_json_data(data)
      {
        "description" => DESCRIPTION,
        "result" => RESULT,
        "roll" => ROLL,
        "summary" => SUMMARY,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class OracleTableID
    attr_accessor :value

    def self.from_json_data(data)
      out = OracleTableID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # Oracle table wildcards can also use '**' to represent any
  # number of collection levels in the oracle tree. For example,
  # 'starforged/oracles/**/location' represents any starforged table with the
  # "location" key.
  class OracleTableIdwildcard
    attr_accessor :value

    def self.from_json_data(data)
      out = OracleTableIdwildcard.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class OracleTableMatchBehavior
    attr_accessor :text

    def self.from_json_data(data)
      out = OracleTableMatchBehavior.new
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["text"] = Datasworn::to_json_data(text)
      data
    end
  end

  class OracleTableRendering
    attr_accessor :columns
    attr_accessor :table_style

    def self.from_json_data(data)
      out = OracleTableRendering.new
      out.columns = Datasworn::from_json_data(Hash[String, OracleTableColumn], data["columns"])
      out.table_style = Datasworn::from_json_data(OracleTableStyle, data["table_style"])
      out
    end

    def to_json_data
      data = {}
      data["columns"] = Datasworn::to_json_data(columns)
      data["table_style"] = Datasworn::to_json_data(table_style) unless table_style.nil?
      data
    end
  end

  class OracleTableRoll
    # The rulebook explicitly cautions *against* rolling all details at once,
    # so rolling every referenced oracle automatically is not recommended. That
    # said, some oracle results only provide useful information once a secondary
    # roll occurs, such as "Action + Theme". If this value is omitted, assume
    # it's false.
    attr_accessor :auto
    attr_accessor :method

    # The ID of the oracle table to be rolled. If omitted, it defaults to the ID
    # of this oracle table.
    attr_accessor :oracle
    attr_accessor :times

    def self.from_json_data(data)
      out = OracleTableRoll.new
      out.auto = Datasworn::from_json_data(TrueClass, data["auto"])
      out.method = Datasworn::from_json_data(OracleTableRollMethod, data["method"])
      out.oracle = Datasworn::from_json_data(OracleTableID, data["oracle"])
      out.times = Datasworn::from_json_data(Integer, data["times"])
      out
    end

    def to_json_data
      data = {}
      data["auto"] = Datasworn::to_json_data(auto) unless auto.nil?
      data["method"] = Datasworn::to_json_data(method) unless method.nil?
      data["oracle"] = Datasworn::to_json_data(oracle) unless oracle.nil?
      data["times"] = Datasworn::to_json_data(times) unless times.nil?
      data
    end
  end

  # Special roll instructions to use when rolling multiple times on a single
  # oracle table.
  class OracleTableRollMethod
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    KEEP_DUPLICATES = new("keep_duplicates")
    MAKE_IT_WORSE = new("make_it_worse")
    NO_DUPLICATES = new("no_duplicates")

    def self.from_json_data(data)
      {
        "keep_duplicates" => KEEP_DUPLICATES,
        "make_it_worse" => MAKE_IT_WORSE,
        "no_duplicates" => NO_DUPLICATES,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class OracleTableRow
    attr_accessor :id
    attr_accessor :max
    attr_accessor :min
    attr_accessor :result
    attr_accessor :description
    attr_accessor :embed_table
    attr_accessor :i18n
    attr_accessor :icon
    attr_accessor :rolls
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :template

    def self.from_json_data(data)
      out = OracleTableRow.new
      out.id = Datasworn::from_json_data(OracleTableRowID, data["id"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.result = Datasworn::from_json_data(MarkdownString, data["result"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.embed_table = Datasworn::from_json_data(OracleTableID, data["embed_table"])
      out.i18n = Datasworn::from_json_data(I18nHints, data["i18n"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.rolls = Datasworn::from_json_data(Array[OracleTableRoll], data["rolls"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.template = Datasworn::from_json_data(OracleRollTemplate, data["template"])
      out
    end

    def to_json_data
      data = {}
      data["id"] = Datasworn::to_json_data(id)
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["result"] = Datasworn::to_json_data(result)
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["embed_table"] = Datasworn::to_json_data(embed_table) unless embed_table.nil?
      data["i18n"] = Datasworn::to_json_data(i18n) unless i18n.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["rolls"] = Datasworn::to_json_data(rolls) unless rolls.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["template"] = Datasworn::to_json_data(template) unless template.nil?
      data
    end
  end

  # Normally, rows will end with two numbers separated by a dash, indicating
  # their dice range.
  # 
  # Rows with a single number represent unrollable rows that are sometimes
  # included for rendering purposes; in this case, the number represents the
  # row's index.
  class OracleTableRowID
    attr_accessor :value

    def self.from_json_data(data)
      out = OracleTableRowID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class OracleTableStyle
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    EMBED_AS_COLUMN = new("embed_as_column")
    EMBED_IN_ROW = new("embed_in_row")
    STANDALONE_TABLE = new("standalone_table")

    def self.from_json_data(data)
      {
        "embed_as_column" => EMBED_AS_COLUMN,
        "embed_in_row" => EMBED_IN_ROW,
        "standalone_table" => STANDALONE_TABLE,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class PartOfSpeech
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    ADJECTIVE = new("adjective")
    ADJUNCT_COMMON_NOUN = new("adjunct_common_noun")
    ADJUNCT_PROPER_NOUN = new("adjunct_proper_noun")
    ATTRIBUTIVE_VERB = new("attributive_verb")
    COMMON_NOUN = new("common_noun")
    GERUND = new("gerund")
    PROPER_NOUN = new("proper_noun")
    VERB = new("verb")

    def self.from_json_data(data)
      {
        "adjective" => ADJECTIVE,
        "adjunct_common_noun" => ADJUNCT_COMMON_NOUN,
        "adjunct_proper_noun" => ADJUNCT_PROPER_NOUN,
        "attributive_verb" => ATTRIBUTIVE_VERB,
        "common_noun" => COMMON_NOUN,
        "gerund" => GERUND,
        "proper_noun" => PROPER_NOUN,
        "verb" => VERB,
      }[data]
    end

    def to_json_data
      value
    end
  end

  # A basic, rollable player character resource.
  class PlayerConditionMeter
    attr_accessor :value

    def self.from_json_data(data)
      out = PlayerConditionMeter.new
      out.value = Datasworn.from_json_data(DictKey, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # A basic player character stat.
  class PlayerStat
    attr_accessor :value

    def self.from_json_data(data)
      out = PlayerStat.new
      out.value = Datasworn.from_json_data(DictKey, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class ProgressRollMethod
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    MISS = new("miss")
    PROGRESS_ROLL = new("progress_roll")
    STRONG_HIT = new("strong_hit")
    WEAK_HIT = new("weak_hit")

    def self.from_json_data(data)
      {
        "miss" => MISS,
        "progress_roll" => PROGRESS_ROLL,
        "strong_hit" => STRONG_HIT,
        "weak_hit" => WEAK_HIT,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class ProgressRollOptionUsing
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    PROGRESS_TRACK = new("progress_track")

    def self.from_json_data(data)
      {
        "progress_track" => PROGRESS_TRACK,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class ProgressRollOption
    attr_accessor :using

    def self.from_json_data(data)
      out = ProgressRollOption.new
      out.using = Datasworn::from_json_data(ProgressRollOptionUsing, data["using"])
      out
    end

    def to_json_data
      data = {}
      data["using"] = Datasworn::to_json_data(using)
      data
    end
  end

  # A rarity, as described in Ironsworn: Delve.
  class Rarity
    # The asset augmented by this rarity.
    attr_accessor :asset
    attr_accessor :description
    attr_accessor :id
    attr_accessor :name
    attr_accessor :source

    # From Ironsworn: Delve, p. 174:
    # 
    #       Some assets will bring a rarity into play more often than others,
    # so the experience point cost for a rarity will vary by the linked asset.
    # These costs are shown in the tables on page 175.
    # 
    #       If you are playing solo, and aren’t concerned with the relative
    # balance of rarity abilities, you can ignore these variable costs. If so,
    # spend 3 experience points to purchase a rarity.
    attr_accessor :xp_cost
    attr_accessor :canonical_name
    attr_accessor :icon
    attr_accessor :suggestions

    def self.from_json_data(data)
      out = Rarity.new
      out.asset = Datasworn::from_json_data(AssetID, data["asset"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.id = Datasworn::from_json_data(RarityID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.xp_cost = Datasworn::from_json_data(Integer, data["xp_cost"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out
    end

    def to_json_data
      data = {}
      data["asset"] = Datasworn::to_json_data(asset)
      data["description"] = Datasworn::to_json_data(description)
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["source"] = Datasworn::to_json_data(source)
      data["xp_cost"] = Datasworn::to_json_data(xp_cost)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data
    end
  end

  class RarityID
    attr_accessor :value

    def self.from_json_data(data)
      out = RarityID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class Rules
    attr_accessor :condition_meters
    attr_accessor :impacts
    attr_accessor :special_tracks
    attr_accessor :stats

    def self.from_json_data(data)
      out = Rules.new
      out.condition_meters = Datasworn::from_json_data(Hash[String, ConditionMeterRule], data["condition_meters"])
      out.impacts = Datasworn::from_json_data(Hash[String, ImpactCategory], data["impacts"])
      out.special_tracks = Datasworn::from_json_data(Hash[String, SpecialTrackRule], data["special_tracks"])
      out.stats = Datasworn::from_json_data(Hash[String, StatRule], data["stats"])
      out
    end

    def to_json_data
      data = {}
      data["condition_meters"] = Datasworn::to_json_data(condition_meters)
      data["impacts"] = Datasworn::to_json_data(impacts)
      data["special_tracks"] = Datasworn::to_json_data(special_tracks)
      data["stats"] = Datasworn::to_json_data(stats)
      data
    end
  end

  # A relative URL pointing to a vector image in the SVG format.
  class SvgimageURL
    attr_accessor :value

    def self.from_json_data(data)
      out = SvgimageURL.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class SourceAuthor
    attr_accessor :name

    # An optional email contact for the author
    attr_accessor :email

    # An optional URL for the author's website.
    attr_accessor :url

    def self.from_json_data(data)
      out = SourceAuthor.new
      out.name = Datasworn::from_json_data(String, data["name"])
      out.email = Datasworn::from_json_data(String, data["email"])
      out.url = Datasworn::from_json_data(String, data["url"])
      out
    end

    def to_json_data
      data = {}
      data["name"] = Datasworn::to_json_data(name)
      data["email"] = Datasworn::to_json_data(email) unless email.nil?
      data["url"] = Datasworn::to_json_data(url) unless url.nil?
      data
    end
  end

  # Metadata describing the original source of this item
  class Source
    attr_accessor :authors

    # The date of the source documents's last update, formatted YYYY-MM-DD.
    # Required because it's used to determine whether the data needs updating.
    attr_accessor :date
    attr_accessor :license

    # The title of the source document.
    attr_accessor :title

    # An absolute URL where the source document is available.
    attr_accessor :url

    # The page number where this item is described in full.
    attr_accessor :page

    def self.from_json_data(data)
      out = Source.new
      out.authors = Datasworn::from_json_data(Array[SourceAuthor], data["authors"])
      out.date = Datasworn::from_json_data(String, data["date"])
      out.license = Datasworn::from_json_data(String, data["license"])
      out.title = Datasworn::from_json_data(String, data["title"])
      out.url = Datasworn::from_json_data(String, data["url"])
      out.page = Datasworn::from_json_data(Integer, data["page"])
      out
    end

    def to_json_data
      data = {}
      data["authors"] = Datasworn::to_json_data(authors)
      data["date"] = Datasworn::to_json_data(date)
      data["license"] = Datasworn::to_json_data(license)
      data["title"] = Datasworn::to_json_data(title)
      data["url"] = Datasworn::to_json_data(url)
      data["page"] = Datasworn::to_json_data(page) unless page.nil?
      data
    end
  end

  class SpecialTrackRollMethod
    attr_accessor :value

    def initialize(value)
      self.value = value
    end

    private_class_method :new

    ALL = new("all")
    HIGHEST = new("highest")
    LOWEST = new("lowest")
    MISS = new("miss")
    PLAYER_CHOICE = new("player_choice")
    STRONG_HIT = new("strong_hit")
    WEAK_HIT = new("weak_hit")

    def self.from_json_data(data)
      {
        "all" => ALL,
        "highest" => HIGHEST,
        "lowest" => LOWEST,
        "miss" => MISS,
        "player_choice" => PLAYER_CHOICE,
        "strong_hit" => STRONG_HIT,
        "weak_hit" => WEAK_HIT,
      }[data]
    end

    def to_json_data
      value
    end
  end

  class SpecialTrackRule
    attr_accessor :description
    attr_accessor :name
    attr_accessor :optional
    attr_accessor :shared

    def self.from_json_data(data)
      out = SpecialTrackRule.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.optional = Datasworn::from_json_data(TrueClass, data["optional"])
      out.shared = Datasworn::from_json_data(TrueClass, data["shared"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["name"] = Datasworn::to_json_data(name)
      data["optional"] = Datasworn::to_json_data(optional)
      data["shared"] = Datasworn::to_json_data(shared)
      data
    end
  end

  class SpecialTrackRuleID
    attr_accessor :value

    def self.from_json_data(data)
      out = SpecialTrackRuleID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  # Special, ruleset-specific progress tracks. Usually, one exists per player
  # character, and they persist through the life of the player character.
  # 'Canonical' examples:
  #   * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged
  # legacy track, use `bonds_legacy` instead.
  #   * `failure_track`, described in Ironsworn: Delve
  #   * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described
  # Ironsworn: Starforged
  # 
  class SpecialTrackType
    attr_accessor :value

    def self.from_json_data(data)
      out = SpecialTrackType.new
      out.value = Datasworn.from_json_data(DictKey, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class StatRule
    attr_accessor :description
    attr_accessor :name

    def self.from_json_data(data)
      out = StatRule.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["name"] = Datasworn::to_json_data(name)
      data
    end
  end

  class StatRuleID
    attr_accessor :value

    def self.from_json_data(data)
      out = StatRuleID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class Suggestions
    attr_accessor :assets
    attr_accessor :atlas
    attr_accessor :moves
    attr_accessor :npcs
    attr_accessor :oracles
    attr_accessor :site_domains
    attr_accessor :site_themes

    def self.from_json_data(data)
      out = Suggestions.new
      out.assets = Datasworn::from_json_data(Array[AssetID], data["assets"])
      out.atlas = Datasworn::from_json_data(Array[AtlasEntryID], data["atlas"])
      out.moves = Datasworn::from_json_data(Array[MoveID], data["moves"])
      out.npcs = Datasworn::from_json_data(Array[NpcID], data["npcs"])
      out.oracles = Datasworn::from_json_data(Array[OracleTableID], data["oracles"])
      out.site_domains = Datasworn::from_json_data(Array[DelveSiteDomainID], data["site_domains"])
      out.site_themes = Datasworn::from_json_data(Array[DelveSiteThemeID], data["site_themes"])
      out
    end

    def to_json_data
      data = {}
      data["assets"] = Datasworn::to_json_data(assets) unless assets.nil?
      data["atlas"] = Datasworn::to_json_data(atlas) unless atlas.nil?
      data["moves"] = Datasworn::to_json_data(moves) unless moves.nil?
      data["npcs"] = Datasworn::to_json_data(npcs) unless npcs.nil?
      data["oracles"] = Datasworn::to_json_data(oracles) unless oracles.nil?
      data["site_domains"] = Datasworn::to_json_data(site_domains) unless site_domains.nil?
      data["site_themes"] = Datasworn::to_json_data(site_themes) unless site_themes.nil?
      data
    end
  end

  # A rich text string in Markdown with replaced values from oracle roll
  # results.
  # 
  # The custom syntax `{{some_row_key:some_oracle_table_id}}` should be replaced
  # by the `some_row_key` string of a rolled oracle table. This is usually the
  # `result` key, for example `{{result:starforged/oracles/core/action}}`
  class TemplateString
    attr_accessor :value

    def self.from_json_data(data)
      out = TemplateString.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class ThemeDangerRowID
    attr_accessor :value

    def self.from_json_data(data)
      out = ThemeDangerRowID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class ThemeFeatureRowID
    attr_accessor :value

    def self.from_json_data(data)
      out = ThemeFeatureRowID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class TriggerActionRoll
    attr_accessor :conditions

    # A markdown string containing the primary trigger text for this move.
    # 
    # Secondary trigger text (for specific stats or uses of an asset ability)
    # may be described in individual trigger conditions.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerActionRoll.new
      out.conditions = Datasworn::from_json_data(Array[TriggerActionRollCondition], data["conditions"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data["text"] = Datasworn::to_json_data(text)
      data
    end
  end

  class TriggerActionRollCondition
    attr_accessor :method

    # The options available when rolling with this trigger.
    attr_accessor :roll_options
    attr_accessor :by

    # A markdown string of any trigger text specific to this trigger condition.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerActionRollCondition.new
      out.method = Datasworn::from_json_data(ActionRollMethod, data["method"])
      out.roll_options = Datasworn::from_json_data(Array[ActionRollOption], data["roll_options"])
      out.by = Datasworn::from_json_data(TriggerBy, data["by"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["method"] = Datasworn::to_json_data(method)
      data["roll_options"] = Datasworn::to_json_data(roll_options)
      data["by"] = Datasworn::to_json_data(by) unless by.nil?
      data["text"] = Datasworn::to_json_data(text) unless text.nil?
      data
    end
  end

  class TriggerActionRollConditionEnhancement
    attr_accessor :method

    # The options available when rolling with this trigger.
    attr_accessor :roll_options
    attr_accessor :by

    # A markdown string of any trigger text specific to this trigger condition.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerActionRollConditionEnhancement.new
      out.method = Datasworn::from_json_data(ActionRollMethod, data["method"])
      out.roll_options = Datasworn::from_json_data(Array[ActionRollOption], data["roll_options"])
      out.by = Datasworn::from_json_data(TriggerBy, data["by"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["method"] = Datasworn::to_json_data(method)
      data["roll_options"] = Datasworn::to_json_data(roll_options)
      data["by"] = Datasworn::to_json_data(by) unless by.nil?
      data["text"] = Datasworn::to_json_data(text) unless text.nil?
      data
    end
  end

  class TriggerActionRollEnhancement
    attr_accessor :conditions

    def self.from_json_data(data)
      out = TriggerActionRollEnhancement.new
      out.conditions = Datasworn::from_json_data(Array[TriggerActionRollConditionEnhancement], data["conditions"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data
    end
  end

  # Information on who can trigger this trigger condition. Usually this is just
  # the player, but some asset abilities can trigger from an ally's move.
  class TriggerBy
    attr_accessor :ally
    attr_accessor :player

    def self.from_json_data(data)
      out = TriggerBy.new
      out.ally = Datasworn::from_json_data(TrueClass, data["ally"])
      out.player = Datasworn::from_json_data(TrueClass, data["player"])
      out
    end

    def to_json_data
      data = {}
      data["ally"] = Datasworn::to_json_data(ally)
      data["player"] = Datasworn::to_json_data(player)
      data
    end
  end

  class TriggerNoRoll
    attr_accessor :conditions

    # A markdown string containing the primary trigger text for this move.
    # 
    # Secondary trigger text (for specific stats or uses of an asset ability)
    # may be described in individual trigger conditions.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerNoRoll.new
      out.conditions = Datasworn::from_json_data(Array[TriggerNoRollCondition], data["conditions"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data["text"] = Datasworn::to_json_data(text)
      data
    end
  end

  class TriggerNoRollCondition
    attr_accessor :method

    # The options available when rolling with this trigger.
    attr_accessor :roll_options
    attr_accessor :by

    # A markdown string of any trigger text specific to this trigger condition.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerNoRollCondition.new
      out.method = Datasworn::from_json_data(Object, data["method"])
      out.roll_options = Datasworn::from_json_data(Object, data["roll_options"])
      out.by = Datasworn::from_json_data(TriggerBy, data["by"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["method"] = Datasworn::to_json_data(method)
      data["roll_options"] = Datasworn::to_json_data(roll_options)
      data["by"] = Datasworn::to_json_data(by) unless by.nil?
      data["text"] = Datasworn::to_json_data(text) unless text.nil?
      data
    end
  end

  class TriggerNoRollEnhancement
    attr_accessor :conditions

    def self.from_json_data(data)
      out = TriggerNoRollEnhancement.new
      out.conditions = Datasworn::from_json_data(Array[TriggerNoRollCondition], data["conditions"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data
    end
  end

  class TriggerProgressRoll
    attr_accessor :conditions

    # A markdown string containing the primary trigger text for this move.
    # 
    # Secondary trigger text (for specific stats or uses of an asset ability)
    # may be described in individual trigger conditions.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerProgressRoll.new
      out.conditions = Datasworn::from_json_data(Array[TriggerProgressRollCondition], data["conditions"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data["text"] = Datasworn::to_json_data(text)
      data
    end
  end

  class TriggerProgressRollCondition
    attr_accessor :method

    # The options available when rolling with this trigger.
    attr_accessor :roll_options
    attr_accessor :by

    # A markdown string of any trigger text specific to this trigger condition.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerProgressRollCondition.new
      out.method = Datasworn::from_json_data(ProgressRollMethod, data["method"])
      out.roll_options = Datasworn::from_json_data(Array[ProgressRollOption], data["roll_options"])
      out.by = Datasworn::from_json_data(TriggerBy, data["by"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["method"] = Datasworn::to_json_data(method)
      data["roll_options"] = Datasworn::to_json_data(roll_options)
      data["by"] = Datasworn::to_json_data(by) unless by.nil?
      data["text"] = Datasworn::to_json_data(text) unless text.nil?
      data
    end
  end

  class TriggerProgressRollConditionEnhancement
    attr_accessor :method

    # The options available when rolling with this trigger.
    attr_accessor :roll_options
    attr_accessor :by

    # A markdown string of any trigger text specific to this trigger condition.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerProgressRollConditionEnhancement.new
      out.method = Datasworn::from_json_data(ProgressRollMethod, data["method"])
      out.roll_options = Datasworn::from_json_data(Array[ProgressRollOption], data["roll_options"])
      out.by = Datasworn::from_json_data(TriggerBy, data["by"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["method"] = Datasworn::to_json_data(method)
      data["roll_options"] = Datasworn::to_json_data(roll_options)
      data["by"] = Datasworn::to_json_data(by) unless by.nil?
      data["text"] = Datasworn::to_json_data(text) unless text.nil?
      data
    end
  end

  class TriggerProgressRollEnhancement
    attr_accessor :conditions

    def self.from_json_data(data)
      out = TriggerProgressRollEnhancement.new
      out.conditions = Datasworn::from_json_data(Array[TriggerProgressRollConditionEnhancement], data["conditions"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data
    end
  end

  class TriggerSpecialTrack
    attr_accessor :conditions

    # A markdown string containing the primary trigger text for this move.
    # 
    # Secondary trigger text (for specific stats or uses of an asset ability)
    # may be described in individual trigger conditions.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerSpecialTrack.new
      out.conditions = Datasworn::from_json_data(Array[TriggerSpecialTrackCondition], data["conditions"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data["text"] = Datasworn::to_json_data(text)
      data
    end
  end

  class TriggerSpecialTrackCondition
    attr_accessor :method

    # The options available when rolling with this trigger.
    attr_accessor :roll_options
    attr_accessor :by

    # A markdown string of any trigger text specific to this trigger condition.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerSpecialTrackCondition.new
      out.method = Datasworn::from_json_data(SpecialTrackRollMethod, data["method"])
      out.roll_options = Datasworn::from_json_data(Array[TriggerSpecialTrackConditionOption], data["roll_options"])
      out.by = Datasworn::from_json_data(TriggerBy, data["by"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["method"] = Datasworn::to_json_data(method)
      data["roll_options"] = Datasworn::to_json_data(roll_options)
      data["by"] = Datasworn::to_json_data(by) unless by.nil?
      data["text"] = Datasworn::to_json_data(text) unless text.nil?
      data
    end
  end

  # A progress move that rolls on one or more special tracks, like Bonds
  # (classic Ironsworn), Failure (Delve), or Legacy (Starforged).
  class TriggerSpecialTrackConditionEnhancement
    attr_accessor :method

    # The options available when rolling with this trigger.
    attr_accessor :roll_options
    attr_accessor :by

    # A markdown string of any trigger text specific to this trigger condition.
    attr_accessor :text

    def self.from_json_data(data)
      out = TriggerSpecialTrackConditionEnhancement.new
      out.method = Datasworn::from_json_data(SpecialTrackRollMethod, data["method"])
      out.roll_options = Datasworn::from_json_data(Array[TriggerSpecialTrackConditionOption], data["roll_options"])
      out.by = Datasworn::from_json_data(TriggerBy, data["by"])
      out.text = Datasworn::from_json_data(MarkdownString, data["text"])
      out
    end

    def to_json_data
      data = {}
      data["method"] = Datasworn::to_json_data(method)
      data["roll_options"] = Datasworn::to_json_data(roll_options)
      data["by"] = Datasworn::to_json_data(by) unless by.nil?
      data["text"] = Datasworn::to_json_data(text) unless text.nil?
      data
    end
  end

  class TriggerSpecialTrackConditionOption
    attr_accessor :using

    def self.from_json_data(data)
      out = TriggerSpecialTrackConditionOption.new
      out.using = Datasworn::from_json_data(SpecialTrackType, data["using"])
      out
    end

    def to_json_data
      data = {}
      data["using"] = Datasworn::to_json_data(using)
      data
    end
  end

  class TriggerSpecialTrackEnhancement
    attr_accessor :conditions

    def self.from_json_data(data)
      out = TriggerSpecialTrackEnhancement.new
      out.conditions = Datasworn::from_json_data(Array[TriggerSpecialTrackConditionEnhancement], data["conditions"])
      out
    end

    def to_json_data
      data = {}
      data["conditions"] = Datasworn::to_json_data(conditions)
      data
    end
  end

  # A setting truth category.
  class Truth
    attr_accessor :id
    attr_accessor :name
    attr_accessor :options
    attr_accessor :source
    attr_accessor :canonical_name
    attr_accessor :icon
    attr_accessor :suggestions
    attr_accessor :your_character

    def self.from_json_data(data)
      out = Truth.new
      out.id = Datasworn::from_json_data(TruthID, data["id"])
      out.name = Datasworn::from_json_data(Label, data["name"])
      out.options = Datasworn::from_json_data(Array[TruthOption], data["options"])
      out.source = Datasworn::from_json_data(Source, data["source"])
      out.canonical_name = Datasworn::from_json_data(Label, data["canonical_name"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.your_character = Datasworn::from_json_data(MarkdownString, data["your_character"])
      out
    end

    def to_json_data
      data = {}
      data["id"] = Datasworn::to_json_data(id)
      data["name"] = Datasworn::to_json_data(name)
      data["options"] = Datasworn::to_json_data(options)
      data["source"] = Datasworn::to_json_data(source)
      data["canonical_name"] = Datasworn::to_json_data(canonical_name) unless canonical_name.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["your_character"] = Datasworn::to_json_data(your_character) unless your_character.nil?
      data
    end
  end

  class TruthID
    attr_accessor :value

    def self.from_json_data(data)
      out = TruthID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class TruthOption
    attr_accessor :description
    attr_accessor :id
    attr_accessor :quest_starter
    attr_accessor :max
    attr_accessor :min
    attr_accessor :summary
    attr_accessor :table

    def self.from_json_data(data)
      out = TruthOption.new
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.id = Datasworn::from_json_data(TruthOptionID, data["id"])
      out.quest_starter = Datasworn::from_json_data(MarkdownString, data["quest_starter"])
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.table = Datasworn::from_json_data(Array[TruthOptionTableRow], data["table"])
      out
    end

    def to_json_data
      data = {}
      data["description"] = Datasworn::to_json_data(description)
      data["id"] = Datasworn::to_json_data(id)
      data["quest_starter"] = Datasworn::to_json_data(quest_starter)
      data["max"] = Datasworn::to_json_data(max) unless max.nil?
      data["min"] = Datasworn::to_json_data(min) unless min.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["table"] = Datasworn::to_json_data(table) unless table.nil?
      data
    end
  end

  class TruthOptionID
    attr_accessor :value

    def self.from_json_data(data)
      out = TruthOptionID.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  class TruthOptionTableRow
    attr_accessor :max
    attr_accessor :min
    attr_accessor :result
    attr_accessor :description
    attr_accessor :embed_table
    attr_accessor :i18n
    attr_accessor :icon
    attr_accessor :rolls
    attr_accessor :suggestions
    attr_accessor :summary
    attr_accessor :template

    def self.from_json_data(data)
      out = TruthOptionTableRow.new
      out.max = Datasworn::from_json_data(Integer, data["max"])
      out.min = Datasworn::from_json_data(Integer, data["min"])
      out.result = Datasworn::from_json_data(MarkdownString, data["result"])
      out.description = Datasworn::from_json_data(MarkdownString, data["description"])
      out.embed_table = Datasworn::from_json_data(OracleTableID, data["embed_table"])
      out.i18n = Datasworn::from_json_data(I18nHints, data["i18n"])
      out.icon = Datasworn::from_json_data(SvgimageURL, data["icon"])
      out.rolls = Datasworn::from_json_data(Array[OracleTableRoll], data["rolls"])
      out.suggestions = Datasworn::from_json_data(Suggestions, data["suggestions"])
      out.summary = Datasworn::from_json_data(MarkdownString, data["summary"])
      out.template = Datasworn::from_json_data(OracleRollTemplate, data["template"])
      out
    end

    def to_json_data
      data = {}
      data["max"] = Datasworn::to_json_data(max)
      data["min"] = Datasworn::to_json_data(min)
      data["result"] = Datasworn::to_json_data(result)
      data["description"] = Datasworn::to_json_data(description) unless description.nil?
      data["embed_table"] = Datasworn::to_json_data(embed_table) unless embed_table.nil?
      data["i18n"] = Datasworn::to_json_data(i18n) unless i18n.nil?
      data["icon"] = Datasworn::to_json_data(icon) unless icon.nil?
      data["rolls"] = Datasworn::to_json_data(rolls) unless rolls.nil?
      data["suggestions"] = Datasworn::to_json_data(suggestions) unless suggestions.nil?
      data["summary"] = Datasworn::to_json_data(summary) unless summary.nil?
      data["template"] = Datasworn::to_json_data(template) unless template.nil?
      data
    end
  end

  # A relative URL pointing to a raster image in the WEBP format.
  class WebpimageURL
    attr_accessor :value

    def self.from_json_data(data)
      out = WebpimageURL.new
      out.value = Datasworn.from_json_data(String, data)
      out
    end

    def to_json_data
      Datasworn.to_json_data(value)
    end
  end

  private

  def self.from_json_data(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type == DateTime
      DateTime.rfc3339(data)
    elsif type.is_a?(Array)
      data.map { |elem| from_json_data(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json_data(type.values.first, elem) }
    else
      type.from_json_data(data)
    end
  end

  def self.to_json_data(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(DateTime)
      data.rfc3339
    elsif data.is_a?(Array)
      data.map { |elem| to_json_data(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json_data(elem) }
    else
      data.to_json_data
    end
  end
end
