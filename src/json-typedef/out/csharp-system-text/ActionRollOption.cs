// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(ActionRollOptionJsonConverter))]
    public abstract class ActionRollOption
    {
    }

    public class ActionRollOptionJsonConverter : JsonConverter<ActionRollOption>
    {
        public override ActionRollOption Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("using").GetString();

            switch (tagValue)
            {
                case "asset_control":
                    return JsonSerializer.Deserialize<ActionRollOptionAssetControl>(ref readerCopy, options);
                case "asset_option":
                    return JsonSerializer.Deserialize<ActionRollOptionAssetOption>(ref readerCopy, options);
                case "attached_asset_control":
                    return JsonSerializer.Deserialize<ActionRollOptionAttachedAssetControl>(ref readerCopy, options);
                case "attached_asset_option":
                    return JsonSerializer.Deserialize<ActionRollOptionAttachedAssetOption>(ref readerCopy, options);
                case "condition_meter":
                    return JsonSerializer.Deserialize<ActionRollOptionConditionMeter>(ref readerCopy, options);
                case "custom":
                    return JsonSerializer.Deserialize<ActionRollOptionCustom>(ref readerCopy, options);
                case "stat":
                    return JsonSerializer.Deserialize<ActionRollOptionStat>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad Using value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, ActionRollOption value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
