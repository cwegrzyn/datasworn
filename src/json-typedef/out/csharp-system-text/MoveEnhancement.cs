// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Datasworn
{
    [JsonConverter(typeof(MoveEnhancementJsonConverter))]
    public abstract class MoveEnhancement
    {
    }

    public class MoveEnhancementJsonConverter : JsonConverter<MoveEnhancement>
    {
        public override MoveEnhancement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("roll_type").GetString();

            switch (tagValue)
            {
                case "action_roll":
                    return JsonSerializer.Deserialize<MoveEnhancementActionRoll>(ref readerCopy, options);
                case "no_roll":
                    return JsonSerializer.Deserialize<MoveEnhancementNoRoll>(ref readerCopy, options);
                case "progress_roll":
                    return JsonSerializer.Deserialize<MoveEnhancementProgressRoll>(ref readerCopy, options);
                case "special_track":
                    return JsonSerializer.Deserialize<MoveEnhancementSpecialTrack>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad RollType value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, MoveEnhancement value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
