// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Datasworn;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.Map;

/**
 * Describes enhancements made to this asset in a partial asset object. The
 * changes should be applied recursively; only the values that are specified
 * should be changed.
 */
@JsonSerialize
public class AssetEnhancement {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("attachments")
    private AssetAttachment attachments;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("controls")
    private Map<String, AssetControlFieldEnhancement> controls;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("count_as_impact")
    private Boolean countAsImpact;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("shared")
    private Boolean shared;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("suggestions")
    private Suggestions suggestions;

    public AssetEnhancement() {
    }

    /**
     * Getter for attachments.<p>
     */
    public AssetAttachment getAttachments() {
        return attachments;
    }

    /**
     * Setter for attachments.<p>
     */
    public void setAttachments(AssetAttachment attachments) {
        this.attachments = attachments;
    }

    /**
     * Getter for controls.<p>
     * Controls are condition meters, clocks, counters, and other asset input
     * fields whose values are expected to change throughout the life of the
     * asset.
     */
    public Map<String, AssetControlFieldEnhancement> getControls() {
        return controls;
    }

    /**
     * Setter for controls.<p>
     * Controls are condition meters, clocks, counters, and other asset input
     * fields whose values are expected to change throughout the life of the
     * asset.
     */
    public void setControls(Map<String, AssetControlFieldEnhancement> controls) {
        this.controls = controls;
    }

    /**
     * Getter for countAsImpact.<p>
     * If `true`, this asset counts as an impact (Starforged) or a debility
     * (classic Ironsworn).
     */
    public Boolean getCountAsImpact() {
        return countAsImpact;
    }

    /**
     * Setter for countAsImpact.<p>
     * If `true`, this asset counts as an impact (Starforged) or a debility
     * (classic Ironsworn).
     */
    public void setCountAsImpact(Boolean countAsImpact) {
        this.countAsImpact = countAsImpact;
    }

    /**
     * Getter for shared.<p>
     * Most assets only benefit to their owner, but certain assets (like
     * Starforged's module and command vehicle assets) are shared amongst the
     * player's allies, too.
     */
    public Boolean getShared() {
        return shared;
    }

    /**
     * Setter for shared.<p>
     * Most assets only benefit to their owner, but certain assets (like
     * Starforged's module and command vehicle assets) are shared amongst the
     * player's allies, too.
     */
    public void setShared(Boolean shared) {
        this.shared = shared;
    }

    /**
     * Getter for suggestions.<p>
     */
    public Suggestions getSuggestions() {
        return suggestions;
    }

    /**
     * Setter for suggestions.<p>
     */
    public void setSuggestions(Suggestions suggestions) {
        this.suggestions = suggestions;
    }
}
