// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Dataforged;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * Extends or upgrades an outcome from an existing move.
 */
@JsonSerialize
public class MoveOutcomeMatchableExtension {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("count_as")
    private MoveOutcomeType countAs;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("match")
    private MoveOutcomeExtension match;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("reroll")
    private MoveOutcomeMatchableExtensionReroll reroll;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("text")
    private MarkdownString text;

    public MoveOutcomeMatchableExtension() {
    }

    /**
     * Getter for countAs.<p>
     */
    public MoveOutcomeType getCountAs() {
        return countAs;
    }

    /**
     * Setter for countAs.<p>
     */
    public void setCountAs(MoveOutcomeType countAs) {
        this.countAs = countAs;
    }

    /**
     * Getter for match.<p>
     */
    public MoveOutcomeExtension getMatch() {
        return match;
    }

    /**
     * Setter for match.<p>
     */
    public void setMatch(MoveOutcomeExtension match) {
        this.match = match;
    }

    /**
     * Getter for reroll.<p>
     */
    public MoveOutcomeMatchableExtensionReroll getReroll() {
        return reroll;
    }

    /**
     * Setter for reroll.<p>
     */
    public void setReroll(MoveOutcomeMatchableExtensionReroll reroll) {
        this.reroll = reroll;
    }

    /**
     * Getter for text.<p>
     */
    public MarkdownString getText() {
        return text;
    }

    /**
     * Setter for text.<p>
     */
    public void setText(MarkdownString text) {
        this.text = text;
    }
}
