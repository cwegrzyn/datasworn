{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Datasworn",
	"description": "Describes game rules elements compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.",
	"definitions": {
		"ID": {
			"title": "Id",
			"type": "string",
			"$comment": "{namespace}/{element}/{*}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/(\\/[a-z][a-z_]*[a-z]){2,}$"
		},
		"Ruleset": {
			"title": "Ruleset",
			"type": "string",
			"enum": ["classic", "starforged"]
		},
		"Title": {
			"title": "Title",
			"type": "object",
			"required": ["canonical"],
			"additionalProperties": false,
			"properties": {
				"canonical": { "$ref": "#/definitions/Label" },
				"standard": { "$ref": "#/definitions/Label" },
				"short": { "$ref": "#/definitions/Label" }
			}
		},
		"Color": {
			"title": "Color",
			"type": "string",
			"pattern": "^#([0-9A-f]{2}){3}$",
			"description": "A CSS hexadecimal color. Use it to provide thematic accents when rendering this item."
		},
		"Icon": {
			"title": "Icon",
			"type": "string",
			"format": "url",
			"description": "A relative URL pointing to an SVG icon.",
			"pattern": "^.+\\.svg$"
		},
		"Image": {
			"title": "Image",
			"type": "string",
			"format": "url",
			"description": "A relative URL pointing to a WEBP image.",
			"pattern": "^.+\\.webp$"
		},
		"Source": {
			"title": "Source",
			"type": "object",
			"description": "Metadata describing the source of this item's text content ",
			"required": ["title", "url", "authors", "date", "license"],
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"url": {
					"type": "string",
					"description": "The URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": { "type": "string", "examples": ["Shawn Tomkin"] }
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"type": ["string", "null"],
					"description": "An absolute URL pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					]
				}
			}
		},
		"Label": {
			"title": "Label",
			"type": "string",
			"description": "A localized plain text name or label."
		},
		"MarkdownPhrase": {
			"title": "Markdown phrase",
			"type": "string",
			"description": "Localized markdown text, usually a phrase or single sentence."
		},
		"MarkdownSentences": {
			"title": "Markdown sentences",
			"type": "string",
			"description": "Localized markdown text, usually a few sentences at most."
		},
		"MarkdownParagraph": {
			"title": "Markdown paragraph",
			"type": "string",
			"description": "Localized markdown text, usually one paragraph. This may included ordered or unordered lists."
		},
		"MarkdownParagraphs": {
			"title": "Markdown paragraphs",
			"type": "string",
			"description": "Localized markdown text, usually multiple paragraphs. This may include ordered or unordered lists."
		},
		"ChallengeRank": {
			"title": "Challenge rank",
			"type": "integer",
			"description": "Enumerates challenge ranks: 1=troublesome; 2=dangerous; 3=formidable; 4=extreme; 5=epic.",
			"enum": [1, 2, 3, 4, 5]
		},
		"AssetID": {
			"title": "Asset ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"Asset": {
			"title": "Asset",
			"type": "object",
			"required": ["_id", "name", "source", "abilities"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/AssetID" },
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Attribute" }
					}
				},
				"name": { "$ref": "#/definitions/Label" },
				"source": { "$ref": "#/definitions/Source" },
				"attachments": { "$ref": "#/definitions/AssetAttachment" },
				"requirement": { "$ref": "#/definitions/MarkdownPhrase" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"abilities": {
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": { "$ref": "#/definitions/AssetAbility" }
				}
			}
		},
		"AssetAttachment": {
			"title": "Asset attachment",
			"description": "Describes which assets can be attached to this asset. The \"canonical\" example for this are Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"type": "object",
			"required": ["patterns", "max"],
			"properties": {
				"max": {
					"title": "Maximum attached assets",
					"description": "If there's no upper limit to the number of attached assets, this is `null`.",
					"type": ["integer", "null"],
					"minimum": 1,
					"default": null
				},
				"patterns": {
					"title": "Attached asset ID patterns",
					"description": "Regular expressions matching the IDs of assets that can be attached to this asset.",
					"type": "array",
					"items": {
						"type": "string",
						"format": "regex",
						"examples": [
							"^[a-z0-9][a-z0-9_]+\\/assets\\/module\\/[a-z][a-z_]*[a-z]$"
						]
					}
				}
			}
		},
		"AssetAbilityID": {
			"title": "Asset ability ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"AssetAbility": {
			"title": "Asset ability",
			"type": "object",
			"required": ["_id", "text"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/AssetAbilityID" },
				"name": { "$ref": "#/definitions/Label" },
				"text": { "$ref": "#/definitions/MarkdownParagraph" },
				"attachments": { "$ref": "#/definitions/AssetAttachment" },
				"enabled": { "type": "boolean", "default": false },
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Attribute" }
					}
				},
				"extend_moves": {
					"type": "array",
					"items": { "$ref": "#/definitions/MoveExtension" }
				},
				"moves": {
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Move" }
					}
				}
			}
		},
		"AssetTypeID": {
			"title": "Asset type ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/assets(\\/[a-z][a-z_]*[a-z]){1}$",
			"examples": [
				"starforged/collections/assets/command_vehicle",
				"ironsworn/collections/assets/companion"
			]
		},
		"AssetType": {
			"title": "Asset type",
			"type": "object",
			"required": ["_id", "title", "source", "contents"],
			"properties": {
				"_id": { "$ref": "#/definitions/AssetTypeID" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Asset" }
					}
				}
			}
		},
		"AssetTypeExtension": {
			"title": "Asset type extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends", "_id"],
			"properties": {
				"_id": { "$ref": "#/definitions/AssetTypeID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/definitions/AssetTypeID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Asset" }
					}
				}
			}
		},
		"OracleCollectionID": {
			"title": "Oracle collection ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/oracles(\\/[a-z][a-z_]*[a-z]){1,3}$",
			"examples": [
				"starforged/collections/oracles/core",
				"starforged/collections/oracles/character/names",
				"starforged/collections/oracles/planets/furnace/settlements"
			]
		},
		"OracleTableID": {
			"title": "Oracle table ID",
			"type": "string",
			"$comment": "{namespace}/oracles/{...collections}/{oracle}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}$",
			"examples": [
				"starforged/oracles/core/action",
				"starforged/oracles/character/names/given",
				"starforged/oracles/planets/furnace/settlements/terminus"
			]
		},
		"OracleTableColumn": {
			"title": "Oracle table column",
			"type": "object",
			"required": ["content_type"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range: 'low' to 'high'.\n\n'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/definitions/Label" }
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/definitions/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/definitions/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/definitions/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/definitions/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleCollectionColumn": {
			"title": "Oracle collection column",
			"type": "object",
			"required": ["content_type", "table_key"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range: 'low' to 'high'.\n\n'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/definitions/Label" },
				"table_key": {
					"description": "A key from OracleCollection#contents, indicating which OracleTable's data is used in this column.",
					"type": "string",
					"pattern": "^[a-z][a-z_]*[a-z]$"
				},
				"color": { "$ref": "#/definitions/Color" }
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/definitions/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/definitions/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/definitions/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/definitions/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleTableRendering": {
			"title": "Oracle table rendering",
			"type": "object",
			"additionalProperties": false,
			"default": {
				"style": "table",
				"columns": {
					"roll": { "content_type": "range", "label": "Roll" },
					"result": { "content_type": "result", "label": "Result" }
				}
			},
			"properties": {
				"style": {
					"type": "string",
					"description": "The style used to render this table in the source material.\n\n        * embed_as_column: This table appears as a column of a table handled by its OracleCollection parent.\n        * embed_in_row: This table appears in its entirety within the row of another table. Canonical examples appear in the Ironsworn Rulebook and Ironsworn: Delve.\n        * table: A standard table, typically with a roll column and a result column.\n        ",
					"enum": ["embed_as_column", "embed_in_row", "table"],
					"default": "table"
				},
				"icon": { "$ref": "#/definitions/Icon" },
				"color": { "$ref": "#/definitions/Color" },
				"columns": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/OracleTableColumn" }
					},
					"default": {
						"roll": { "content_type": "range", "label": "Roll" },
						"result": { "content_type": "result", "label": "Result" }
					}
				}
			}
		},
		"OracleTable": {
			"title": "Oracle table",
			"type": "object",
			"required": ["_id", "title", "source", "table"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/OracleTableID" },
				"_template": { "type": "string" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"rendering": { "$ref": "#/definitions/OracleTableRendering" },
				"match": {
					"title": "Oracle match behavior",
					"description": "A handful of oracles have special behavior on a match.",
					"type": "object",
					"required": ["text"],
					"properties": {
						"text": { "$ref": "#/definitions/MarkdownSentences" }
					}
				},
				"table": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRow" }
				}
			}
		},
		"OracleTableRoll": {
			"title": "Oracle table roll",
			"type": "object",
			"description": "Parameters for an oracle roll.",
			"properties": {
				"oracle": {
					"default": null,
					"oneOf": [
						{ "type": "null" },
						{ "$ref": "#/definitions/OracleTableID" }
					]
				},
				"times": {
					"description": "The number of times to roll.",
					"type": "integer",
					"minimum": 1,
					"default": 1
				},
				"method": { "$ref": "#/definitions/OracleTableRollMethod" }
			}
		},
		"OracleTableRollMethod": {
			"title": "Oracle table roll method",
			"description": "\n  no_duplicates = Reroll duplicate OracleTableRows\n  allow_duplicates = Don't reroll duplicate OracleTableRows\n  make_it_worse = Don't reroll duplicate OracleTableRows; duplicates compound.\n  ",
			"type": "string",
			"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"],
			"default": "no_duplicates"
		},
		"OracleTableRowID": {
			"title": "Oracle table row ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}\\/[0-9]{1,3}-[0-9]{1,3}$",
			"examples": ["ironsworn/oracles/action_and_theme/action/1-1"]
		},
		"OracleTableRow": {
			"title": "Oracle table row",
			"type": "object",
			"description": "Represents a row from an oracle table.",
			"required": ["_id", "low", "high", "result"],
			"additionalProperties": false,
			"properties": {
				"low": {
					"description": "The low end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"high": {
					"description": "The high end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"result": {
					"title": "Result text",
					"$ref": "#/definitions/MarkdownPhrase"
				},
				"icon": { "$ref": "#/definitions/Icon" },
				"summary": {
					"title": "Summary text",
					"description": "A secondary markdown string that must be presented to the user for the implementation to be complete, but may benefit from progressive disclosure (such as a collapsible element, popover/tooltip, etc).\n\n`null` is used in cases where an 'empty' `OracleTableRow#summary` exists (example: Starship Type, Starforged rulebook p. 326). In the book, these table cells are rendered with the text `--` (and this is the recommended placeholder for tabular display). For display as a single result (e.g. VTT roll output), however, `null` values can be safely omitted.",
					"anyOf": [
						{ "$ref": "#/definitions/MarkdownSentences" },
						{ "type": "null" }
					]
				},
				"description": {
					"$ref": "#/definitions/MarkdownParagraphs",
					"title": "Extended description",
					"description": "An extended description for this oracle table row. No canonical OracleTableRows use it, but some TruthOptions do."
				},
				"embed_table": {
					"$ref": "#/definitions/OracleTableID",
					"description": "A table to be rendered inside this table row."
				},
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRoll" }
				},
				"template": { "$ref": "#/definitions/OracleRollTemplate" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"_id": { "$ref": "#/definitions/OracleTableRowID" }
			},
			"oneOf": [
				{
					"title": "OracleTableRowStub",
					"properties": {
						"_id": { "const": null },
						"low": { "const": null },
						"high": { "const": null }
					}
				},
				{
					"properties": {
						"_id": { "type": "string" },
						"low": { "type": "integer" },
						"high": { "type": "integer" }
					}
				}
			]
		},
		"OracleRollTemplate": {
			"title": "Oracle roll template",
			"type": "object",
			"description": "Provides string templates that may be used in place of the static row text from `OracleTableRow#result`, `OracleTableRow#summary`, and `OracleTableRow#description`.\n\nThese strings are formatted in Markdown, but use a special syntax for their placeholders: `{{roll:some_oracle_table_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleTableRow#result` from the target oracle table ID.",
			"properties": {
				"result": {
					"$ref": "#/definitions/MarkdownPhrase",
					"description": "A string template that may be used in place of OracleTableRow#result.",
					"examples": [
						"{{roll:starforged/oracles/factions/affiliation}} of the {{roll:starforged/oracles/factions/legacy}} {{roll:starforged/oracles/factions/identity}}"
					]
				},
				"summary": {
					"$ref": "#/definitions/MarkdownSentences",
					"description": "A string template that may be used in place of OracleTableRow#summary."
				},
				"description": {
					"$ref": "#/definitions/MarkdownParagraphs",
					"description": "A string template that may be used in place of OracleTableRow#description."
				}
			}
		},
		"OracleCollection": {
			"title": "Oracle collection",
			"type": "object",
			"required": ["_id", "title", "source", "contents"],
			"properties": {
				"_id": { "$ref": "#/definitions/OracleCollectionID" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/OracleTable" }
					}
				},
				"_template": { "type": "string" },
				"template": { "$ref": "#/definitions/OracleRollTemplate" },
				"rendering": {
					"type": "object",
					"description": "Some oracle collections are rendered as a single table in the source material. If so, parameters for rendering that table are included here.",
					"properties": {
						"icon": { "$ref": "#/definitions/Icon" },
						"style": {
							"oneOf": [
								{ "enum": ["multi_table"], "type": "string" },
								{ "type": "null" }
							],
							"default": null
						},
						"columns": {
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*[a-z]$": {
									"description": "A column's default label is the title of the source table.",
									"$ref": "#/definitions/OracleCollectionColumn"
								}
							}
						}
					}
				},
				"sample_names": { "type": "array", "items": { "type": "string" } },
				"collections": {
					"description": "OracleCollections contained by this OracleCollection.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				}
			},
			"additionalProperties": false,
			"oneOf": [
				{
					"not": {
						"required": ["_template"],
						"properties": { "_template": { "type": "string" } }
					}
				},
				{ "$ref": "#/definitions/OracleCollectionTemplate" }
			]
		},
		"OracleCollectionExtension": {
			"title": "Oracle collection extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends", "_id"],
			"properties": {
				"_id": { "$ref": "#/definitions/OracleCollectionID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/definitions/OracleCollectionID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/OracleTable" }
					}
				},
				"collections": {
					"type": "object",
					"description": "Collections (and/or collection extensions) to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				}
			},
			"oneOf": [
				{
					"not": {
						"required": ["_template"],
						"properties": { "_template": { "type": "string" } }
					}
				},
				{ "$ref": "#/definitions/OracleCollectionTemplate" }
			]
		},
		"StatID": {
			"title": "Stat ID",
			"type": "string",
			"description": "ID for a standard player character stat.",
			"enum": [
				"player/stats/edge",
				"player/stats/heart",
				"player/stats/iron",
				"player/stats/shadow",
				"player/stats/wits"
			]
		},
		"ConditionMeterID": {
			"title": "Condition meter ID",
			"type": "string",
			"description": "ID for a standard player character condition meter.",
			"enum": [
				"player/condition_meters/health",
				"player/condition_meters/spirit",
				"player/condition_meters/supply"
			]
		},
		"EncounterNatureClassic": {
			"title": "Encounter nature (Classic)",
			"type": "string",
			"examples": [
				"Ironlander",
				"firstborn",
				"animal",
				"beast",
				"horror",
				"anomaly"
			]
		},
		"EncounterClassicID": {
			"title": "Encounter (Classic) ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){2}$",
			"examples": [
				"ironsworn/encounters/firstborn/elf",
				"ironsworn_delve/encounters/anomalies/glimmer"
			]
		},
		"EncounterID": {
			"title": "Encounter ID",
			"oneOf": [
				{
					"type": "string",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){2}$",
					"examples": [
						"ironsworn/encounters/firstborn/elf",
						"ironsworn_delve/encounters/anomalies/glimmer"
					]
				},
				{
					"type": "string",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters\\/[a-z][a-z_]*[a-z](\\/variants\\/[a-z][a-z_]*[a-z])?$",
					"examples": [
						"starforged/encounters/chiton",
						"starforged/encounters/chiton/variants/chiton_drone_pack"
					]
				}
			]
		},
		"EncounterClassic": {
			"title": "Encounter (Classic)",
			"type": "object",
			"description": "An encounter entry, similar to those in Chapter 5 of the Ironsworn Rulebook.",
			"required": [
				"name",
				"nature",
				"rank",
				"features",
				"drives",
				"tactics",
				"description",
				"quest_starter",
				"source",
				"_id"
			],
			"properties": {
				"name": { "$ref": "#/definitions/Label" },
				"nature": { "$ref": "#/definitions/EncounterNatureClassic" },
				"rank": { "$ref": "#/definitions/ChallengeRank" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"drives": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"tactics": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"quest_starter": {
					"description": "A localizable markdown string describing the quest starter associated with this item.",
					"$ref": "#/definitions/MarkdownParagraphs"
				},
				"your_truths": { "$ref": "#/definitions/MarkdownSentences" },
				"source": { "$ref": "#/definitions/Source" },
				"_id": { "$ref": "#/definitions/EncounterClassicID" },
				"suggestions": { "$ref": "#/definitions/Suggestions" }
			}
		},
		"EncounterCollectionClassic": {
			"title": "Encounter collection (Classic)",
			"type": "object",
			"required": ["_id", "title", "source", "contents"],
			"properties": {
				"_id": { "$ref": "#/definitions/EncounterCollectionClassicID" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/EncounterClassic" }
					}
				}
			}
		},
		"EncounterCollectionExtensionClassic": {
			"title": "Encounter collection extension (Classic)",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends", "_id"],
			"properties": {
				"_id": { "$ref": "#/definitions/EncounterCollectionClassicID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/definitions/EncounterCollectionClassicID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/EncounterClassic" }
					}
				}
			}
		},
		"EncounterCollectionClassicID": {
			"title": "Encounter collection (Classic) ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/encounters(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"MoveID": {
			"title": "Move ID",
			"type": "string",
			"oneOf": [
				{
					"title": "Move ID",
					"type": "string",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/moves(\\/[a-z][a-z_]*[a-z]){2}$",
					"examples": ["starforged/moves/adventure/face_danger"]
				},
				{
					"title": "Asset move ID",
					"type": "string",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}\\/moves\\/[a-z][a-z_]*[a-z]$",
					"examples": ["starforged/assets/module/grappler/moves/ready_grappler"]
				}
			]
		},
		"MoveCategoryID": {
			"title": "Move category ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/moves\\/[a-z][a-z_]*[a-z]$",
			"examples": ["starforged/collections/moves/adventure"]
		},
		"MoveCategory": {
			"title": "Move category",
			"type": "object",
			"required": ["_id", "title", "source", "contents"],
			"properties": {
				"_id": { "$ref": "#/definitions/MoveCategoryID" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Move" }
					}
				}
			}
		},
		"MoveCategoryExtension": {
			"title": "Move category extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends", "_id"],
			"properties": {
				"_id": { "$ref": "#/definitions/MoveCategoryID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/definitions/MoveCategoryID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Move" }
					}
				}
			}
		},
		"MoveOutcomeType": {
			"title": "Move outcome type",
			"type": "string",
			"enum": ["miss", "weak_hit", "strong_hit"]
		},
		"RollableStatID": {
			"title": "Rollable stat ID",
			"oneOf": [
				{ "$ref": "#/definitions/StatID" },
				{ "$ref": "#/definitions/ConditionMeterID" },
				{ "$ref": "#/definitions/AttributeID" },
				{ "$ref": "#/definitions/ConditionMeterAlias" }
			]
		},
		"RollType": {
			"title": "Roll type",
			"type": "string",
			"enum": ["action_roll", "progress_roll"]
		},
		"RollMethod": {
			"title": "Roll method",
			"type": "string",
			"enum": ["any", "inherit", "highest", "lowest", "all"],
			"description": "`any`: When rolling with this move trigger option, the user picks which stat to use.\n\n`all`: When rolling with this move trigger option, *every* stat or progress track of the `using` key is rolled.\n\n`highest`: When rolling with this move trigger option, use the highest/best option from the `using` key.\n\n`lowest`: When rolling with this move trigger option, use the lowest/worst option from the `using` key.\n\n`inherit`: This move trigger option has no roll method of its own, and must inherit its roll from another move trigger option. If the parent's `Using` is defined, the inherited roll must use one of those stats/progress tracks."
		},
		"Move": {
			"title": "Move",
			"type": "object",
			"required": ["_id", "text", "name", "trigger", "source"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/MoveID" },
				"name": { "$ref": "#/definitions/Label" },
				"trigger": {
					"title": "Trigger",
					"type": "object",
					"required": ["text"],
					"additionalProperties": false,
					"properties": {
						"text": {
							"$ref": "#/definitions/MarkdownPhrase",
							"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary triggers (for specific stats or uses of an asset ability) are described in `options`."
						},
						"options": {
							"type": "array",
							"nullable": true,
							"items": {
								"title": "Trigger option",
								"type": "object",
								"required": ["roll_type", "method"],
								"additionalProperties": false,
								"properties": {
									"text": { "$ref": "#/definitions/MarkdownPhrase" },
									"roll_type": { "$ref": "#/definitions/RollType" },
									"method": {
										"default": "any",
										"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.",
										"oneOf": [
											{ "$ref": "#/definitions/RollMethod" },
											{ "$ref": "#/definitions/MoveOutcomeType" }
										]
									},
									"using": {
										"title": "Roll using",
										"type": "array",
										"items": { "type": "string" },
										"description": "The stat(s) or progress track(s) that may be rolled with this move trigger option."
									}
								},
								"oneOf": [
									{
										"properties": {
											"roll_type": { "const": "progress_roll" },
											"using": {
												"type": "array",
												"items": { "$ref": "#/definitions/ProgressType" }
											}
										}
									},
									{
										"properties": {
											"roll_type": { "const": "action_roll" },
											"using": {
												"type": "array",
												"items": { "$ref": "#/definitions/RollableStatID" }
											}
										}
									}
								]
							}
						},
						"by": {
							"title": "Triggered by",
							"type": "object",
							"description": "Information on who can trigger this item. Usually this is just the player, but some asset abilities can trigger from an Ally's move.",
							"additionalProperties": false,
							"default": { "player": true, "ally": false },
							"required": ["player", "ally"],
							"properties": {
								"player": { "type": "boolean", "default": true },
								"ally": { "type": "boolean", "default": false }
							}
						}
					}
				},
				"source": { "$ref": "#/definitions/Source" },
				"outcomes": {
					"title": "Move outcomes",
					"type": "object",
					"required": ["miss", "weak_hit", "strong_hit"],
					"properties": {
						"miss": {
							"type": "object",
							"required": ["text"],
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						},
						"weak_hit": {
							"type": "object",
							"required": ["text"],
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								}
							}
						},
						"strong_hit": {
							"type": "object",
							"required": ["text"],
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"text": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"progress_move": {
					"description": "Whether or not the move is a Progress Move. Progress moves roll two challenge dice against a progress score.",
					"type": "boolean",
					"default": false
				},
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Attribute" }
					}
				}
			},
			"oneOf": [
				{
					"properties": {
						"progress_move": { "const": true },
						"trigger": {
							"type": "object",
							"properties": {
								"options": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": { "roll_type": { "const": "progress_roll" } }
									}
								}
							}
						}
					}
				},
				{
					"properties": {
						"progress_move": { "const": false },
						"trigger": {
							"type": "object",
							"properties": {
								"options": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": { "roll_type": { "const": "action_roll" } }
									}
								}
							}
						}
					}
				}
			]
		},
		"MoveExtension": {
			"title": "Move extension",
			"required": ["_extends"],
			"type": "object",
			"properties": {
				"_id": { "$ref": "#/definitions/ID" },
				"_extends": {
					"type": ["array", "null"],
					"items": { "$ref": "#/definitions/MoveID" }
				},
				"progress_move": {
					"description": "Whether or not the move is a Progress Move. Progress moves roll two challenge dice against a progress score.",
					"type": "boolean",
					"default": false
				},
				"trigger": {
					"title": "Trigger",
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"text": {
							"$ref": "#/definitions/MarkdownPhrase",
							"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary triggers (for specific stats or uses of an asset ability) are described in `options`."
						},
						"options": {
							"type": "array",
							"nullable": true,
							"items": {
								"title": "Trigger option",
								"type": "object",
								"required": ["roll_type", "method"],
								"additionalProperties": false,
								"properties": {
									"text": { "$ref": "#/definitions/MarkdownPhrase" },
									"roll_type": { "$ref": "#/definitions/RollType" },
									"method": {
										"default": "any",
										"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.",
										"oneOf": [
											{ "$ref": "#/definitions/RollMethod" },
											{ "$ref": "#/definitions/MoveOutcomeType" }
										]
									},
									"using": {
										"title": "Roll using",
										"type": "array",
										"items": { "type": "string" },
										"description": "The stat(s) or progress track(s) that may be rolled with this move trigger option."
									}
								},
								"oneOf": [
									{
										"properties": {
											"roll_type": { "const": "progress_roll" },
											"using": {
												"type": "array",
												"items": { "$ref": "#/definitions/ProgressType" }
											}
										}
									},
									{
										"properties": {
											"roll_type": { "const": "action_roll" },
											"using": {
												"type": "array",
												"items": { "$ref": "#/definitions/RollableStatID" }
											}
										}
									}
								]
							}
						},
						"by": {
							"title": "Triggered by",
							"type": "object",
							"description": "Information on who can trigger this item. Usually this is just the player, but some asset abilities can trigger from an Ally's move.",
							"additionalProperties": false,
							"default": { "player": true, "ally": false },
							"required": ["player", "ally"],
							"properties": {
								"player": { "type": "boolean", "default": true },
								"ally": { "type": "boolean", "default": false }
							}
						}
					}
				},
				"text": { "$ref": "#/definitions/MarkdownParagraphs" },
				"outcomes": {
					"title": "Move outcomes",
					"type": "object",
					"properties": {
						"miss": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						},
						"weak_hit": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								}
							}
						},
						"strong_hit": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"text": { "$ref": "#/definitions/MarkdownParagraph" },
								"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
								"reroll": {
									"title": "Move reroll",
									"type": "object",
									"required": ["method"],
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownPhrase" },
										"method": {
											"title": "Move reroll method",
											"type": "string",
											"enum": [
												"any",
												"all",
												"challenge_die",
												"challenge_dice",
												"action_die"
											]
										}
									}
								},
								"match": {
									"type": "object",
									"required": ["text"],
									"additionalProperties": false,
									"properties": {
										"text": { "$ref": "#/definitions/MarkdownParagraph" },
										"count_as": { "$ref": "#/definitions/MoveOutcomeType" },
										"reroll": {
											"title": "Move reroll",
											"type": "object",
											"required": ["method"],
											"properties": {
												"text": { "$ref": "#/definitions/MarkdownPhrase" },
												"method": {
													"title": "Move reroll method",
													"type": "string",
													"enum": [
														"any",
														"all",
														"challenge_die",
														"challenge_dice",
														"action_die"
													]
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"CustomStat": { "title": "Custom stat" },
		"collectionSchema": { "title": "Collection schema" },
		"collectionExtensionSchema": { "title": "Collection extension schema" },
		"AttributeID": {
			"title": "Attribute ID",
			"type": "string",
			"oneOf": [
				{
					"title": "Move attribute ID",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/moves(\\/[a-z][a-z_]*[a-z]){2}\\/attributes\\/[a-z][a-z_]*[a-z]$"
				},
				{
					"title": "Asset attribute ID",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}\\/attributes\\/[a-z][a-z_]*[a-z]$"
				},
				{
					"title": "Asset move attribute ID",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}\\/moves\\/[a-z][a-z_]*[a-z]\\/attributes\\/[a-z][a-z_]*[a-z]$"
				}
			]
		},
		"InputPosition": {
			"title": "Input position",
			"default": "no_render",
			"enum": [
				"no_render",
				"card_top",
				"card_back",
				"card_bottom",
				"ability_0_right",
				"ability_1_right",
				"ability_2_right",
				"ability_0_bottom",
				"ability_1_bottom",
				"ability_2_bottom"
			],
			"type": "string"
		},
		"Attribute": {
			"title": "Attribute",
			"oneOf": [
				{ "$ref": "#/definitions/TextAttribute" },
				{ "$ref": "#/definitions/NumberRangeAttribute" },
				{ "$ref": "#/definitions/SelectAttribute" }
			]
		},
		"TextAttribute": {
			"title": "Text attribute",
			"type": "object",
			"description": "A text attribute that accepts a player-provided string of text. Recommended HTML element: <input type='text'>",
			"required": ["_id", "attribute_type", "label", "value", "position"],
			"properties": {
				"_id": { "$ref": "#/definitions/AttributeID" },
				"label": { "$ref": "#/definitions/Label" },
				"attribute_type": { "type": "string", "const": "text" },
				"position": { "$ref": "#/definitions/InputPosition" },
				"value": { "type": ["null", "string"], "default": null }
			}
		},
		"SelectAttribute": {
			"title": "Select attribute",
			"type": "object",
			"required": [
				"_id",
				"attribute_type",
				"label",
				"value",
				"position",
				"options"
			],
			"properties": {
				"_id": { "$ref": "#/definitions/AttributeID" },
				"label": { "$ref": "#/definitions/Label" },
				"attribute_type": { "$ref": "#/definitions/SelectAttributeType" },
				"options": { "type": "object" },
				"position": { "$ref": "#/definitions/InputPosition" },
				"value": {
					"anyOf": [
						{ "type": ["string", "null"] },
						{ "type": ["integer", "null"] }
					]
				}
			},
			"oneOf": [
				{
					"properties": {
						"attribute_type": { "const": "select_number" },
						"value": { "type": ["integer", "null"] },
						"options": {
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*[a-z]$": {
									"$ref": "#/definitions/SelectAttributeNumberOption"
								}
							}
						}
					}
				},
				{
					"properties": {
						"attribute_type": { "const": "select_reference" },
						"value": { "type": ["string", "null"] },
						"options": {
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*[a-z]$": {
									"$ref": "#/definitions/SelectAttributeReferenceOption"
								}
							}
						}
					}
				}
			]
		},
		"SelectAttributeNumberOption": {
			"title": "Select attribute number option",
			"required": ["label", "value"],
			"type": "object",
			"properties": {
				"label": { "$ref": "#/definitions/Label" },
				"value": { "type": "integer" }
			}
		},
		"SelectAttributeReferenceOption": {
			"title": "Select attribute reference option",
			"required": ["label", "value"],
			"type": "object",
			"properties": {
				"label": { "$ref": "#/definitions/Label" },
				"value": { "$ref": "#/definitions/RollableStatID" }
			}
		},
		"ClockSegments": {
			"title": "Clock segments",
			"type": "integer",
			"enum": [4, 6, 8, 10]
		},
		"NumberRangeAttribute": {
			"title": "Number range attribute",
			"type": "object",
			"required": [
				"_id",
				"attribute_type",
				"label",
				"min",
				"value",
				"max",
				"position"
			],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/AttributeID" },
				"attribute_type": { "$ref": "#/definitions/NumberRangeAttributeType" },
				"label": { "$ref": "#/definitions/Label" },
				"position": { "$ref": "#/definitions/InputPosition" },
				"min": { "type": "integer" },
				"value": { "type": "integer" },
				"max": { "type": ["integer", "null"], "nullable": true }
			},
			"oneOf": [
				{
					"title": "Number range attribute (clock)",
					"type": "object",
					"properties": {
						"attribute_type": { "const": "clock", "type": "string" },
						"min": { "const": 0, "type": "integer" },
						"value": {
							"default": 0,
							"type": "integer",
							"title": "Filled clock segments"
						},
						"max": {
							"$ref": "#/definitions/ClockSegments",
							"title": "Clock segments (total)"
						}
					}
				},
				{
					"title": "Number range attribute (condition meter)",
					"type": "object",
					"properties": {
						"attribute_type": { "type": "string", "const": "condition_meter" },
						"min": { "const": 0, "type": "integer" },
						"value": { "default": 0, "type": "integer" },
						"max": { "type": "integer" }
					}
				},
				{
					"title": "Number range attribute (counter)",
					"type": "object",
					"properties": {
						"attribute_type": { "type": "string", "const": "counter" },
						"min": { "const": 0, "type": "integer" },
						"value": { "default": 0, "type": "integer" },
						"max": { "type": ["integer", "null"], "default": null }
					}
				}
			]
		},
		"SelectAttributeType": {
			"title": "Select attribute type",
			"type": "string",
			"enum": ["select_number", "select_reference"]
		},
		"NumberRangeAttributeType": {
			"title": "Number range attribute type",
			"type": "string",
			"enum": ["condition_meter", "clock", "counter"]
		},
		"NumberRangeAttributeOverride": {
			"title": "Number range attribute override",
			"description": "Adjusts an existing numeric input, usually a condition meter",
			"type": "object",
			"additionalProperties": false,
			"required": ["_extends"],
			"properties": {
				"_extends": { "$ref": "#/definitions/AttributeID" },
				"min": { "type": "integer" },
				"max": { "type": "integer" },
				"value": { "type": "integer" }
			}
		},
		"OracleCollectionTemplate": {
			"title": "Oracle collection template",
			"type": "object",
			"oneOf": [
				{
					"type": "object",
					"required": ["_template", "contents"],
					"properties": {
						"_template": { "type": "string", "const": "LocationThemeOracles" },
						"contents": {
							"type": "object",
							"properties": {
								"feature": {
									"title": "LocationThemeFeatureOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemeFeatureOracle"
										},
										"table": {
											"type": "array",
											"minItems": 13,
											"maxItems": 13,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 8 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 9 },
														"high": { "type": "number", "const": 16 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 17 },
														"high": { "type": "number", "const": 24 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 25 },
														"high": { "type": "number", "const": 32 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 33 },
														"high": { "type": "number", "const": 40 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 41 },
														"high": { "type": "number", "const": 48 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 49 },
														"high": { "type": "number", "const": 56 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 57 },
														"high": { "type": "number", "const": 64 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 65 },
														"high": { "type": "number", "const": 72 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 73 },
														"high": { "type": "number", "const": 80 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 81 },
														"high": { "type": "number", "const": 88 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 89 },
														"high": { "type": "number", "const": 96 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 97 },
														"high": { "type": "number", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "string",
											"default": "Use this table to reveal a new aspect of the location."
										}
									}
								},
								"peril": {
									"title": "LocationThemePerilOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemePerilOracle"
										},
										"table": {
											"type": "array",
											"minItems": 12,
											"maxItems": 12,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 9 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 10 },
														"high": { "type": "number", "const": 18 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 19 },
														"high": { "type": "number", "const": 27 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 28 },
														"high": { "type": "number", "const": 36 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 37 },
														"high": { "type": "number", "const": 45 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 46 },
														"high": { "type": "number", "const": 54 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 55 },
														"high": { "type": "number", "const": 63 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 64 },
														"high": { "type": "number", "const": 72 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 73 },
														"high": { "type": "number", "const": 81 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 82 },
														"high": { "type": "number", "const": 90 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Action](starforged/oracles/core/action) + [Theme](starforged/oracles/core/theme)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/action"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/theme"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 91 },
														"high": { "type": "number", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "Roll twice"
														},
														"rolls": {
															"type": "array",
															"minItems": 1,
															"maxItems": 1,
															"items": [
																{
																	"type": "object",
																	"required": ["times"],
																	"properties": {
																		"_template": { "type": "string" },
																		"times": { "type": "number", "const": 2 }
																	}
																}
															]
														},
														"low": { "type": "number", "const": 99 },
														"high": { "type": "number", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "string",
											"default": "Use this table to help envision a complication or hazard."
										}
									}
								},
								"opportunity": {
									"title": "LocationThemeOpportunityOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemeOpportunityOracle"
										},
										"table": {
											"type": "array",
											"minItems": 5,
											"maxItems": 5,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 20 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 21 },
														"high": { "type": "number", "const": 40 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 41 },
														"high": { "type": "number", "const": 60 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 61 },
														"high": { "type": "number", "const": 80 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 81 },
														"high": { "type": "number", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "object",
											"default": {
												"canonical": "Opportunity",
												"summary": "Use this table to help envision a beneficial encounter or event, such as when rolling a strong hit with a match in a location."
											}
										}
									}
								}
							}
						}
					}
				},
				{
					"title": "PlanetOracles",
					"type": "object",
					"required": ["sample_names", "collections", "contents"],
					"properties": {
						"_template": { "type": "string", "const": "PlanetOracles" },
						"collections": {
							"type": "object",
							"required": ["settlements"],
							"properties": {
								"_template": { "type": "string" },
								"settlements": {
									"type": "object",
									"required": ["title", "contents"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": {
													"type": "string",
													"const": "Settlements"
												}
											}
										},
										"contents": {
											"type": "object",
											"required": ["terminus", "outlands", "expanse"],
											"properties": {
												"_template": { "type": "string" },
												"terminus": {
													"type": "object",
													"required": ["table", "title"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"title": {
															"type": "object",
															"required": ["canonical"],
															"properties": {
																"_template": { "type": "string" },
																"canonical": {
																	"type": "string",
																	"const": "Terminus"
																}
															}
														}
													}
												},
												"outlands": {
													"type": "object",
													"required": ["table", "title"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"title": {
															"type": "object",
															"required": ["canonical"],
															"properties": {
																"_template": { "type": "string" },
																"canonical": {
																	"type": "string",
																	"const": "Outlands"
																}
															}
														}
													}
												},
												"expanse": {
													"type": "object",
													"required": ["table", "title"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"title": {
															"type": "object",
															"required": ["canonical"],
															"properties": {
																"_template": { "type": "string" },
																"canonical": {
																	"type": "string",
																	"const": "Expanse"
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"contents": {
							"type": "object",
							"required": [
								"atmosphere",
								"observed_from_space",
								"feature",
								"life"
							],
							"properties": {
								"_template": { "type": "string" },
								"atmosphere": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": { "type": "string", "const": "Atmosphere" }
											}
										},
										"table": {
											"type": "array",
											"minItems": 6,
											"maxItems": 6,
											"items": [
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "None / thin"
														}
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Toxic" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Corrosive" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Marginal" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "Breathable"
														}
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Ideal" }
													}
												}
											]
										}
									}
								},
								"observed_from_space": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": {
													"type": "string",
													"const": "Observed From Space"
												}
											}
										},
										"table": {
											"type": "array",
											"minItems": 10,
											"maxItems": 10,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 11 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 12 },
														"high": { "type": "number", "const": 22 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 23 },
														"high": { "type": "number", "const": 33 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 34 },
														"high": { "type": "number", "const": 44 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 45 },
														"high": { "type": "number", "const": 55 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 56 },
														"high": { "type": "number", "const": 66 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 67 },
														"high": { "type": "number", "const": 77 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 78 },
														"high": { "type": "number", "const": 88 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 89 },
														"high": { "type": "number", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high", "result"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 99 },
														"high": { "type": "number", "const": 100 },
														"result": {
															"type": "string",
															"const": "Precursor Vault (orbital)"
														}
													}
												}
											]
										}
									}
								},
								"feature": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical", "short"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": {
													"type": "string",
													"const": "Planetside Feature"
												},
												"short": { "type": "string", "const": "Feature" }
											}
										},
										"table": {
											"type": "array",
											"minItems": 15,
											"maxItems": 15,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 7 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 8 },
														"high": { "type": "number", "const": 14 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 15 },
														"high": { "type": "number", "const": 21 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 22 },
														"high": { "type": "number", "const": 28 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 29 },
														"high": { "type": "number", "const": 35 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 36 },
														"high": { "type": "number", "const": 42 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 43 },
														"high": { "type": "number", "const": 49 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 50 },
														"high": { "type": "number", "const": 56 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 57 },
														"high": { "type": "number", "const": 63 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 64 },
														"high": { "type": "number", "const": 70 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 71 },
														"high": { "type": "number", "const": 77 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 78 },
														"high": { "type": "number", "const": 84 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 85 },
														"high": { "type": "number", "const": 91 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 92 },
														"high": { "type": "number", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high", "result"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 99 },
														"high": { "type": "number", "const": 100 },
														"result": {
															"type": "string",
															"const": "Precursor Vault (planetside)"
														}
													}
												}
											]
										}
									}
								},
								"life": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": { "type": "string", "const": "Life" }
											}
										},
										"table": {
											"type": "array",
											"minItems": 6,
											"maxItems": 6,
											"items": [
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "None" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Extinct" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Scarce" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Diverse" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Bountiful" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Overrun" }
													}
												}
											]
										}
									}
								}
							}
						},
						"sample_names": { "type": "array", "items": { "type": "string" } }
					}
				}
			]
		},
		"OracleTableTemplate": {
			"title": "Oracle table template",
			"type": "object",
			"oneOf": [
				{
					"title": "LocationOracle",
					"type": "object",
					"required": ["table"],
					"properties": {
						"_template": { "type": "string", "const": "LocationOracle" },
						"table": {
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": [
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Planetside" }
									}
								},
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Orbital" }
									}
								},
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Deep Space" }
									}
								}
							]
						}
					}
				}
			]
		},
		"ConditionMeterAlias": {
			"title": "Condition meter alias",
			"type": "string",
			"description": "Tags used to group  non-player condition meters (for e.g. companions and vehicles) that are referenced by moves and other assets.",
			"enum": ["companion_health", "attached_asset_meter"]
		},
		"ProgressType": {
			"title": "Progress type",
			"type": "string",
			"description": "Standard progress track types found in Ironsworn or Ironsworn: Delve",
			"enum": [
				"combat_progress",
				"vow_progress",
				"scene_challenge_progress",
				"journey_progress",
				"delve_progress",
				"bonds_progress"
			]
		},
		"SuggestionsBase": {
			"title": "Suggestions base",
			"description": "Related items that can be presented as useful shortcuts.",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"assets": {
					"title": "Suggested assets",
					"type": "array",
					"items": { "$ref": "#/definitions/AssetID" },
					"nullable": true
				},
				"moves": {
					"title": "Suggested moves",
					"type": "array",
					"items": { "$ref": "#/definitions/MoveID" },
					"nullable": true
				},
				"oracles": {
					"title": "Suggested oracle tables",
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableID" },
					"nullable": true
				}
			}
		},
		"Suggestions": {
			"title": "Suggestions",
			"description": "Related items that can be presented as useful shortcuts.",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"assets": {
					"title": "Suggested assets",
					"type": "array",
					"items": { "$ref": "#/definitions/AssetID" },
					"nullable": true
				},
				"moves": {
					"title": "Suggested moves",
					"type": "array",
					"items": { "$ref": "#/definitions/MoveID" },
					"nullable": true
				},
				"oracles": {
					"title": "Suggested oracle tables",
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableID" },
					"nullable": true
				},
				"regions": {
					"title": "Suggested regions",
					"type": "array",
					"items": { "$ref": "#/definitions/RegionEntryID" }
				},
				"encounters": {
					"title": "Suggested encounters",
					"type": "array",
					"items": { "$ref": "#/definitions/EncounterClassicID" }
				},
				"site_themes": {
					"title": "Suggested delve site themes",
					"type": "array",
					"items": { "$ref": "#/definitions/DelveSiteThemeID" }
				},
				"site_domains": {
					"title": "Suggested delve site domains",
					"type": "array",
					"items": { "$ref": "#/definitions/DelveSiteDomainID" }
				}
			}
		},
		"WorldTruthID": {
			"title": "World truth ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/world_truths\\/[a-z][a-z_]*[a-z]$",
			"examples": ["ironsworn/world_truths/iron"]
		},
		"WorldTruth": {
			"title": "World truth",
			"type": "object",
			"required": ["_id", "name", "source"],
			"properties": {
				"_id": { "$ref": "#/definitions/WorldTruthID" },
				"name": { "$ref": "#/definitions/Label" },
				"icon": { "$ref": "#/definitions/Icon" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"source": { "$ref": "#/definitions/Source" },
				"options": {
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": { "$ref": "#/definitions/WorldTruthOption" }
				}
			}
		},
		"WorldTruthOptionID": {
			"title": "World truth option ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/world_truths\\/[a-z][a-z_]*[a-z]\\/[0-2]$",
			"examples": ["ironsworn/world_truths/iron/0"]
		},
		"WorldTruthOption": {
			"title": "World truth option",
			"type": "object",
			"required": ["_id", "description", "quest_starter"],
			"properties": {
				"_id": { "$ref": "#/definitions/WorldTruthOptionID" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"quest_starter": { "$ref": "#/definitions/MarkdownParagraph" }
			}
		},
		"RegionEntryID": {
			"title": "Region entry ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/regions(\\/[a-z][a-z_]*[a-z]){1}$",
			"examples": ["ironsworn/regions/shattered_wastes"]
		},
		"RegionEntry": {
			"title": "Region entry",
			"type": "object",
			"description": "A region entry, like the Ironlands region entries found in classic Ironsworn.",
			"required": [
				"name",
				"summary",
				"features",
				"description",
				"quest_starter",
				"source",
				"_id"
			],
			"properties": {
				"_id": { "$ref": "#/definitions/RegionEntryID" },
				"name": { "$ref": "#/definitions/Label" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"quest_starter": { "$ref": "#/definitions/MarkdownParagraph" },
				"source": { "$ref": "#/definitions/Source" },
				"suggestions": { "$ref": "#/definitions/Suggestions" }
			}
		},
		"RarityID": {
			"title": "Rarity ID",
			"type": "string",
			"$comment": "{namespace}/rarities/{rarity}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/rarities(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"Rarity": {
			"title": "Rarity",
			"type": "object",
			"description": "A rarity, like those presented in Ironsworn: Delve.",
			"required": ["_id", "asset", "description", "name", "source", "xp_cost"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/RarityID" },
				"name": { "$ref": "#/definitions/Label" },
				"asset": {
					"description": "The asset enhanced by this rarity.",
					"$ref": "#/definitions/AssetID"
				},
				"icon": { "$ref": "#/definitions/Icon" },
				"xp_cost": {
					"description": "From Ironsworn: Delve, p. 174:\n\n    Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n    If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.",
					"type": "integer",
					"minimum": 3,
					"maximum": 5,
					"default": 3
				},
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"source": { "$ref": "#/definitions/Source" },
				"suggestions": { "$ref": "#/definitions/Suggestions" }
			}
		},
		"DelveSiteID": {
			"title": "Delve site ID",
			"type": "string",
			"$comment": "{namespace}/delve_sites/{delveSite}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/delve_sites(\\/[a-z][a-z_]*[a-z]){1}$",
			"examples": ["ironsworn_delve/delve_sites/alvas_rest"]
		},
		"DelveSiteCardType": {
			"title": "Delve site card type",
			"type": "string",
			"enum": ["theme", "domain"]
		},
		"DelveSite": {
			"title": "Delve site",
			"type": "object",
			"description": "A delve site with a theme, domain, and denizen table.",
			"required": [
				"name",
				"rank",
				"theme",
				"domain",
				"denizens",
				"source",
				"_id"
			],
			"properties": {
				"name": { "$ref": "#/definitions/Label" },
				"rank": { "$ref": "#/definitions/ChallengeRank" },
				"theme": { "$ref": "#/definitions/DelveSiteThemeID" },
				"domain": { "$ref": "#/definitions/DelveSiteDomainID" },
				"denizens": {
					"allOf": [
						{
							"type": "array",
							"items": { "$ref": "#/definitions/DelveSiteDenizen" }
						},
						{
							"type": "array",
							"minItems": 12,
							"maxItems": 12,
							"items": [
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "very_common" },
										"low": { "const": 1 },
										"high": { "const": 27 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "common" },
										"low": { "const": 28 },
										"high": { "const": 41 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "common" },
										"low": { "const": 42 },
										"high": { "const": 55 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "common" },
										"low": { "const": 56 },
										"high": { "const": 69 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "uncommon" },
										"low": { "const": 70 },
										"high": { "const": 75 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "uncommon" },
										"low": { "const": 76 },
										"high": { "const": 81 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "uncommon" },
										"low": { "const": 82 },
										"high": { "const": 87 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "uncommon" },
										"low": { "const": 88 },
										"high": { "const": 93 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "rare" },
										"low": { "const": 94 },
										"high": { "const": 95 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "rare" },
										"low": { "const": 96 },
										"high": { "const": 97 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "rare" },
										"low": { "const": 98 },
										"high": { "const": 99 }
									}
								},
								{
									"type": "object",
									"properties": {
										"frequency": { "const": "unforeseen" },
										"low": { "const": 100 },
										"high": { "const": 100 }
									}
								}
							]
						}
					]
				},
				"source": { "$ref": "#/definitions/Source" },
				"_id": { "$ref": "#/definitions/DelveSiteID" },
				"suggestions": { "$ref": "#/definitions/Suggestions" }
			}
		},
		"DelveSiteDenizen": {
			"title": "Delve site denizen",
			"type": "object",
			"description": "A denizen entry in a delve site.",
			"required": ["encounter", "frequency", "low", "high"],
			"properties": {
				"encounter": {
					"description": "The ID of the relevant encounter, or `null` if no encounter has been specified.",
					"oneOf": [
						{ "$ref": "#/definitions/EncounterClassicID" },
						{ "type": "null" }
					]
				},
				"name": { "$ref": "#/definitions/Label" },
				"frequency": {
					"title": "Frequency keyword",
					"type": "string",
					"enum": ["very_common", "common", "uncommon", "rare", "unforeseen"]
				},
				"low": { "type": "integer", "minimum": 1, "maximum": 100 },
				"high": { "type": "integer", "minimum": 1, "maximum": 100 }
			}
		},
		"DelveSiteCard": {
			"title": "Delve site card",
			"description": "Schema shared by delve site themes and delve site domains.",
			"type": "object",
			"additionalProperties": false,
			"required": [
				"card_type",
				"name",
				"summary",
				"features",
				"dangers",
				"source",
				"_id"
			],
			"properties": {
				"_id": { "type": "string" },
				"name": { "$ref": "#/definitions/Label" },
				"card_type": { "$ref": "#/definitions/DelveSiteCardType" },
				"icon": { "$ref": "#/definitions/Icon" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"source": { "$ref": "#/definitions/Source" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRow" }
				},
				"dangers": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRow" }
				}
			}
		},
		"DelveSiteThemeID": {
			"title": "Delve site theme ID",
			"type": "string",
			"$comment": "{namespace}/site_themes/{siteTheme}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/site_themes(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"DelveSiteTheme": {
			"title": "Delve site theme",
			"type": "object",
			"description": "A delve site theme card.",
			"allOf": [
				{ "$ref": "#/definitions/DelveSiteCard" },
				{
					"properties": {
						"_id": { "$ref": "#/definitions/DelveSiteThemeID" },
						"card_type": { "const": "theme" },
						"features": {
							"type": "array",
							"minItems": 5,
							"maxItems": 5,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 1 },
										"high": { "const": 4 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 5 },
										"high": { "const": 8 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 9 },
										"high": { "const": 12 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 13 },
										"high": { "const": 16 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 17 },
										"high": { "const": 20 }
									}
								}
							]
						},
						"dangers": {
							"type": "array",
							"minItems": 12,
							"maxItems": 12,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 1 },
										"high": { "const": 5 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 6 },
										"high": { "const": 10 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 11 },
										"high": { "const": 12 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 13 },
										"high": { "const": 14 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 15 },
										"high": { "const": 16 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 17 },
										"high": { "const": 18 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 19 },
										"high": { "const": 20 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 21 },
										"high": { "const": 22 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 23 },
										"high": { "const": 24 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 25 },
										"high": { "const": 26 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 27 },
										"high": { "const": 28 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 29 },
										"high": { "const": 30 }
									}
								}
							]
						}
					}
				}
			]
		},
		"DelveSiteDomainID": {
			"title": "Delve site domain ID",
			"type": "string",
			"$comment": "{namespace}/site_domains/{siteDomain}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/site_domains(\\/[a-z][a-z_]*[a-z]){1}$"
		},
		"DelveSiteDomain": {
			"title": "Delve site domain",
			"type": "object",
			"description": "A delve site domain card.",
			"allOf": [
				{ "$ref": "#/definitions/DelveSiteCard" },
				{
					"properties": {
						"_id": { "$ref": "#/definitions/DelveSiteDomainID" },
						"card_type": { "const": "domain" },
						"features": {
							"type": "array",
							"minItems": 12,
							"maxItems": 12,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 21 },
										"high": { "const": 43 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 44 },
										"high": { "const": 56 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 57 },
										"high": { "const": 64 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 65 },
										"high": { "const": 68 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 69 },
										"high": { "const": 72 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 73 },
										"high": { "const": 76 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 77 },
										"high": { "const": 80 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 81 },
										"high": { "const": 84 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 85 },
										"high": { "const": 88 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 89 },
										"high": { "const": 98 },
										"result": {
											"$ref": "#/definitions/MarkdownPhrase",
											"default": "Something unusual or unexpected"
										},
										"suggestions": {
											"$ref": "#/definitions/Suggestions",
											"default": {
												"oracles": [
													"ironsworn/oracles/action_and_theme/action",
													"ironsworn/oracles/action_and_theme/theme",
													"ironsworn_delve/oracles/feature/aspect",
													"ironsworn_delve/oracles/feature/focus"
												]
											}
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 99 },
										"high": { "const": 99 },
										"result": {
											"$ref": "#/definitions/MarkdownPhrase",
											"default": "You transition into a new theme"
										},
										"suggestions": {
											"$ref": "#/definitions/Suggestions",
											"default": {
												"oracles": ["ironsworn_delve/oracles/site_nature/theme"]
											}
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 100 },
										"high": { "const": 100 },
										"result": {
											"$ref": "#/definitions/MarkdownPhrase",
											"default": "You transition into a new domain"
										},
										"suggestions": {
											"$ref": "#/definitions/Suggestions",
											"default": {
												"oracles": [
													"ironsworn_delve/oracles/site_nature/domain"
												]
											}
										}
									}
								}
							]
						},
						"dangers": {
							"type": "array",
							"minItems": 5,
							"maxItems": 5,
							"items": [
								{
									"type": "object",
									"properties": {
										"low": { "const": 31 },
										"high": { "const": 33 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 34 },
										"high": { "const": 36 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 37 },
										"high": { "const": 39 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 40 },
										"high": { "const": 42 }
									}
								},
								{
									"type": "object",
									"properties": {
										"low": { "const": 43 },
										"high": { "const": 45 }
									}
								}
							]
						}
					}
				}
			]
		}
	},
	"type": "object",
	"additionalProperties": false,
	"patternProperties": {
		"^[a-z0-9][a-z0-9_]+$": {
			"title": "Namespace",
			"type": "object",
			"additionalProperties": false,
			"required": ["_ruleset", "_source"],
			"properties": {
				"_ruleset": {
					"description": "The ruleset (Starforged or Classic ironsworn) that these elements are for.",
					"const": "classic"
				},
				"_source": {
					"$ref": "#/definitions/Source",
					"description": "Source information to be inherited by all eligible descendants. Descendant '_source' properties will override only the properties they specify; use the 'source' property if you'd prefer to replace the entire object."
				},
				"oracles": {
					"title": "Oracles",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				},
				"moves": {
					"title": "Moves",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/MoveCategory" },
								{ "$ref": "#/definitions/MoveCategoryExtension" }
							]
						}
					}
				},
				"assets": {
					"title": "Assets",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/AssetType" },
								{ "$ref": "#/definitions/AssetTypeExtension" }
							]
						}
					}
				},
				"encounters": {
					"title": "Encounters",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/EncounterCollectionClassic" },
								{ "$ref": "#/definitions/EncounterCollectionExtensionClassic" }
							]
						}
					}
				},
				"world_truths": {
					"title": "World truths",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/WorldTruth" }
					}
				},
				"regions": {
					"title": "Regions",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/RegionEntry" }
					}
				},
				"site_themes": {
					"title": "Delve site themes",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/DelveSiteTheme" }
					}
				},
				"site_domains": {
					"title": "Delve site domains",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/DelveSiteDomain" }
					}
				},
				"delve_sites": {
					"title": "Delve sites",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/DelveSite" }
					}
				},
				"rarities": {
					"title": "Rarities",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Rarity" }
					}
				}
			}
		}
	}
}
