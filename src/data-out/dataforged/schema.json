{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Dataforged",
	"description": "Describes game rules elements compatible with the Ironsworn: Starforged tabletop role-playing game by Shawn Tomkin.",
	"definitions": {
		"ID": {
			"title": "Id",
			"type": "string",
			"$comment": "{namespace}/{element}/{*}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/(\\/[a-z][a-z_]*[a-z]){2,}$"
		},
		"Ruleset": {
			"title": "Ruleset",
			"type": "string",
			"enum": ["classic", "starforged"]
		},
		"Title": {
			"title": "Title",
			"type": "object",
			"required": ["canonical"],
			"additionalProperties": false,
			"properties": {
				"canonical": { "$ref": "#/definitions/Label" },
				"standard": { "$ref": "#/definitions/Label" },
				"short": { "$ref": "#/definitions/Label" }
			}
		},
		"Color": {
			"title": "Color",
			"type": "string",
			"pattern": "^#([0-9A-f]{2}){3}$",
			"description": "A CSS hexadecimal color. Use it to provide thematic accents when rendering this item."
		},
		"Icon": {
			"title": "Icon",
			"type": "string",
			"format": "url",
			"description": "A relative URL pointing to an SVG icon.",
			"pattern": "^.+\\.svg$"
		},
		"Image": {
			"title": "Image",
			"type": "string",
			"format": "url",
			"description": "A relative URL pointing to a WEBP image.",
			"pattern": "^.+\\.webp$"
		},
		"Source": {
			"title": "Source",
			"type": "object",
			"description": "Metadata describing the source of this item's text content ",
			"required": ["title", "url", "authors", "date", "license"],
			"properties": {
				"title": {
					"type": "string",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"page": {
					"description": "The page number on which this item appears most prominently, if applicable.",
					"type": "integer",
					"minimum": 1
				},
				"url": {
					"type": "string",
					"description": "The URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"authors": {
					"title": "Authors",
					"type": "array",
					"minItems": 1,
					"items": { "type": "string", "examples": ["Shawn Tomkin"] }
				},
				"date": {
					"type": "string",
					"format": "date",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating."
				},
				"license": {
					"type": ["string", "null"],
					"description": "An absolute URL pointing to the location where this element's license can be found. If it's \"null\", no license is provided -- use with caution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					]
				}
			}
		},
		"Label": {
			"title": "Label",
			"type": "string",
			"description": "A localized plain text name or label."
		},
		"MarkdownPhrase": {
			"title": "Markdown phrase",
			"type": "string",
			"description": "Localized markdown text, usually a phrase or single sentence."
		},
		"MarkdownSentences": {
			"title": "Markdown sentences",
			"type": "string",
			"description": "Localized markdown text, usually a few sentences at most."
		},
		"MarkdownParagraph": {
			"title": "Markdown paragraph",
			"type": "string",
			"description": "Localized markdown text, usually one paragraph. This may included ordered or unordered lists."
		},
		"MarkdownParagraphs": {
			"title": "Markdown paragraphs",
			"type": "string",
			"description": "Localized markdown text, usually multiple paragraphs. This may include ordered or unordered lists."
		},
		"ChallengeRank": {
			"title": "Challenge rank",
			"type": "integer",
			"description": "Enumerates challenge ranks: 1=troublesome; 2=dangerous; 3=formidable; 4=extreme; 5=epic.",
			"enum": [1, 2, 3, 4, 5]
		},
		"AssetID": {
			"title": "Asset ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"Asset": {
			"title": "Asset",
			"type": "object",
			"required": ["_id", "name", "source", "abilities"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/AssetID" },
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Attribute" }
					}
				},
				"name": { "$ref": "#/definitions/Label" },
				"source": { "$ref": "#/definitions/Source" },
				"attachments": { "$ref": "#/definitions/AssetAttachment" },
				"requirement": { "$ref": "#/definitions/MarkdownPhrase" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"abilities": {
					"type": "array",
					"minItems": 3,
					"maxItems": 3,
					"items": { "$ref": "#/definitions/AssetAbility" }
				}
			}
		},
		"AssetAttachment": {
			"title": "Asset attachment",
			"description": "Describes which assets can be attached to this asset. The \"canonical\" example for this are Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"type": "object",
			"required": ["patterns", "max"],
			"properties": {
				"max": {
					"title": "Maximum attached assets",
					"description": "If there's no upper limit to the number of attached assets, this is `null`.",
					"type": ["integer", "null"],
					"minimum": 1,
					"default": null
				},
				"patterns": {
					"title": "Attached asset ID patterns",
					"description": "Regular expressions matching the IDs of assets that can be attached to this asset.",
					"type": "array",
					"items": {
						"type": "string",
						"format": "regex",
						"examples": [
							"^[a-z0-9][a-z0-9_]+\\/assets\\/module\\/[a-z][a-z_]*[a-z]$"
						]
					}
				}
			}
		},
		"AssetAbilityID": {
			"title": "Asset ability ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/assets(\\/[a-z][a-z_]*[a-z]){2}$"
		},
		"AssetAbility": {
			"title": "Asset ability",
			"type": "object",
			"required": ["_id", "text"],
			"properties": {
				"_id": { "$ref": "#/definitions/AssetAbilityID" },
				"name": { "$ref": "#/definitions/Label" },
				"text": { "$ref": "#/definitions/MarkdownParagraph" },
				"attachments": { "$ref": "#/definitions/AssetAttachment" },
				"moves": {
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Move" }
					}
				}
			}
		},
		"AssetTypeID": {
			"title": "Asset type ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/assets(\\/[a-z][a-z_]*[a-z]){1}$",
			"examples": [
				"starforged/collections/assets/command_vehicle",
				"ironsworn/collections/assets/companion"
			]
		},
		"AssetType": {
			"title": "Asset type",
			"type": "object",
			"required": ["_id", "title", "source", "contents"],
			"properties": {
				"_id": { "$ref": "#/definitions/AssetTypeID" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Asset" }
					}
				}
			}
		},
		"AssetTypeExtension": {
			"title": "Asset type extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends", "_id"],
			"properties": {
				"_id": { "$ref": "#/definitions/AssetTypeID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/definitions/AssetTypeID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Asset" }
					}
				}
			}
		},
		"OracleCollectionID": {
			"title": "Oracle collection ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/oracles(\\/[a-z][a-z_]*[a-z]){1,3}$",
			"examples": [
				"starforged/collections/oracles/core",
				"starforged/collections/oracles/character/names",
				"starforged/collections/oracles/planets/furnace/settlements"
			]
		},
		"OracleTableID": {
			"title": "Oracle table ID",
			"type": "string",
			"$comment": "{namespace}/oracles/{...collections}/{oracle}",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}$",
			"examples": [
				"starforged/oracles/core/action",
				"starforged/oracles/character/names/given",
				"starforged/oracles/planets/furnace/settlements/terminus"
			]
		},
		"OracleTableColumn": {
			"title": "Oracle table column",
			"type": "object",
			"required": ["content_type"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range: 'low' to 'high'.\n\n'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/definitions/Label" }
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/definitions/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/definitions/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/definitions/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/definitions/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleCollectionColumn": {
			"title": "Oracle collection column",
			"type": "object",
			"required": ["content_type", "table_key"],
			"additionalProperties": false,
			"properties": {
				"content_type": {
					"type": "string",
					"description": "'range' displays the number range: 'low' to 'high'.\n\n'result', 'summary', and 'description' display the string value from the OracleTableRow's corresponding key.",
					"enum": ["result", "summary", "description", "range"]
				},
				"label": { "$ref": "#/definitions/Label" },
				"table_key": {
					"description": "A key from OracleCollection#contents, indicating which OracleTable's data is used in this column.",
					"type": "string",
					"pattern": "^[a-z][a-z_]*[a-z]$"
				}
			},
			"oneOf": [
				{
					"title": "OracleTableColumnRoll",
					"properties": {
						"content_type": { "const": "range" },
						"label": { "$ref": "#/definitions/Label", "default": "Roll" }
					}
				},
				{
					"title": "OracleTableColumnResult",
					"properties": {
						"content_type": { "const": "result" },
						"label": { "$ref": "#/definitions/Label", "default": "Result" }
					}
				},
				{
					"title": "OracleTableColumnSummary",
					"properties": {
						"content_type": { "const": "summary" },
						"label": { "$ref": "#/definitions/Label", "default": "Summary" }
					}
				},
				{
					"title": "OracleTableColumnDescription",
					"properties": {
						"content_type": { "const": "description" },
						"label": { "$ref": "#/definitions/Label", "default": "Description" }
					}
				}
			]
		},
		"OracleTableRendering": {
			"title": "Oracle table rendering",
			"type": "object",
			"additionalProperties": false,
			"default": {
				"style": "table",
				"columns": {
					"roll": { "content_type": "range", "label": "Roll" },
					"result": { "content_type": "result", "label": "Result" }
				}
			},
			"properties": {
				"style": {
					"type": "string",
					"description": "The style used to render this table in the source material.\n\n        * embed_as_column: This table appears as a column of a table handled by its OracleCollection parent.\n        * embed_in_row: This table appears in its entirety within the row of another table. Canonical examples appear in the Ironsworn Rulebook and Ironsworn: Delve.\n        * table: A standard table, typically with a roll column and a result column.\n        ",
					"enum": ["embed_as_column", "embed_in_row", "table"],
					"default": "table"
				},
				"icon": { "$ref": "#/definitions/Icon" },
				"color": { "$ref": "#/definitions/Color" },
				"columns": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/OracleTableColumn" }
					},
					"default": {
						"roll": { "content_type": "range", "label": "Roll" },
						"result": { "content_type": "result", "label": "Result" }
					}
				}
			}
		},
		"OracleTable": {
			"title": "Oracle table",
			"type": "object",
			"required": ["_id", "title", "source", "table"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/OracleTableID" },
				"_template": { "type": "string" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"rendering": { "$ref": "#/definitions/OracleTableRendering" },
				"match": {
					"title": "Oracle match behavior",
					"description": "A handful of oracles have special behavior on a match.",
					"type": "object",
					"required": ["text"],
					"properties": {
						"text": { "$ref": "#/definitions/MarkdownSentences" }
					}
				},
				"table": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRow" }
				}
			}
		},
		"OracleTableRoll": {
			"title": "Oracle table roll",
			"type": "object",
			"description": "Parameters for an oracle roll.",
			"properties": {
				"oracle": {
					"default": null,
					"oneOf": [
						{ "type": "null" },
						{ "$ref": "#/definitions/OracleTableID" }
					]
				},
				"times": {
					"description": "The number of times to roll.",
					"type": "integer",
					"minimum": 1,
					"default": 1
				},
				"method": { "$ref": "#/definitions/OracleTableRollMethod" }
			}
		},
		"OracleTableRollMethod": {
			"title": "Oracle table roll method",
			"description": "\n  no_duplicates = Reroll duplicate OracleTableRows\n  allow_duplicates = Don't reroll duplicate OracleTableRows\n  make_it_worse = Don't reroll duplicate OracleTableRows; duplicates compound.\n  ",
			"type": "string",
			"enum": ["no_duplicates", "keep_duplicates", "make_it_worse"],
			"default": "no_duplicates"
		},
		"OracleTableRowID": {
			"title": "Oracle table row ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/oracles(\\/[a-z][a-z_]*[a-z]){2,4}\\/[0-9]{1,3}-[0-9]{1,3}$",
			"examples": ["ironsworn/oracles/action_and_theme/action/1-1"]
		},
		"OracleTableRow": {
			"title": "Oracle table row",
			"type": "object",
			"description": "Represents a row from an oracle table.",
			"required": ["_id", "low", "high", "result"],
			"additionalProperties": false,
			"properties": {
				"low": {
					"description": "The low end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"high": {
					"description": "The high end of this row's roll range",
					"minimum": 1,
					"maximum": 100,
					"type": ["integer", "null"]
				},
				"result": {
					"title": "Result text",
					"$ref": "#/definitions/MarkdownPhrase"
				},
				"icon": { "$ref": "#/definitions/Icon" },
				"summary": {
					"title": "Summary text",
					"description": "A secondary markdown string that must be presented to the user for the implementation to be complete, but may benefit from progressive disclosure (such as a collapsible element, popover/tooltip, etc).\n\n`null` is used in cases where an 'empty' `OracleTableRow#summary` exists (example: Starship Type, Starforged rulebook p. 326). In the book, these table cells are rendered with the text `--` (and this is the recommended placeholder for tabular display). For display as a single result (e.g. VTT roll output), however, `null` values can be safely omitted.",
					"anyOf": [
						{ "$ref": "#/definitions/MarkdownSentences" },
						{ "type": "null" }
					]
				},
				"embed_table": {
					"$ref": "#/definitions/OracleTableID",
					"description": "A table to be rendered inside this table row."
				},
				"rolls": {
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableRoll" }
				},
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"_id": { "$ref": "#/definitions/OracleTableRowID" }
			}
		},
		"OracleCollection": {
			"title": "Oracle collection",
			"type": "object",
			"required": ["_id", "title", "source", "contents"],
			"properties": {
				"_id": { "$ref": "#/definitions/OracleCollectionID" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/OracleTable" }
					}
				},
				"_template": { "type": "string" },
				"rendering": {
					"type": "object",
					"description": "Some oracle collections are rendered as a single table in the source material. If so, parameters for rendering that table are included here.",
					"properties": {
						"icon": { "$ref": "#/definitions/Icon" },
						"style": {
							"oneOf": [
								{ "enum": ["multi_table"], "type": "string" },
								{ "type": "null" }
							],
							"default": null
						},
						"columns": {
							"type": "object",
							"patternProperties": {
								"^[a-z][a-z_]*[a-z]$": {
									"description": "A column's default label is the title of the source table.",
									"$ref": "#/definitions/OracleCollectionColumn"
								}
							}
						}
					}
				},
				"sample_names": { "type": "array", "items": { "type": "string" } },
				"collections": {
					"description": "OracleCollections contained by this OracleCollection.",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				}
			},
			"additionalProperties": false,
			"oneOf": [
				{
					"not": {
						"required": ["_template"],
						"properties": { "_template": { "type": "string" } }
					}
				},
				{ "$ref": "#/definitions/OracleCollectionTemplate" }
			]
		},
		"OracleCollectionExtension": {
			"title": "Oracle collection extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends", "_id"],
			"properties": {
				"_id": { "$ref": "#/definitions/OracleCollectionID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/definitions/OracleCollectionID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/OracleTable" }
					}
				},
				"collections": {
					"type": "object",
					"description": "Collections (and/or collection extensions) to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				}
			},
			"oneOf": [
				{
					"not": {
						"required": ["_template"],
						"properties": { "_template": { "type": "string" } }
					}
				},
				{ "$ref": "#/definitions/OracleCollectionTemplate" }
			]
		},
		"StatID": {
			"title": "Stat ID",
			"type": "string",
			"description": "ID for a standard player character stat.",
			"enum": [
				"player/stats/edge",
				"player/stats/heart",
				"player/stats/iron",
				"player/stats/shadow",
				"player/stats/wits"
			]
		},
		"ConditionMeterID": {
			"title": "Condition meter ID",
			"type": "string",
			"description": "ID for a standard player character condition meter.",
			"enum": [
				"player/condition_meters/health",
				"player/condition_meters/spirit",
				"player/condition_meters/supply"
			]
		},
		"EncounterNatureStarforged": {
			"title": "Encounter nature (Starforged)",
			"type": "string",
			"examples": [
				"creature",
				"horror",
				"human",
				"machine",
				"monster",
				"vehicle"
			]
		},
		"EncounterStarforgedID": {
			"title": "Encounter (Starforged) ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters\\/[a-z][a-z_]*[a-z](\\/variants\\/[a-z][a-z_]*[a-z])?$",
			"examples": [
				"starforged/encounters/chiton",
				"starforged/encounters/chiton/variants/chiton_drone_pack"
			]
		},
		"EncounterID": {
			"title": "Encounter ID",
			"oneOf": [
				{
					"type": "string",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters(\\/[a-z][a-z_]*[a-z]){2}$",
					"examples": [
						"ironsworn/encounters/firstborn/elf",
						"ironsworn_delve/encounters/anomalies/glimmer"
					]
				},
				{
					"type": "string",
					"pattern": "^[a-z0-9][a-z0-9_]+\\/encounters\\/[a-z][a-z_]*[a-z](\\/variants\\/[a-z][a-z_]*[a-z])?$",
					"examples": [
						"starforged/encounters/chiton",
						"starforged/encounters/chiton/variants/chiton_drone_pack"
					]
				}
			]
		},
		"EncounterStarforged": {
			"title": "Encounter (Starforged)",
			"type": "object",
			"description": "An encounter entry similar to those in Chapter 4 of Ironsworn: Starforged.",
			"required": [
				"name",
				"nature",
				"summary",
				"rank",
				"features",
				"drives",
				"tactics",
				"description",
				"quest_starter",
				"source",
				"_id"
			],
			"properties": {
				"name": { "$ref": "#/definitions/Label" },
				"nature": { "$ref": "#/definitions/EncounterNatureStarforged" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"rank": { "$ref": "#/definitions/ChallengeRank" },
				"features": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"drives": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"tactics": {
					"type": "array",
					"items": { "$ref": "#/definitions/MarkdownPhrase" }
				},
				"variants": {
					"title": "Encounter variants",
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/definitions/EncounterVariantStarforged"
						}
					}
				},
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"quest_starter": {
					"description": "A localizable markdown string describing the quest starter associated with this item.",
					"$ref": "#/definitions/MarkdownParagraphs"
				},
				"source": { "$ref": "#/definitions/Source" },
				"_id": { "$ref": "#/definitions/EncounterStarforgedID" },
				"suggestions": { "$ref": "#/definitions/Suggestions" }
			}
		},
		"EncounterVariantStarforged": {
			"title": "Encounter variant (Starforged)",
			"type": "object",
			"additionalProperties": false,
			"required": ["name", "nature", "rank", "description"],
			"properties": {
				"name": { "$ref": "#/definitions/Label" },
				"nature": { "$ref": "#/definitions/EncounterNatureStarforged" },
				"rank": { "$ref": "#/definitions/ChallengeRank" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" }
			}
		},
		"MoveID": {
			"title": "Move ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/moves(\\/[a-z][a-z_]*[a-z]){2}$",
			"examples": [
				"ironsworn/moves/adventure/face_danger",
				"starforged/moves/adventure/face_danger"
			]
		},
		"MoveCategoryID": {
			"title": "Move category ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/collections\\/moves(\\/[a-z][a-z_]*[a-z]){1}$",
			"examples": [
				"ironsworn/collections/moves/adventure",
				"starforged/collections/moves/adventure"
			]
		},
		"MoveCategory": {
			"title": "Move category",
			"type": "object",
			"required": ["_id", "title", "source", "contents"],
			"properties": {
				"_id": { "$ref": "#/definitions/MoveCategoryID" },
				"title": { "$ref": "#/definitions/Title" },
				"source": { "$ref": "#/definitions/Source" },
				"summary": { "$ref": "#/definitions/MarkdownSentences" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"contents": {
					"type": "object",
					"description": "The elements contained by this collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Move" }
					}
				}
			}
		},
		"MoveCategoryExtension": {
			"title": "Move category extension",
			"description": "Extends a collection with additional items.",
			"type": "object",
			"required": ["_extends", "_id"],
			"properties": {
				"_id": { "$ref": "#/definitions/MoveCategoryID" },
				"_extends": {
					"description": "The ID of the collection to be extended.",
					"$ref": "#/definitions/MoveCategoryID"
				},
				"contents": {
					"type": "object",
					"description": "Items to be added to the extended collection.",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Move" }
					}
				}
			}
		},
		"RollableStatID": {
			"title": "Rollable stat ID",
			"oneOf": [
				{ "$ref": "#/definitions/StatID" },
				{ "$ref": "#/definitions/ConditionMeterID" },
				{ "$ref": "#/definitions/AttributeID" },
				{ "$ref": "#/definitions/ConditionMeterAlias" }
			]
		},
		"RollType": {
			"title": "Roll type",
			"type": "string",
			"enum": ["action_roll", "progress_roll"]
		},
		"RollMethod": {
			"title": "Roll method",
			"type": "string",
			"enum": ["any", "inherit", "highest", "lowest", "all"],
			"description": "`any`: When rolling with this move trigger option, the user picks which stat to use.\n\n`all`: When rolling with this move trigger option, *every* stat or progress track of the `using` key is rolled.\n\n`highest`: When rolling with this move trigger option, use the highest/best option from the `using` key.\n\n`lowest`: When rolling with this move trigger option, use the lowest/worst option from the `using` key.\n\n`inherit`: This move trigger option has no roll method of its own, and must inherit its roll from another move trigger option. If the parent's `Using` is defined, the inherited roll must use one of those stats/progress tracks."
		},
		"TriggerOption": {
			"title": "Trigger option",
			"type": "object",
			"required": ["roll_type", "method", "using"],
			"additionalProperties": false,
			"properties": {
				"text": { "$ref": "#/definitions/MarkdownPhrase" },
				"roll_type": { "$ref": "#/definitions/RollType" },
				"method": {
					"default": "any",
					"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.",
					"oneOf": [
						{ "$ref": "#/definitions/RollMethod" },
						{ "$ref": "#/definitions/MoveOutcomeType" }
					]
				},
				"using": {
					"title": "Roll using",
					"type": "array",
					"items": { "type": "string" },
					"description": "The stat(s) or progress track(s) that may be rolled with this move trigger option."
				}
			},
			"oneOf": [
				{
					"properties": {
						"roll_type": { "const": "progress_roll" },
						"using": {
							"type": "array",
							"items": { "$ref": "#/definitions/ProgressType" }
						}
					}
				},
				{
					"properties": {
						"roll_type": { "const": "action_roll" },
						"using": {
							"type": "array",
							"items": { "$ref": "#/definitions/RollableStatID" }
						}
					}
				}
			]
		},
		"Trigger": {
			"title": "Trigger",
			"type": "object",
			"required": ["text"],
			"additionalProperties": false,
			"properties": {
				"text": {
					"$ref": "#/definitions/MarkdownPhrase",
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary triggers (for specific stats or uses of an asset ability) are described in `options`."
				},
				"options": {
					"type": "array",
					"nullable": true,
					"items": {
						"title": "Trigger option",
						"type": "object",
						"required": ["roll_type", "method", "using"],
						"additionalProperties": false,
						"properties": {
							"text": { "$ref": "#/definitions/MarkdownPhrase" },
							"roll_type": { "$ref": "#/definitions/RollType" },
							"method": {
								"default": "any",
								"description": "The method this move trigger uses to select which stat(s) or progress track(s) are rolled. If this is a MoveOutcomeType, then it simply takes that result automatically rather than making a roll.",
								"oneOf": [
									{ "$ref": "#/definitions/RollMethod" },
									{ "$ref": "#/definitions/MoveOutcomeType" }
								]
							},
							"using": {
								"title": "Roll using",
								"type": "array",
								"items": { "type": "string" },
								"description": "The stat(s) or progress track(s) that may be rolled with this move trigger option."
							}
						},
						"oneOf": [
							{
								"properties": {
									"roll_type": { "const": "progress_roll" },
									"using": {
										"type": "array",
										"items": { "$ref": "#/definitions/ProgressType" }
									}
								}
							},
							{
								"properties": {
									"roll_type": { "const": "action_roll" },
									"using": {
										"type": "array",
										"items": { "$ref": "#/definitions/RollableStatID" }
									}
								}
							}
						]
					}
				},
				"by": {
					"title": "Triggered by",
					"type": "object",
					"description": "Information on who can trigger this item. Usually this is just the player, but some asset abilities can trigger from an Ally's move.",
					"additionalProperties": false,
					"default": { "player": true, "ally": false },
					"required": ["player", "ally"],
					"properties": {
						"player": { "type": "boolean", "default": true },
						"ally": { "type": "boolean", "default": false }
					}
				}
			}
		},
		"Move": {
			"title": "Move",
			"type": "object",
			"required": ["_id", "text", "name", "trigger", "source"],
			"additionalProperties": false,
			"properties": {
				"_id": { "$ref": "#/definitions/MoveID" },
				"name": { "$ref": "#/definitions/Label" },
				"trigger": { "$ref": "#/definitions/Trigger" },
				"source": { "$ref": "#/definitions/Source" },
				"outcomes": { "$ref": "#/definitions/MoveOutcomes" },
				"text": { "$ref": "#/definitions/MarkdownParagraphs" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"progress_move": {
					"description": "Whether or not the move is a Progress Move. Progress moves roll two challenge dice against a progress score.",
					"type": "boolean",
					"default": false
				},
				"attributes": {
					"type": "object",
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/Attribute" }
					}
				}
			},
			"oneOf": [
				{
					"properties": {
						"progress_move": { "const": true },
						"trigger": {
							"type": "object",
							"properties": {
								"options": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": { "roll_type": { "const": "progress_roll" } }
									}
								}
							}
						}
					}
				},
				{
					"properties": {
						"trigger": {
							"type": "object",
							"properties": {
								"options": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": { "roll_type": { "const": "action_roll" } }
									}
								}
							}
						}
					}
				}
			]
		},
		"MoveOutcomeType": {
			"title": "Move outcome type",
			"type": "string",
			"enum": ["miss", "weak_hit", "strong_hit"]
		},
		"MoveOutcome": {
			"title": "Move outcome",
			"type": "object",
			"required": ["text"],
			"properties": { "text": { "$ref": "#/definitions/MarkdownParagraph" } }
		},
		"MoveOutcomeMatchable": {
			"title": "Move outcome matchable",
			"type": "object",
			"allOf": [
				{ "$ref": "#/definitions/MoveOutcome" },
				{ "properties": { "match": { "$ref": "#/definitions/MoveOutcome" } } }
			]
		},
		"MoveOutcomes": {
			"title": "Move outcomes",
			"type": "object",
			"required": ["miss", "weak_hit", "strong_hit"],
			"properties": {
				"miss": { "$ref": "#/definitions/MoveOutcomeMatchable" },
				"weak_hit": { "$ref": "#/definitions/MoveOutcome" },
				"strong_hit": { "$ref": "#/definitions/MoveOutcomeMatchable" }
			}
		},
		"CustomStat": {
			"title": "Custom stat",
			"type": "object",
			"required": ["label", "options"],
			"properties": {
				"label": { "$ref": "#/definitions/Label" },
				"options": {
					"title": "Custom stat options",
					"type": "object",
					"required": [],
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/CustomStatOption" }
					}
				}
			},
			"additionalProperties": false
		},
		"collectionSchema": { "title": "Collection schema" },
		"collectionExtensionSchema": { "title": "Collection extension schema" },
		"AttributeID": {
			"title": "Attribute ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/(moves|assets)(\\/[a-z][a-z_]*[a-z]){2}\\/attributes\\/[a-z][a-z_]*[a-z]$"
		},
		"CustomStatOption": {
			"title": "Custom stat option",
			"type": "object",
			"required": ["label", "value"],
			"properties": {
				"label": { "$ref": "#/definitions/Label" },
				"value": {
					"description": "The numeric value to be used as +stat when making an Action Roll.",
					"type": "integer",
					"minimum": 0
				}
			},
			"additionalProperties": false
		},
		"InputPosition": {
			"title": "Input position",
			"enum": [
				"card-top",
				"card-back",
				"card-bottom",
				"ability-1-right",
				"ability-2-right",
				"ability-3-right",
				"ability-1-bottom",
				"ability-2-bottom",
				"ability-3-bottom"
			],
			"type": "string"
		},
		"Attribute": {
			"title": "Attribute",
			"oneOf": [
				{ "$ref": "#/definitions/AttributeText" },
				{ "$ref": "#/definitions/AttributeNumeric" }
			]
		},
		"AttributeText": {
			"title": "Attribute text",
			"type": "object",
			"description": "A text attribute that accepts a user-provided string value. Recommended HTML element: <input type='text'>",
			"required": ["attribute_type", "label", "value"],
			"properties": {
				"label": { "$ref": "#/definitions/Label" },
				"attribute_type": { "type": "string", "const": "text" },
				"value": { "type": ["null", "string"], "default": null }
			}
		},
		"ClockSegments": {
			"title": "Clock segments",
			"type": "integer",
			"enum": [4, 6, 8, 10]
		},
		"AttributeNumeric": {
			"title": "Attribute numeric",
			"type": "object",
			"required": ["attribute_type", "label", "min", "value", "max"],
			"additionalProperties": false,
			"properties": {
				"attribute_type": { "$ref": "#/definitions/AttributeNumericType" },
				"label": { "$ref": "#/definitions/Label" },
				"min": { "type": "integer" },
				"value": { "type": "integer" },
				"max": { "type": ["integer", "null"] }
			},
			"oneOf": [
				{
					"type": "object",
					"properties": {
						"attribute_type": { "const": "clock", "type": "string" },
						"min": { "const": 0, "type": "integer" },
						"value": {
							"default": 0,
							"type": "integer",
							"title": "Filled clock segments"
						},
						"max": {
							"$ref": "#/definitions/ClockSegments",
							"title": "Clock segments (total)"
						}
					}
				},
				{
					"type": "object",
					"properties": {
						"attribute_type": { "type": "string", "const": "condition_meter" },
						"min": { "const": 0, "type": "integer" },
						"value": { "default": 0, "type": "integer" },
						"max": { "type": "integer" }
					}
				},
				{
					"type": "object",
					"properties": {
						"attribute_type": { "type": "string", "const": "counter" },
						"min": { "const": 0, "type": "integer" },
						"value": { "default": 0, "type": "integer" },
						"max": { "type": ["integer", "null"], "default": null }
					}
				}
			]
		},
		"AttributeNumericType": {
			"title": "Attribute numeric type",
			"type": "string",
			"enum": ["condition_meter", "clock", "counter"]
		},
		"AttributeNumericOverride": {
			"title": "Attribute numeric override",
			"description": "Adjusts an existing numeric input, usually a condition meter",
			"type": "object",
			"additionalProperties": false,
			"required": ["_extends"],
			"properties": {
				"_extends": { "$ref": "#/definitions/AttributeID" },
				"min": { "type": "integer" },
				"max": { "type": "integer" },
				"value": { "type": "integer" }
			}
		},
		"OracleCollectionTemplate": {
			"title": "Oracle collection template",
			"type": "object",
			"oneOf": [
				{
					"type": "object",
					"required": ["_template", "contents"],
					"properties": {
						"_template": { "type": "string", "const": "LocationThemeOracles" },
						"contents": {
							"type": "object",
							"properties": {
								"feature": {
									"title": "LocationThemeFeatureOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemeFeatureOracle"
										},
										"table": {
											"type": "array",
											"minItems": 13,
											"maxItems": 13,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 8 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 9 },
														"high": { "type": "number", "const": 16 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 17 },
														"high": { "type": "number", "const": 24 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 25 },
														"high": { "type": "number", "const": 32 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 33 },
														"high": { "type": "number", "const": 40 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 41 },
														"high": { "type": "number", "const": 48 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 49 },
														"high": { "type": "number", "const": 56 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 57 },
														"high": { "type": "number", "const": 64 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 65 },
														"high": { "type": "number", "const": 72 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 73 },
														"high": { "type": "number", "const": 80 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 81 },
														"high": { "type": "number", "const": 88 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 89 },
														"high": { "type": "number", "const": 96 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 97 },
														"high": { "type": "number", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "string",
											"default": "Use this table to reveal a new aspect of the location."
										}
									}
								},
								"peril": {
									"title": "LocationThemePerilOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemePerilOracle"
										},
										"table": {
											"type": "array",
											"minItems": 12,
											"maxItems": 12,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 9 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 10 },
														"high": { "type": "number", "const": 18 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 19 },
														"high": { "type": "number", "const": 27 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 28 },
														"high": { "type": "number", "const": 36 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 37 },
														"high": { "type": "number", "const": 45 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 46 },
														"high": { "type": "number", "const": 54 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 55 },
														"high": { "type": "number", "const": 63 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 64 },
														"high": { "type": "number", "const": 72 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 73 },
														"high": { "type": "number", "const": 81 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 82 },
														"high": { "type": "number", "const": 90 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Action](starforged/oracles/core/action) + [Theme](starforged/oracles/core/theme)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/action"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/theme"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 91 },
														"high": { "type": "number", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "Roll twice"
														},
														"rolls": {
															"type": "array",
															"minItems": 1,
															"maxItems": 1,
															"items": [
																{
																	"type": "object",
																	"required": ["times"],
																	"properties": {
																		"_template": { "type": "string" },
																		"times": { "type": "number", "const": 2 }
																	}
																}
															]
														},
														"low": { "type": "number", "const": 99 },
														"high": { "type": "number", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "string",
											"default": "Use this table to help envision a complication or hazard."
										}
									}
								},
								"opportunity": {
									"title": "LocationThemeOpportunityOracle",
									"type": "object",
									"required": ["table"],
									"properties": {
										"_template": {
											"type": "string",
											"const": "LocationThemeOpportunityOracle"
										},
										"table": {
											"type": "array",
											"minItems": 5,
											"maxItems": 5,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 20 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 21 },
														"high": { "type": "number", "const": 40 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 41 },
														"high": { "type": "number", "const": 60 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 61 },
														"high": { "type": "number", "const": 80 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 81 },
														"high": { "type": "number", "const": 100 }
													}
												}
											]
										},
										"defaultKey": {
											"type": "object",
											"default": {
												"canonical": "Opportunity",
												"summary": "Use this table to help envision a beneficial encounter or event, such as when rolling a strong hit with a match in a location."
											}
										}
									}
								}
							}
						}
					}
				},
				{
					"title": "PlanetOracles",
					"type": "object",
					"required": ["sample_names", "collections", "contents"],
					"properties": {
						"_template": { "type": "string", "const": "PlanetOracles" },
						"collections": {
							"type": "object",
							"required": ["settlements"],
							"properties": {
								"_template": { "type": "string" },
								"settlements": {
									"type": "object",
									"required": ["title", "contents"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": {
													"type": "string",
													"const": "Settlements"
												}
											}
										},
										"contents": {
											"type": "object",
											"required": ["terminus", "outlands", "expanse"],
											"properties": {
												"_template": { "type": "string" },
												"terminus": {
													"type": "object",
													"required": ["table", "title"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"title": {
															"type": "object",
															"required": ["canonical"],
															"properties": {
																"_template": { "type": "string" },
																"canonical": {
																	"type": "string",
																	"const": "Terminus"
																}
															}
														}
													}
												},
												"outlands": {
													"type": "object",
													"required": ["table", "title"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"title": {
															"type": "object",
															"required": ["canonical"],
															"properties": {
																"_template": { "type": "string" },
																"canonical": {
																	"type": "string",
																	"const": "Outlands"
																}
															}
														}
													}
												},
												"expanse": {
													"type": "object",
													"required": ["table", "title"],
													"properties": {
														"_template": { "type": "string" },
														"table": {
															"type": "array",
															"minItems": 5,
															"maxItems": 5,
															"items": [
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "None"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Orbital settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Planetside settlement"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Multiple settlements"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["result"],
																	"properties": {
																		"_template": { "type": "string" },
																		"result": {
																			"type": "string",
																			"const": "Settlements in conflict"
																		}
																	}
																}
															]
														},
														"title": {
															"type": "object",
															"required": ["canonical"],
															"properties": {
																"_template": { "type": "string" },
																"canonical": {
																	"type": "string",
																	"const": "Expanse"
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"contents": {
							"type": "object",
							"required": [
								"atmosphere",
								"observed_from_space",
								"feature",
								"life"
							],
							"properties": {
								"_template": { "type": "string" },
								"atmosphere": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": { "type": "string", "const": "Atmosphere" }
											}
										},
										"table": {
											"type": "array",
											"minItems": 6,
											"maxItems": 6,
											"items": [
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "None / thin"
														}
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Toxic" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Corrosive" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Marginal" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "Breathable"
														}
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Ideal" }
													}
												}
											]
										}
									}
								},
								"observed_from_space": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": {
													"type": "string",
													"const": "Observed From Space"
												}
											}
										},
										"table": {
											"type": "array",
											"minItems": 10,
											"maxItems": 10,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 11 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 12 },
														"high": { "type": "number", "const": 22 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 23 },
														"high": { "type": "number", "const": 33 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 34 },
														"high": { "type": "number", "const": 44 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 45 },
														"high": { "type": "number", "const": 55 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 56 },
														"high": { "type": "number", "const": 66 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 67 },
														"high": { "type": "number", "const": 77 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 78 },
														"high": { "type": "number", "const": 88 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 89 },
														"high": { "type": "number", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high", "result"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 99 },
														"high": { "type": "number", "const": 100 },
														"result": {
															"type": "string",
															"const": "Precursor Vault (orbital)"
														}
													}
												}
											]
										}
									}
								},
								"feature": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical", "short"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": {
													"type": "string",
													"const": "Planetside Feature"
												},
												"short": { "type": "string", "const": "Feature" }
											}
										},
										"table": {
											"type": "array",
											"minItems": 15,
											"maxItems": 15,
											"items": [
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 1 },
														"high": { "type": "number", "const": 7 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 8 },
														"high": { "type": "number", "const": 14 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 15 },
														"high": { "type": "number", "const": 21 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 22 },
														"high": { "type": "number", "const": 28 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 29 },
														"high": { "type": "number", "const": 35 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 36 },
														"high": { "type": "number", "const": 42 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 43 },
														"high": { "type": "number", "const": 49 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 50 },
														"high": { "type": "number", "const": 56 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 57 },
														"high": { "type": "number", "const": 63 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 64 },
														"high": { "type": "number", "const": 70 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 71 },
														"high": { "type": "number", "const": 77 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 78 },
														"high": { "type": "number", "const": 84 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 85 },
														"high": { "type": "number", "const": 91 }
													}
												},
												{
													"type": "object",
													"required": ["result", "rolls", "low", "high"],
													"properties": {
														"_template": { "type": "string" },
														"result": {
															"type": "string",
															"const": "[⏵Descriptor](starforged/oracles/core/descriptor) + [Focus](starforged/oracles/core/focus)"
														},
														"rolls": {
															"type": "array",
															"minItems": 2,
															"maxItems": 2,
															"items": [
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/descriptor"
																		}
																	}
																},
																{
																	"type": "object",
																	"required": ["oracle"],
																	"properties": {
																		"_template": { "type": "string" },
																		"oracle": {
																			"type": "string",
																			"const": "starforged/oracles/core/focus"
																		}
																	}
																}
															]
														},
														"low": { "type": "number", "const": 92 },
														"high": { "type": "number", "const": 98 }
													}
												},
												{
													"type": "object",
													"required": ["low", "high", "result"],
													"properties": {
														"_template": { "type": "string" },
														"low": { "type": "number", "const": 99 },
														"high": { "type": "number", "const": 100 },
														"result": {
															"type": "string",
															"const": "Precursor Vault (planetside)"
														}
													}
												}
											]
										}
									}
								},
								"life": {
									"type": "object",
									"required": ["title", "table"],
									"properties": {
										"_template": { "type": "string" },
										"title": {
											"type": "object",
											"required": ["canonical"],
											"properties": {
												"_template": { "type": "string" },
												"canonical": { "type": "string", "const": "Life" }
											}
										},
										"table": {
											"type": "array",
											"minItems": 6,
											"maxItems": 6,
											"items": [
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "None" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Extinct" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Scarce" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Diverse" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Bountiful" }
													}
												},
												{
													"type": "object",
													"required": ["result"],
													"properties": {
														"_template": { "type": "string" },
														"result": { "type": "string", "const": "Overrun" }
													}
												}
											]
										}
									}
								}
							}
						},
						"sample_names": { "type": "array", "items": { "type": "string" } }
					}
				}
			]
		},
		"OracleTableTemplate": {
			"title": "Oracle table template",
			"type": "object",
			"oneOf": [
				{
					"title": "LocationOracle",
					"type": "object",
					"required": ["table"],
					"properties": {
						"_template": { "type": "string", "const": "LocationOracle" },
						"table": {
							"type": "array",
							"minItems": 3,
							"maxItems": 3,
							"items": [
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Planetside" }
									}
								},
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Orbital" }
									}
								},
								{
									"type": "object",
									"required": ["result"],
									"properties": {
										"_template": { "type": "string" },
										"result": { "type": "string", "const": "Deep Space" }
									}
								}
							]
						}
					}
				}
			]
		},
		"ConditionMeterAlias": {
			"title": "Condition meter alias",
			"type": "string",
			"description": "Tags used to group non-player condition meters (for e.g. companions and vehicles) that are referenced by moves and other assets.",
			"enum": [
				"companion_health",
				"attached_asset_meter",
				"vehicle_integrity",
				"command_vehicle_integrity",
				"support_vehicle_integrity",
				"incidental_vehicle_integrity"
			]
		},
		"ProgressType": {
			"title": "Progress type",
			"type": "string",
			"description": "Standard progress track types found in Ironsworn: Starforged.",
			"enum": [
				"combat_progress",
				"vow_progress",
				"scene_challenge_progress",
				"expedition_progress",
				"connection_progress",
				"quests_legacy",
				"bonds_legacy",
				"discoveries_legacy"
			]
		},
		"Suggestions": {
			"title": "Suggestions",
			"description": "Related items that can be presented as useful shortcuts.",
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"assets": {
					"title": "Suggested assets",
					"type": "array",
					"items": { "$ref": "#/definitions/AssetID" },
					"nullable": true
				},
				"moves": {
					"title": "Suggested moves",
					"type": "array",
					"items": { "$ref": "#/definitions/MoveID" },
					"nullable": true
				},
				"oracles": {
					"title": "Suggested oracle tables",
					"type": "array",
					"items": { "$ref": "#/definitions/OracleTableID" },
					"nullable": true
				},
				"encounters": {
					"title": "Suggested encounters",
					"type": "array",
					"items": { "$ref": "#/definitions/EncounterStarforgedID" }
				}
			}
		},
		"SettingTruthID": {
			"title": "Setting truth ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/setting_truths\\/[a-z][a-z_]*[a-z]$",
			"examples": ["starforged/setting_truths/exodus"]
		},
		"SettingTruth": {
			"title": "Setting truth",
			"type": "object",
			"required": ["_id", "name", "source"],
			"properties": {
				"_id": { "$ref": "#/definitions/SettingTruthID" },
				"name": { "$ref": "#/definitions/Label" },
				"icon": { "$ref": "#/definitions/Icon" },
				"suggestions": { "$ref": "#/definitions/Suggestions" },
				"source": { "$ref": "#/definitions/Source" },
				"options": {
					"type": "array",
					"maxItems": 3,
					"minItems": 3,
					"items": { "$ref": "#/definitions/SettingTruthOption" }
				}
			}
		},
		"SettingTruthOptionID": {
			"title": "Setting truth option ID",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9_]+\\/setting_truths\\/[a-z][a-z_]*[a-z]\\/[0-2]$",
			"examples": ["starforged/setting_truths/exodus/0"]
		},
		"SettingTruthOption": {
			"title": "Setting truth option",
			"type": "object",
			"required": ["_id", "description", "quest_starter"],
			"properties": {
				"_id": { "$ref": "#/definitions/SettingTruthOptionID" },
				"summary": { "$ref": "#/definitions/MarkdownPhrase" },
				"description": { "$ref": "#/definitions/MarkdownParagraphs" },
				"quest_starter": { "$ref": "#/definitions/MarkdownParagraph" }
			}
		}
	},
	"type": "object",
	"additionalProperties": false,
	"patternProperties": {
		"^[a-z0-9][a-z0-9_]+$": {
			"title": "Namespace",
			"type": "object",
			"additionalProperties": false,
			"required": ["_ruleset", "_source"],
			"properties": {
				"_ruleset": {
					"description": "The ruleset (Starforged or Classic ironsworn) that these elements are for.",
					"const": "starforged"
				},
				"_source": {
					"$ref": "#/definitions/Source",
					"description": "Source information to be inherited by all eligible descendants. Descendant '_source' properties will override only the properties they specify; use the 'source' property if you'd prefer to replace the entire object."
				},
				"oracles": {
					"title": "Oracles",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/OracleCollection" },
								{ "$ref": "#/definitions/OracleCollectionExtension" }
							]
						}
					}
				},
				"moves": {
					"title": "Moves",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/MoveCategory" },
								{ "$ref": "#/definitions/MoveCategoryExtension" }
							]
						}
					}
				},
				"assets": {
					"title": "Assets",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"oneOf": [
								{ "$ref": "#/definitions/AssetType" },
								{ "$ref": "#/definitions/AssetTypeExtension" }
							]
						}
					}
				},
				"encounters": {
					"title": "Encounters",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": {
							"$ref": "#/definitions/EncounterStarforged"
						}
					}
				},
				"setting_truths": {
					"title": "Setting truths",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z][a-z_]*[a-z]$": { "$ref": "#/definitions/SettingTruth" }
					}
				}
			}
		}
	}
}
